(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{27:function(p,t,e){"use strict";e.r(t);var n=e(1),a=Object(n.a)({},function(){var p=this,t=p.$createElement,e=p._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":p.$parent.slotKey}},[e("h1",{attrs:{id:"pm2-用法及帮助"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pm2-用法及帮助","aria-hidden":"true"}},[p._v("#")]),p._v(" pm2 用法及帮助")]),p._v(" "),e("p",[p._v("用法:")]),p._v(" "),e("pre",[e("code",[p._v("$ npm install pm2 -g            # 命令行安装 pm2\n$ pm2 start app.js -i 4         # 后台运行pm2，启动4核\n$ pm2 start app.js -i 0         # 后台运行pm2，启动全核\n")])]),p._v(" "),e("p",[p._v("也可以把'max' 参数传递给 start\n正确的进程数目依赖于Cpu的核心数目")]),p._v(" "),e("pre",[e("code",[p._v("  $ pm2 start app.js --name my-api      # 命名进程\n  $ pm2 list            # 显示所有进程状态\n  $ pm2 monit           # 监视所有进程\n  $ pm2 logs            # 显示所有进程日志\n  $ pm2 stop all        # 停止所有进程\n  $ pm2 restart all     # 重启所有进程\n  $ pm2 reload all      # 0秒停机重载进程 (用于 NETWORKED 进程)\n  $ pm2 stop 0          # 停止指定的进程\n  $ pm2 restart 0       # 重启指定的进程\n  $ pm2 startup         # 产生 init 脚本 保持进程活着\n  $ pm2 web             # 运行健壮的 computer API endpoint (http://localhost:9615)\n  $ pm2 delete 0        # 杀死指定的进程\n  $ pm2 delete all      # 杀死全部进程\n")])]),p._v(" "),e("p",[p._v("运行进程的不同方式：")]),p._v(" "),e("pre",[e("code",[p._v("  $ pm2 start app.js -i max                          # 根据有效CPU数目启动最大进程数目\n  $ pm2 start app.js -i 3                            # 启动3个进程\n  $ pm2 start app.js -x                              # 用fork模式启动 app.js 而不是使用 cluster\n  $ pm2 start app.js -x -- -a 23                     # 用fork模式启动 app.js 并且传递参数 (-a 23)\n  $ pm2 start app.js --name serverone                # 启动一个进程并把它命名为 serverone\n  $ pm2 stop serverone                               # 停止 serverone 进程\n  $ pm2 start app.json                               # 启动进程, 在 app.json里设置选项\n  $ pm2 start app.js -i max -- -a 23                 # 在--之后给 app.js 传递参数\n  $ pm2 start app.js -i max -e err.log -o out.log    # 启动 并 生成一个配置文件\n")])]),p._v(" "),e("p",[p._v("你也可以执行用其他语言编写的app ( fork 模式):")]),p._v(" "),e("pre",[e("code",[p._v("  $ pm2 start my-bash-script.sh -x --interpreter bash\n  $ pm2 start my-python-script.py -x --interpreter python\n")])]),p._v(" "),e("p",[p._v("0秒停机重载:\n这项功能允许你重新载入代码而不用失去请求连接。\n注意：\n仅能用于web应用\n运行于Node 0.11.x版本\n运行于 cluster 模式（默认模式）")]),p._v(" "),e("pre",[e("code",[p._v("$ pm2 reload all # 全部重启\n")])]),p._v(" "),e("p",[p._v("CoffeeScript:")]),p._v(" "),e("pre",[e("code",[p._v("$ pm2 start my_app.coffee       \n")])]),p._v(" "),e("p",[p._v("列出由pm2管理的所有进程信息，还会显示一个进程会被启动多少次，因为没处理的异常。")]),p._v(" "),e("pre",[e("code",[p._v("pm2 list\n")])]),p._v(" "),e("p",[p._v("监视每个node进程的CPU和内存的使用情况。")]),p._v(" "),e("pre",[e("code",[p._v("pm2 monit\n")])])])},[],!1,null,null,null);t.default=a.exports}}]);