<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Roy Lau</title>
  <icon>https://www.gravatar.com/avatar/021b10e98b1b51511bf2e6df4273dea4</icon>
  <subtitle>是否能写好博客，在于坚持认真。</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://roy-lau.github.io/blog/"/>
  <updated>2019-06-12T07:21:25.038Z</updated>
  <id>https://roy-lau.github.io/blog/</id>
  
  <author>
    <name>Roy Lau</name>
    <email>897379293@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/static-pages-deploy/http-server/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/static-pages-deploy/http-server/</id>
    <published>2019-06-12T07:21:25.038Z</published>
    <updated>2019-06-12T07:21:25.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http-server用法及帮助"><a href="#http-server用法及帮助" class="headerlink" title="http-server用法及帮助"></a>http-server用法及帮助</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ hs --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">usage: http-server [path] [options]</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line"></span><br><span class="line">  -p           Port to use [8080]</span><br><span class="line">  -a           Address to use [0.0.0.0]</span><br><span class="line">  -d           Show directory listings [<span class="literal">true</span>]</span><br><span class="line">  -i           Display autoIndex [<span class="literal">true</span>]</span><br><span class="line">  -e --ext     Default file extension <span class="keyword">if</span> none supplied [none]</span><br><span class="line">  -s --silent  Suppress <span class="built_in">log</span> messages from output</span><br><span class="line">  --cors[=headers]   Enable CORS via the <span class="string">"Access-Control-Allow-Origin"</span> header</span><br><span class="line">                     Optionally provide CORS headers list separated by commas</span><br><span class="line">  -o [path]    Open browser window after starting the server</span><br><span class="line">  -c           Cache time (max-age) <span class="keyword">in</span> seconds [3600], e.g. -c10 <span class="keyword">for</span> 10 seconds.</span><br><span class="line"></span><br><span class="line">               To <span class="built_in">disable</span> caching, use -c-1.</span><br><span class="line">  -U --utc     Use UTC time format <span class="keyword">in</span> <span class="built_in">log</span> messages.</span><br><span class="line"></span><br><span class="line">  -P --proxy   Fallback proxy <span class="keyword">if</span> the request cannot be resolved. e.g.: http://someurl.com</span><br><span class="line"></span><br><span class="line">  -S --ssl     Enable https.</span><br><span class="line">  -C --cert    Path to ssl cert file (default: cert.pem).</span><br><span class="line">  -K --key     Path to ssl key file (default: key.pem).</span><br><span class="line"></span><br><span class="line">  -r --robots  Respond to /robots.txt [User-agent: *\nDisallow: /]</span><br><span class="line">  -h --<span class="built_in">help</span>    Print this list and <span class="built_in">exit</span>.</span><br></pre></td></tr></table></figure><p><strong>用法：</strong></p><p><code>hs</code>: 是<code>http-server</code>的简写</p><pre><code>usage: http-server [path] [options]         # path要启动项目的路径，options参数，如-p 1024 &lt;br&gt;</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ hs<span class="comment"># 直接运行hs，默认启动当前目录，监听8080端口</span></span><br><span class="line">Starting up http-server, serving ./</span><br><span class="line">Available on:</span><br><span class="line">  http://127.0.0.1:8080</span><br><span class="line">Hit CTRL-C to stop the server</span><br><span class="line"></span><br><span class="line">$ hs -p 1024 <span class="comment"># 设置监听端口</span></span><br><span class="line">$ hs -a 127.0.0.1 <span class="comment"># 设置监听的ip地址</span></span><br><span class="line">$ hs -d <span class="comment"># 是否显示目录列表，默认为[true]</span></span><br><span class="line">$ hs -i <span class="comment"># 是否显示 autoIndex，默认为[true]</span></span><br><span class="line">$ hs -e  or --ext <span class="comment"># 设置文件模板的扩展名，如：jijia2，jade，如果没有提供默认的文件扩展名(默认 'html')</span></span><br><span class="line">$ hs -s  or --silent <span class="comment"># 禁止日志信息输出</span></span><br><span class="line">$ hs --cors[=headers]    <span class="comment"># 设置http头，默认为Access-Control-Allow-Origin</span></span><br><span class="line">$ hs -o  [path]<span class="comment"># 自动唤起默认浏览器，也可以跟浏览器的路径</span></span><br><span class="line">$ hs -c <span class="comment"># Cache 设置最大缓存时间</span></span><br><span class="line">$ hs -U <span class="comment"># 显示UTC格式的日志时间</span></span><br><span class="line">$ hs -P</span><br><span class="line">$ hs -S <span class="comment"># 启动HTTPS协议(需要两个协议文件cert.pem和key.pem)</span></span><br><span class="line">$ hs -C <span class="comment"># 设置cert.pem文件名，默认为cert.pem。启动HTTPS时需要</span></span><br><span class="line">$ hs -K <span class="comment"># 设置key.pem文件名，默认为key.pem。启动HTTPS时需要</span></span><br><span class="line">$ hs -r <span class="comment"># robots 指定爬虫协议路径</span></span><br><span class="line">$ hs -h <span class="comment"># 显示帮助文档</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http-server用法及帮助&quot;&gt;&lt;a href=&quot;#http-server用法及帮助&quot; class=&quot;headerlink&quot; title=&quot;http-server用法及帮助&quot;&gt;&lt;/a&gt;http-server用法及帮助&lt;/h1&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/static-pages-deploy/pm2/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/static-pages-deploy/pm2/</id>
    <published>2019-06-12T07:21:25.038Z</published>
    <updated>2019-06-12T07:21:25.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pm2-用法及帮助"><a href="#pm2-用法及帮助" class="headerlink" title="pm2 用法及帮助"></a>pm2 用法及帮助</h1><p>用法:</p><pre><code>$ npm install pm2 -g            # 命令行安装 pm2$ pm2 start app.js -i 4         # 后台运行pm2，启动4核$ pm2 start app.js -i 0         # 后台运行pm2，启动全核</code></pre><p>也可以把’max’ 参数传递给 start<br>正确的进程数目依赖于Cpu的核心数目</p><pre><code>$ pm2 start app.js --name my-api      # 命名进程$ pm2 list            # 显示所有进程状态$ pm2 monit           # 监视所有进程$ pm2 logs            # 显示所有进程日志$ pm2 stop all        # 停止所有进程$ pm2 restart all     # 重启所有进程$ pm2 reload all      # 0秒停机重载进程 (用于 NETWORKED 进程)$ pm2 stop 0          # 停止指定的进程$ pm2 restart 0       # 重启指定的进程$ pm2 startup         # 产生 init 脚本 保持进程活着$ pm2 web             # 运行健壮的 computer API endpoint (http://localhost:9615)$ pm2 delete 0        # 杀死指定的进程$ pm2 delete all      # 杀死全部进程</code></pre><p>运行进程的不同方式：</p><pre><code>$ pm2 start app.js -i max                          # 根据有效CPU数目启动最大进程数目$ pm2 start app.js -i 3                            # 启动3个进程$ pm2 start app.js -x                              # 用fork模式启动 app.js 而不是使用 cluster$ pm2 start app.js -x -- -a 23                     # 用fork模式启动 app.js 并且传递参数 (-a 23)$ pm2 start app.js --name serverone                # 启动一个进程并把它命名为 serverone$ pm2 stop serverone                               # 停止 serverone 进程$ pm2 start app.json                               # 启动进程, 在 app.json里设置选项$ pm2 start app.js -i max -- -a 23                 # 在--之后给 app.js 传递参数$ pm2 start app.js -i max -e err.log -o out.log    # 启动 并 生成一个配置文件</code></pre><p>你也可以执行用其他语言编写的app ( fork 模式):</p><pre><code>$ pm2 start my-bash-script.sh -x --interpreter bash$ pm2 start my-python-script.py -x --interpreter python</code></pre><p>0秒停机重载:<br>这项功能允许你重新载入代码而不用失去请求连接。<br>注意：<br>仅能用于web应用<br>运行于Node 0.11.x版本<br>运行于 cluster 模式（默认模式）</p><pre><code>$ pm2 reload all # 全部重启</code></pre><p>CoffeeScript:</p><pre><code>$ pm2 start my_app.coffee       </code></pre><p>列出由pm2管理的所有进程信息，还会显示一个进程会被启动多少次，因为没处理的异常。</p><pre><code>pm2 list</code></pre><p>监视每个node进程的CPU和内存的使用情况。</p><pre><code>pm2 monit</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pm2-用法及帮助&quot;&gt;&lt;a href=&quot;#pm2-用法及帮助&quot; class=&quot;headerlink&quot; title=&quot;pm2 用法及帮助&quot;&gt;&lt;/a&gt;pm2 用法及帮助&lt;/h1&gt;&lt;p&gt;用法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install pm2 -g   
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/static-pages-deploy/README/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/static-pages-deploy/README/</id>
    <published>2019-06-12T07:21:25.038Z</published>
    <updated>2019-06-12T07:21:25.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录项目部署流程！"><a href="#记录项目部署流程！" class="headerlink" title="记录项目部署流程！"></a>记录项目部署流程！</h1><p>一、下载安装：</p><pre><code>sudo yum install node     # 安装nodenode -v                    # 查看node版本|是否安装成功sudo yum install npm    # 安装npmnpm -v                     # 查看npm版本|是否安装成功npm install pm2 -g --save         # 安装pm2(进程守护) -g 全局安装 --save 安装稳定版pm2 -v                     # 查看pm2版本|是否安装成功npm install http-server -g --save    # 安装http-server(可启动http服务) 参数同上hs --help                # 查看http-server帮助(http-server可以简写为hs)</code></pre><p>注：<br>    <a href="https://github.com/roy-lau/nodejs" target="_blank" rel="noopener">node 用法及帮助请点此查看</a><br><br>    <a href="https://github.com/roy-lau/nodejs" target="_blank" rel="noopener">npm 用法及帮助请点此查看</a><br><br>    <a href="https://github.com/roy-lau/log/blob/master/static-pages-deploy/pm2.md" target="_blank" rel="noopener">pm2 用法及帮助请点此查看</a>.<br><br>    <a href="https://github.com/roy-lau/log/blob/master/static-pages-deploy/http-server.md" target="_blank" rel="noopener">http-server 用法及帮助请点此查看</a>.</p><p>二、上传项目</p><pre><code>通过ftp工具上传项目到某目录</code></pre><p>三、测试</p><pre><code>cd 项目目录</code></pre><p>在项目目录下输入命令</p><pre><code>hsStarting up http-server, serving ./Available on:  http://127.0.0.1:8080Hit CTRL-C to stop the server</code></pre><p>在浏览器输入服务ip地址加端口号查看是否显示网页</p><p><strong>注：</strong>http-server会一直开启进程，占用端口。所以我们用npm安装了pm2（守护进程，后台监听端口）__</p><p>四、发布</p><pre><code>pm2 start &quot;http-server所在目录&quot; -x -- &quot;项目所在的路径&quot; 参数(-p 9090)pm2 start --name serveName &apos;hs&apos; -x -- &apos;.&apos; -p 1024     # 引号必须携带pm2 list 查看进程</code></pre><p>/usr/lib/node_modules/http-server/bin/http-server</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;记录项目部署流程！&quot;&gt;&lt;a href=&quot;#记录项目部署流程！&quot; class=&quot;headerlink&quot; title=&quot;记录项目部署流程！&quot;&gt;&lt;/a&gt;记录项目部署流程！&lt;/h1&gt;&lt;p&gt;一、下载安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo yum install no
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/learn-c++/4-inherit/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/learn-c++/4-inherit/</id>
    <published>2019-06-12T07:21:25.007Z</published>
    <updated>2019-06-12T07:21:25.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-远征之继承篇"><a href="#C-远征之继承篇" class="headerlink" title="C++ 远征之继承篇"></a>C++ 远征之继承篇</h1><p><a href="README.md">目录</a></p><p><a href="5-polymorphism.md">C++ 远征之多态篇</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-远征之继承篇&quot;&gt;&lt;a href=&quot;#C-远征之继承篇&quot; class=&quot;headerlink&quot; title=&quot;C++ 远征之继承篇&quot;&gt;&lt;/a&gt;C++ 远征之继承篇&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;README.md&quot;&gt;目录&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/learn-c++/5-polymorphism/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/learn-c++/5-polymorphism/</id>
    <published>2019-06-12T07:21:25.007Z</published>
    <updated>2019-06-12T07:21:25.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-远征之多态篇"><a href="#C-远征之多态篇" class="headerlink" title="C++ 远征之多态篇"></a>C++ 远征之多态篇</h1><p><a href="README.md">目录</a></p><p><a href="6-template.md">C++ 远征之模板篇</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-远征之多态篇&quot;&gt;&lt;a href=&quot;#C-远征之多态篇&quot; class=&quot;headerlink&quot; title=&quot;C++ 远征之多态篇&quot;&gt;&lt;/a&gt;C++ 远征之多态篇&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;README.md&quot;&gt;目录&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/learn-c++/README/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/learn-c++/README/</id>
    <published>2019-06-12T07:21:25.007Z</published>
    <updated>2019-06-12T07:21:25.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><blockquote><p>C++学习笔记</p></blockquote><ul><li><a href="./1-setSail.md">C++ 远征之起航篇</a></li><li><a href="./2-departure.md">C++ 远征之离港篇</a></li><li><a href="./3-package.md">C++ 远征之封装篇</a></li><li><a href="./4-inherit.md">C++ 远征之继承篇</a></li><li><a href="./5-polymorphism.md">C++ 远征之多态篇</a></li><li><a href="./6-template.md">C++ 远征之模板篇</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C++&quot;&gt;&lt;/a&gt;C++&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;C++学习笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;./1-setSail.m
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/learn-c++/6-template/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/learn-c++/6-template/</id>
    <published>2019-06-12T07:21:25.007Z</published>
    <updated>2019-06-12T07:21:25.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-远征之模板篇"><a href="#C-远征之模板篇" class="headerlink" title="C++ 远征之模板篇"></a>C++ 远征之模板篇</h1><p><a href="README.md">目录</a></p><p><a href>C++ </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-远征之模板篇&quot;&gt;&lt;a href=&quot;#C-远征之模板篇&quot; class=&quot;headerlink&quot; title=&quot;C++ 远征之模板篇&quot;&gt;&lt;/a&gt;C++ 远征之模板篇&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;README.md&quot;&gt;目录&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/learn-c++/1-setSail/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/learn-c++/1-setSail/</id>
    <published>2019-06-12T07:21:24.991Z</published>
    <updated>2019-06-12T07:21:24.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-远征之起航篇"><a href="#C-远征之起航篇" class="headerlink" title="C++ 远征之起航篇"></a>C++ 远征之起航篇</h1><p><a href="README.md">目录</a></p><details><br>  <summary>C++ 诞生地</summary><br>  <img src="/blog/.io//C++birthplace.png" alt="C++ 诞生地"><br></details><br><details><br>  <summary>C++ 之父</summary><br>  <img src="/blog/.io//C++father.png" alt="C++ 之父"><br></details><p>C++ 初体验</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;    <span class="comment">//关于这里，且听下回分解</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello word"</span>&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">//在此填写我们的开篇Hello word</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-基础知识"><a href="#C-基础知识" class="headerlink" title="C++ 基础知识"></a>C++ 基础知识</h3><h4 id="1、-数据类型"><a href="#1、-数据类型" class="headerlink" title="1、 数据类型"></a>1、 数据类型</h4><details><br>  <summary><strong>C语言的数据类型</strong></summary><br>  <img src="/blog/.io//C++dataType.png" alt="C语言的数据类型"><br></details><p>C++ 中新的数据类型</p><table><thead><tr><th></th><th>逻辑类型</th><th>真</th><th>假</th></tr></thead><tbody><tr><td>C</td><td>没提供</td><td>非0</td><td>0</td></tr><tr><td>C++</td><td>bool</td><td>true</td><td>false</td></tr></tbody></table><p>对比<strong>C</strong>与<strong>C++</strong> <code>bool</code>类型<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C 语言</span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">// to do</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// to do</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ 语言</span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="comment">// to do</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// to do</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、-初始化方法"><a href="#2、-初始化方法" class="headerlink" title="2、 初始化方法"></a>2、 初始化方法</h4><ul><li><p>C 语言提供的初始化方法 <code>int x = 1024;</code></p></li><li><p>C++ 提供两种初始化方法:</p><ol><li><p>复制初始化： <code>int x = 1024;</code></p></li><li><p>直接初始化： <code>int x(1024); //推荐</code></p></li></ol></li></ul><h4 id="3、-随用随定义"><a href="#3、-随用随定义" class="headerlink" title="3、 随用随定义"></a>3、 随用随定义</h4><ul><li><p>C语言: 所有变量定义必须位于函数体的最前面</p></li><li><p>C++： 所有变量随用随定义</p></li></ul><p>对比<strong>C</strong>与<strong>C++</strong> 随用随定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C语言</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v1 = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> v2 = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">v1 = v1 + v2;</span><br><span class="line">v2 = v2 + v1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ 语言</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v1 = <span class="number">3</span>;</span><br><span class="line">v1 = v1 + v2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v2 = <span class="number">4</span>;</span><br><span class="line">v2 = v2 + v1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-输入输出方式"><a href="#C-输入输出方式" class="headerlink" title="C++ 输入输出方式"></a>C++ 输入输出方式</h3><blockquote><p>对比<strong>C</strong>与<strong>C++</strong>的输入输出方式</p></blockquote><details><br>    <summary>C语言的I/O方式</summary><br>    <img src="/blog/.io//C-I-O.png" alt="C语言的输入输出方式"><br></details><br><details><br>    <summary>C++的I/O方式</summary><br>    <img src="/blog/.io//C++I-O.png" alt="C++的输入输出方式"><br></details><p><strong>C++ 的I/O方式</strong></p><p><code>cout输出</code> 语法形式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; C &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"x + y ="</span>&lt;&lt; x + y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// endl`代表回车(\n)</span></span><br></pre></td></tr></table></figure></p><p><code>cin输入</code> 语法形式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br></pre></td></tr></table></figure></p><p>优点：</p><ul><li>不用关注占位符</li><li>不用关注数据类型</li><li>不易出现问题</li></ul><p><strong>C++ 输入输出特性演示</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; // 这里存着 system() 函数</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求：</span></span><br><span class="line"><span class="comment">// 1. 提示用户输入一个整数，将该整数分别以8进制，10进制，16进制打印在屏幕上</span></span><br><span class="line"><span class="comment">// 2. 提示用户输入一个布尔值（0或1），以布尔方式将值打印在屏幕上</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入一个整数："</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; oct &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 8进制</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dec &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 10进制</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; hex &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 16进制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入一个布尔值(0 or 1):"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">bool</span> y = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; y;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; boolalpha &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-命名空间-namespace"><a href="#C-命名空间-namespace" class="headerlink" title="C++ 命名空间(namespace)"></a>C++ 命名空间(namespace)</h3><p>命名空间关键字： <code>namespace</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; <span class="comment">// 调用 std 命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"A function"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> B</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"B function"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2B function"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> B; <span class="comment">// 默认使用 B 命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; A::x &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出 A 命名空间下的 x 变量</span></span><br><span class="line">B::fun();  <span class="comment">// 调用 B 命名空间下的 fun 函数</span></span><br><span class="line">fun2();    <span class="comment">// 调用 B(默认) 命名空间下的 fun2 函数</span></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="综合题"><a href="#综合题" class="headerlink" title="综合题"></a>综合题</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"><span class="comment">/* 知识点：bool类型，命名空间，输入输出                 */</span></span><br><span class="line"><span class="comment">/* 题目要求：                                           */</span></span><br><span class="line"><span class="comment">/*      使用一个函数找出一个整型数组中的最大值或最小值  */</span></span><br><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaxOrMin</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> count,<span class="keyword">bool</span> isMax)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[<span class="number">0</span>]; <span class="comment">// 获取数组的第一个元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; count;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(isMax)&#123;</span><br><span class="line">    <span class="keyword">if</span>(temp &lt; arr[i])&#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp &gt; arr[i])&#123;</span><br><span class="line">                temp = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr1[<span class="number">4</span>] = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"求值(1:最大值，0:最小值): "</span>;</span><br><span class="line"><span class="keyword">bool</span> isMax = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; isMax;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; getMaxOrMin(arr1,<span class="number">4</span>,isMax) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="2-departure.md">C++ 远征之离港篇</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-远征之起航篇&quot;&gt;&lt;a href=&quot;#C-远征之起航篇&quot; class=&quot;headerlink&quot; title=&quot;C++ 远征之起航篇&quot;&gt;&lt;/a&gt;C++ 远征之起航篇&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;README.md&quot;&gt;目录&lt;/a&gt;&lt;/p&gt;
&lt;details&gt;&lt;b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/learn-c++/2-departure/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/learn-c++/2-departure/</id>
    <published>2019-06-12T07:21:24.991Z</published>
    <updated>2019-06-12T07:21:24.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-远征之离港篇"><a href="#C-远征之离港篇" class="headerlink" title="C++ 远征之离港篇"></a>C++ 远征之离港篇</h1><p><a href="README.md">目录</a></p><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><p>引用是变量的别名</p><blockquote><p>基本数据类型的引用</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;b = a; <span class="comment">// 引用（别名）必须初始化</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体类型的引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;Coor;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">Coor c1;</span><br><span class="line">Coor &amp;c = c1;  <span class="comment">// 设置c1的别名为c</span></span><br><span class="line">c.x = <span class="number">10</span>;</span><br><span class="line">c.y = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1.x &lt;&lt; c1.y;  <span class="comment">// 10 20</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针类型的引用</p><p><code>类型 *&amp;指针引用名 = 指针;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;a;</span><br><span class="line"><span class="keyword">int</span> *&amp;q = p;</span><br><span class="line">*q = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用做为函数参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常情况下的写法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">c = *a;</span><br><span class="line">*a = *b;</span><br><span class="line">*b = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>,y = <span class="number">20</span>;</span><br><span class="line">fun(&amp;x, &amp;y);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用函数写法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">c = a;</span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>,y = <span class="number">20</span>;</span><br><span class="line">fun(x, y)</span><br></pre></td></tr></table></figure><p>代码示例<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;Coord;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> &amp;w,<span class="keyword">int</span> &amp;e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> &amp;w,<span class="keyword">int</span> &amp;e)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">r = w;</span><br><span class="line">w = e;</span><br><span class="line">e = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;b = a;</span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 2</span></span><br><span class="line">a = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">Coord c;</span><br><span class="line">Coord &amp;c1 = c;</span><br><span class="line">c1.x = <span class="number">10</span>;</span><br><span class="line">c1.y = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c.x &lt;&lt; <span class="string">","</span> &lt;&lt; c.y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;j;</span><br><span class="line"><span class="keyword">int</span> *&amp;q = p;</span><br><span class="line">*q = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数</span></span><br><span class="line"><span class="keyword">int</span> w = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> e = <span class="number">8</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; w &lt;&lt; <span class="string">"-"</span> &lt;&lt; e &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">fun(w,e);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; w &lt;&lt; <span class="string">"-"</span> &lt;&lt; e &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="const关键字"><a href="#const关键字" class="headerlink" title="const关键字"></a>const关键字</h4><p><code>const</code>与基本数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> x = <span class="number">3</span>; <span class="comment">// 常量（不可改变）</span></span><br></pre></td></tr></table></figure><p><code>const</code>与指针类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这两种是等价的</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两种也是等价的</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> * <span class="keyword">const</span> p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int *const p = NULL;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;x;</span><br><span class="line">p = &amp;x; <span class="comment">// 正确</span></span><br><span class="line">*p = <span class="number">4</span>; <span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> p = &amp;x;</span><br><span class="line">p = &amp;y; <span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> p = &amp;x;</span><br><span class="line">p = &amp;y; <span class="comment">// 错误</span></span><br><span class="line">*p = <span class="number">4</span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p><code>const</code>与引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;y = x;</span><br><span class="line">x = <span class="number">10</span>; <span class="comment">// 正确</span></span><br><span class="line">y = <span class="number">20</span>; <span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">x = <span class="number">5</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> y = x;</span><br><span class="line">y = <span class="number">5</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *y = &amp;x;</span><br><span class="line">*y = <span class="number">5</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">z = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> y = &amp;x;</span><br><span class="line">y = &amp;z; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;y = x;</span><br><span class="line">y = <span class="number">5</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> *y = &amp;x; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *y = &amp;x; <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><p>代码实例<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> *p = &amp;x; <span class="comment">// 等价 const int *p = &amp;x;</span></span><br><span class="line">x = <span class="number">5</span>;</span><br><span class="line">*p = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="C-函数的新特性"><a href="#C-函数的新特性" class="headerlink" title="C++函数的新特性"></a>C++函数的新特性</h3><p><strong><em>函数参数的默认值</em></strong></p><blockquote><p>有默认参数值的参数必须在参数表的最右端</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j=<span class="number">5</span>, <span class="keyword">int</span> k = <span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j=<span class="number">5</span>, <span class="keyword">int</span> k)</span></span>; <span class="comment">// 这种写法是错误的</span></span><br></pre></td></tr></table></figure><blockquote><p>无实参则用默认值，否则实参覆盖默认值</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j=<span class="number">5</span>, <span class="keyword">int</span> k=<span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; j &lt;&lt; k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fun(<span class="number">20</span>);</span><br><span class="line">fun(<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">fun(<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数重载</p><p>1、 在相同的作用域内</p><p>2、 用<strong>同一个函数名</strong>定义的多个函数</p><p>3、 <strong>参数个数</strong>和<strong>参数类型</strong>不同</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line"><span class="comment">// to do</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getMax</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line"><span class="comment">// to do</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译时编译器会通过名称加参数的方式来区分同名函数</span></span><br><span class="line"></span><br><span class="line">getMax_int_int_int</span><br><span class="line">getMax_double_double_double</span><br></pre></td></tr></table></figure><p>内联函数</p><p><img src="/blog/.io//inline-function.png" alt="内联函数"></p><p>内联函数关键字： <code>inline</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>, j = <span class="number">20</span>, k = <span class="number">30</span>, m;</span><br><span class="line">m = max(i, j, k);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"max="</span> &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上遍代码的展开式</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>, j = <span class="number">20</span>, k = <span class="number">30</span>, m;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line">a = i; b = j; c = k;</span><br><span class="line"><span class="keyword">if</span>(b &gt; a) a = b;</span><br><span class="line"><span class="keyword">if</span>(c &gt; a) a = c;</span><br><span class="line">m = a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"max="</span> &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>内联编译是建议性的，由编译器决定。</p></li><li><p>逻辑简单，调用频繁的函数建议使用内联。</p></li><li><p>递归函数无法使用内联方式。</p></li></ul><p>总结：</p><p>  函数参数默认值 –&gt; 实参覆盖默认值<br><br>  函数重载 –&gt; 名称相同参数可辨<br><br>  内联函数 –&gt; inline 效率高 有条件</p><p>代码实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i = <span class="number">30</span>, <span class="keyword">int</span> j = <span class="number">20</span>, <span class="keyword">int</span> k = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">double</span> i,<span class="keyword">double</span> j)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">fun(); <span class="comment">// 30,20,10</span></span><br><span class="line">fun(<span class="number">100</span>); <span class="comment">// 100,20,10</span></span><br><span class="line">fun(<span class="number">100</span>,<span class="number">200</span>); <span class="comment">// 100,200,10</span></span><br><span class="line">fun(<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>); <span class="comment">// 100,200,300</span></span><br><span class="line"></span><br><span class="line">fun(<span class="number">1.1</span>,<span class="number">2.2</span>) <span class="comment">//1.1, 2.2</span></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt;<span class="string">","</span>&lt;&lt; j &lt;&lt;<span class="string">","</span>&lt;&lt; k &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">double</span> i, <span class="keyword">double</span> j)</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">","</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 求两个数的最大值</span></span><br><span class="line"><span class="comment">// 2. 求数组的最大值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数功能：返回数组中的最大值</span></span><br><span class="line"><span class="comment"> * @param  arr   整型数组</span></span><br><span class="line"><span class="comment"> * @param  count 数组长度</span></span><br><span class="line"><span class="comment"> * @return       数组的最大值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> maxNum = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>; i &lt; count; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (maxNum &lt; arr[i])&#123;</span><br><span class="line">maxNum = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">// 定义数组并初始化</span></span><br><span class="line"><span class="keyword">int</span> numArr[<span class="number">3</span>] = &#123;<span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动调用 int getMax(int a, int b)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; getMax(<span class="number">2</span>, <span class="number">6</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动调用返回数组中最大值的函数返回数组中的最大值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; getMax(numArr, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-内存管理"><a href="#C-内存管理" class="headerlink" title="C++内存管理"></a>C++内存管理</h4><blockquote><p>思考：</p></blockquote><p>  内存的本质是什么？  <strong>资源</strong></p><p>  谁来掌管资源？         <strong>操作系统</strong></p><p>  我们能做什么？         <strong>申请/归还</strong></p><p><em>申请/规划内存资源就是内存管理</em></p><p><strong>内存的申请和释放</strong></p><blockquote><p>运算符：</p></blockquote><p>申请内存 <code>new</code><br>释放内存 <code>delete</code></p><blockquote><p>方法：</p></blockquote><p>申请内存 <code>int *p = new int;</code><br>释放内存 <code>delete p;</code></p><blockquote><p>申请和释放块内存：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]; <span class="comment">// 申请块内存</span></span><br><span class="line"><span class="keyword">delete</span> []arr; <span class="comment">// 释放块内存</span></span><br></pre></td></tr></table></figure><blockquote><p>内存管理的其他方式：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C语言</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>; <span class="comment">// 申请内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span> *memblock)</span></span>; <span class="comment">// 释放内存</span></span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span></span><br><span class="line"><span class="keyword">delete</span></span><br></pre></td></tr></table></figure><blockquote><p>注意事项：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 申请内存</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == p)&#123;</span><br><span class="line"><span class="comment">// 内存申请失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == p)&#123;</span><br><span class="line"><span class="comment">// 内存分配失败</span></span><br><span class="line"><span class="comment">// 异常处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == p)&#123;</span><br><span class="line"><span class="comment">// 内存分配失败</span></span><br><span class="line"><span class="comment">// 异常处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> []p;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>总结：</p></blockquote><p>使用<code>new</code>申请内存，使用<code>delete</code>释放内存</p><p>申请内存需要判断是否成功，释放内存需要设空指针</p><p><code>new</code>与<code>delete</code>配套使用（有申请也要有释放）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>; <span class="comment">// 申请内存</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == p)&#123; <span class="comment">// 申请失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">*p = <span class="number">20</span>;  <span class="comment">// 赋值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出值</span></span><br><span class="line"><span class="keyword">delete</span> p; <span class="comment">// 释放内存</span></span><br><span class="line">p = <span class="literal">NULL</span>; <span class="comment">// 指针赋值为空</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 块内存</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>]; <span class="comment">// 申请块内存</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == p)&#123; <span class="comment">// 申请失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">10</span>;  <span class="comment">// p[0]赋值</span></span><br><span class="line">p[<span class="number">1</span>] = <span class="number">20</span>;  <span class="comment">// p[1]赋值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p[<span class="number">0</span>] &lt;&lt; <span class="string">","</span> &lt;&lt; p[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出值</span></span><br><span class="line"><span class="keyword">delete</span> []p; <span class="comment">// 释放块内存</span></span><br><span class="line">p = <span class="literal">NULL</span>; <span class="comment">// 指针赋值为空</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="3-package.md">C++ 远征之封装篇</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-远征之离港篇&quot;&gt;&lt;a href=&quot;#C-远征之离港篇&quot; class=&quot;headerlink&quot; title=&quot;C++ 远征之离港篇&quot;&gt;&lt;/a&gt;C++ 远征之离港篇&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;README.md&quot;&gt;目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;引用类
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/learn-c++/3-package/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/learn-c++/3-package/</id>
    <published>2019-06-12T07:21:24.991Z</published>
    <updated>2019-06-12T07:21:25.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-远征之封装篇"><a href="#C-远征之封装篇" class="headerlink" title="C++ 远征之封装篇"></a>C++ 远征之封装篇</h1><p><a href="README.md">目录</a></p><p>构造函数&amp;析构函数</p><p>对象复制&amp;对象赋值</p><p>对象数组&amp;对象指针</p><p>this 指针</p><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><blockquote><p>数据成员&amp;成员函数</p></blockquote><p><img src="/blog/.io//class-definition.png" alt="类的定义"></p><p>访问限定符：</p><ul><li>public： 公共的</li><li>protected： 受保护的</li><li>private： 私有的</li></ul><h4 id="实例化类对象"><a href="#实例化类对象" class="headerlink" title="实例化类对象"></a>实例化类对象</h4><p>类可以实例化多个对象，实例化对象的方式一般有两种：</p><p>1、 从栈中实例化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> type;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeVol</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">power</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">TV tv;</span><br><span class="line">TV tv[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、 从堆中实例化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> type;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeVol</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">power</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">TV *p = <span class="keyword">new</span> TV();</span><br><span class="line">TV *q = <span class="keyword">new</span> TV[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// todo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="keyword">delete</span> []q;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象成员访问"><a href="#对象成员访问" class="headerlink" title="对象成员访问"></a>对象成员访问</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单一成员</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">TV tv;</span><br><span class="line">tv.type = <span class="number">0</span>;</span><br><span class="line">tv.changeVol();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">TV *p = <span class="keyword">new</span> TV();</span><br><span class="line">p-&gt;type = <span class="number">0</span>;</span><br><span class="line">p-&gt;changeVol();</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组成员</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">TV tv;</span><br><span class="line">tv.type = <span class="number">0</span>;</span><br><span class="line">tv.changeVol();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">TV *p = <span class="keyword">new</span> TV[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">p[i]-&gt;type = <span class="number">0</span>;</span><br><span class="line">p[i]-&gt;changeVol();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> []p;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实例化类对象-1"><a href="#实例化类对象-1" class="headerlink" title="实例化类对象"></a>实例化类对象</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printX</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printY</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">// 栈</span></span><br><span class="line">Coordinate Coor;</span><br><span class="line">Coor.x = <span class="number">10</span>;</span><br><span class="line">Coor.y = <span class="number">20</span>;</span><br><span class="line">Coor.printX();</span><br><span class="line">Coor.printY();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆</span></span><br><span class="line">Coordinate *p = <span class="keyword">new</span> Coordinate();  <span class="comment">// 申请内存失败，返回NULL</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p)&#123;</span><br><span class="line"><span class="comment">// failed 申请内存失败，直接返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;x = <span class="number">100</span>;</span><br><span class="line">p-&gt;y = <span class="number">200</span>;</span><br><span class="line">p-&gt;printX();</span><br><span class="line">p-&gt;printY();</span><br><span class="line"><span class="comment">// 清空内存</span></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="string-类型"><a href="#string-类型" class="headerlink" title="string 类型"></a>string 类型</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> name = <span class="string">"roy"</span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">hobby</span><span class="params">(<span class="string">"football"</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; hobby &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>初始化 string 对象的方式:</th><th></th></tr></thead><tbody><tr><td>string s1;</td><td>s1 为空字符串</td></tr><tr><td>string s2(“ABC”);</td><td>用字符串字面值初始化s2</td></tr><tr><td>string s3(s2);</td><td>将s3初始化为s2的一个副本</td></tr><tr><td>string s4(n,’c’);</td><td>将s4初始化为字符’c’的n个副本</td></tr></tbody></table><table><thead><tr><th>string 的常用操作:</th><th></th></tr></thead><tbody><tr><td>s.empty()</td><td>若s为空字符串，则返回true，否则返回false</td></tr><tr><td>s.size()</td><td>返回s中字符的个数</td></tr><tr><td>s[n]</td><td>返回s中位置为n的字符，位置从0开始</td></tr><tr><td>s1+s2</td><td>将来两个串连接成新串，返回新生成的串</td></tr><tr><td>s1 = s2</td><td>把s1得内容替换为s2的副本</td></tr><tr><td>v1 == s2</td><td>判定相等，相等返回true，否则返回false</td></tr><tr><td>v1 != s2</td><td>判定不等，不等返回true，否则返回false</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****</span></span><br><span class="line"><span class="comment"> * 题目描述：</span></span><br><span class="line"><span class="comment"> *          1. 提示用户输入姓名</span></span><br><span class="line"><span class="comment"> *          2. 接收用户的输入</span></span><br><span class="line"><span class="comment"> *          3. 向用户问好： hello name</span></span><br><span class="line"><span class="comment"> *          4. 用户名字的长度</span></span><br><span class="line"><span class="comment"> *          5. 告诉用户名字首字母是什么</span></span><br><span class="line"><span class="comment"> *          6. 如果用户直接输入回车，那么告诉用户的输入为空。</span></span><br><span class="line"><span class="comment"> *          7. 如果用户输入的是admin，告诉用户的角色是一个管理员账户</span></span><br><span class="line"><span class="comment"> *****/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入用户名："</span>;</span><br><span class="line">    <span class="built_in">string</span> username;</span><br><span class="line">    getline(<span class="built_in">cin</span>,username);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(username.empty())&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">" enter name cannot be empty X"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(username == <span class="string">"admin"</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"you is a admin !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"hello "</span> + username &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"your name length is : "</span>  &lt;&lt;  username.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"your name isitials is : "</span> &lt;&lt; username[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据的封装"><a href="#数据的封装" class="headerlink" title="数据的封装"></a>数据的封装</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/****</span></span><br><span class="line"><span class="comment">*  数据的封装</span></span><br><span class="line"><span class="comment">* 定义一个Student类，含有如下信息：</span></span><br><span class="line"><span class="comment">* 1、姓名： name</span></span><br><span class="line"><span class="comment">* 2、性别： gender</span></span><br><span class="line"><span class="comment">* 3、学分（只读）： score</span></span><br><span class="line"><span class="comment">* 4、学习： study</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"> ****/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="comment">// 公共的</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 设置姓名</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> _name)</span></span>&#123;</span><br><span class="line">m_strName = _name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取姓名</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_strName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置性别</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setGender</span><span class="params">(<span class="built_in">string</span> _gender)</span></span>&#123;</span><br><span class="line">m_strGender = _gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取性别</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getGender</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_strGender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取学分</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_iScore;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化学分 0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">m_iScore = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 增加学分</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">(<span class="keyword">int</span> _score)</span></span>&#123;</span><br><span class="line">m_iScore += _score</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 私有的</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line"><span class="built_in">string</span> m_strGender;</span><br><span class="line"><span class="keyword">int</span> m_iScore;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">Student stu;</span><br><span class="line">stu.initScore();</span><br><span class="line">stu.setName(<span class="string">"roy"</span>);</span><br><span class="line">stu.setGender(<span class="string">"男"</span>);</span><br><span class="line">stu.study(<span class="number">30</span>);</span><br><span class="line">stu.study(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; stu.getName() &lt;&lt; <span class="string">" "</span> &lt;&lt; stu.getGender() &lt;&lt; <span class="string">""</span> &lt;&lt; stu.getScore() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类外定义"><a href="#类外定义" class="headerlink" title="类外定义"></a>类外定义</h4><p>类内定义与内联函数</p><p>1、 内联函数</p><p>关键字: <code>inline</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>内联函数与普通函数的区别</p></blockquote><ul><li><p>普通函数</p><pre><code>main() --&gt; 调用fun() --&gt; 寻找函数的入口 --&gt; 运行函数相关的代码 --&gt; 运行完以后回到fun()，然后去执行其它代码 --&gt; 结束</code></pre></li><li><p>内联函数</p></li></ul><p><strong>编译时将函数体代码和实参代替函数调用语句</strong></p><p><strong>内联函数只执行比较简单的函数，编辑器会拒绝按照内联的方式编译复杂的函数</strong></p><p>2、 类内定义</p><blockquote><p>成员函数在类的内部(里边)</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> _age)</span></span>&#123; <span class="comment">// 这三个函数就是类内定义。由于函数比较简单，编译器会自动将其编译为内联函数。</span></span><br><span class="line">age = _age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> getAge()&#123; <span class="comment">// 这三个函数就是类内定义。由于函数比较简单，编译器会自动将其编译为内联函数。</span></span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123; <span class="comment">// 这三个函数就是类内定义。由于函数比较简单，编译器会自动将其编译为内联函数。</span></span><br><span class="line"><span class="comment">// todo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、 类外定义</p><blockquote><p>成员函数在类的外部(外边)<br>类外定义分为： 同文件类外定义、分文件类外定义</p></blockquote><ul><li>同文件类外定义</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Car.cpp</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeSpeed</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">void</span> Car::run()&#123;&#125;</span><br><span class="line"><span class="keyword">void</span> Car::stop()&#123;&#125;</span><br><span class="line"><span class="keyword">void</span> Cat::changeSpeed()&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>分文件类外定义</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Car.h 头文件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeSpeed</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Car.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Car.h"</span></span></span><br><span class="line"><span class="keyword">void</span> Car::run()&#123;&#125;</span><br><span class="line"><span class="keyword">void</span> Car::stop()&#123;&#125;</span><br><span class="line"><span class="keyword">void</span> Car::changeSpeed()&#123;&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><p>1.同文件类外定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个 Teacher类， 要求分别采用同文件类外定义和分文件类外定义的方式完成，具体要求如下：</span></span><br><span class="line"><span class="comment">数据成员：</span></span><br><span class="line"><span class="comment">名字</span></span><br><span class="line"><span class="comment">年龄</span></span><br><span class="line"><span class="comment">性别</span></span><br><span class="line"><span class="comment">成员函数：</span></span><br><span class="line"><span class="comment">数据成员的封装函数</span></span><br><span class="line"><span class="comment">授课teach</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> _name)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setGender</span><span class="params">(<span class="built_in">string</span> _gender)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getGender</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> _age)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line"><span class="built_in">string</span> m_strGender;</span><br><span class="line"><span class="keyword">int</span> m_iAge;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setName(<span class="built_in">string</span> _name)&#123;</span><br><span class="line">m_strName = _name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getName()&#123;</span><br><span class="line"><span class="keyword">return</span> m_strName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setGender(<span class="built_in">string</span> _gender)&#123;</span><br><span class="line">m_strGender = _gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getGender()&#123;</span><br><span class="line"><span class="keyword">return</span> m_strGender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setAge(<span class="keyword">int</span> _age)&#123;</span><br><span class="line">m_iAge = _age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Teacher::getAge()&#123;</span><br><span class="line"><span class="keyword">return</span> m_iAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::speak()&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"現在上課……"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">Teacher t;</span><br><span class="line">t.setName(<span class="string">"孔子"</span>);</span><br><span class="line">t.setGender(<span class="string">"男"</span>);</span><br><span class="line">t.setAge(<span class="number">30</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t.getName() &lt;&lt; <span class="string">""</span> &lt;&lt; t.getAge() &lt;&lt; <span class="string">""</span> &lt;&lt; t.getGender() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">t.speak();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.分文件类外定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> _name)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setGender</span><span class="params">(<span class="built_in">string</span> _gender)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getGender</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> _age)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line"><span class="built_in">string</span> m_strGender;</span><br><span class="line"><span class="keyword">int</span> m_iAge;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// demo.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"demo.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个 Teacher类， 要求分别采用同文件类外定义和分文件类外定义的方式完成，具体要求如下：</span></span><br><span class="line"><span class="comment">数据成员：</span></span><br><span class="line"><span class="comment">名字</span></span><br><span class="line"><span class="comment">年龄</span></span><br><span class="line"><span class="comment">性别</span></span><br><span class="line"><span class="comment">成员函数：</span></span><br><span class="line"><span class="comment">数据成员的封装函数</span></span><br><span class="line"><span class="comment">授课teach</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setName(<span class="built_in">string</span> _name)&#123;</span><br><span class="line">m_strName = _name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getName()&#123;</span><br><span class="line"><span class="keyword">return</span> m_strName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setGender(<span class="built_in">string</span> _gender)&#123;</span><br><span class="line">m_strGender = _gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getGender()&#123;</span><br><span class="line"><span class="keyword">return</span> m_strGender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setAge(<span class="keyword">int</span> _age)&#123;</span><br><span class="line">m_iAge = _age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Teacher::getAge()&#123;</span><br><span class="line"><span class="keyword">return</span> m_iAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::speak()&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"現在上課……"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">Teacher t;</span><br><span class="line">t.setName(<span class="string">"孔子"</span>);</span><br><span class="line">t.setGender(<span class="string">"男"</span>);</span><br><span class="line">t.setAge(<span class="number">30</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t.getName() &lt;&lt; <span class="string">""</span> &lt;&lt; t.getAge() &lt;&lt; <span class="string">""</span> &lt;&lt; t.getGender() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">t.speak();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象结构"><a href="#对象结构" class="headerlink" title="对象结构"></a>对象结构</h3><p>内存分区</p><p><strong>栈区：</strong> <code>int x = 0; int *p = NULL;</code></p><p><strong>堆区：</strong> <code>int *p = new int[20];</code></p><p><strong>全局区： 存储全局变量及静态变量</strong></p><p><strong>常量区：</strong> <code>string str = &quot;hello&quot;;</code></p><p><strong>代码区： 存储逻辑代码的二进制</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> wheelCount;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getWheelCoutn</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> wheelCount;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对象初始化</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_iPosX;</span><br><span class="line"><span class="keyword">int</span> m_iPosY;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">m_iPosX = <span class="number">0</span>;</span><br><span class="line">m_iPosY = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">Tank t1;</span><br><span class="line">t1.init();</span><br><span class="line">Tank t2;</span><br><span class="line">t2.init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对象初始化：1.有且只有一次，2.根据条件初始化</p></blockquote><p>构造函数的规则和特点：</p><ul><li>构造函数在对象实例化时被自动调用</li><li>构造函数与类同名</li><li>构造函数没有返回值</li><li>构造函数可以有多个重载形式</li><li>实例化对象时仅用到一个构造函数</li><li>当用户没有定义构造函数时，编译器自动生成一个构造函数</li></ul><blockquote><p>无参构造函数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student()&#123; <span class="comment">// 无参构造函数的函数名与类名相同，无参构造函数没有返回值</span></span><br><span class="line">m_strName = <span class="string">"jim"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>有参构造函数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student(<span class="built_in">string</span> name)&#123; <span class="comment">// 字符串类型的name就是有参构造函数的参数</span></span><br><span class="line">m_strName = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>重载构造函数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student()&#123;</span><br><span class="line">m_strName = <span class="string">"jim"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Student(<span class="built_in">string</span> name)&#123;</span><br><span class="line">m_strName = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>构造函数代码实例</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Teacher.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Teacher类</span></span><br><span class="line"><span class="comment">自定义无参构造函数</span></span><br><span class="line"><span class="comment">自动以有参构造函数</span></span><br><span class="line"><span class="comment">数据：</span></span><br><span class="line"><span class="comment">名字</span></span><br><span class="line"><span class="comment">年龄</span></span><br><span class="line"><span class="comment">成员函数：</span></span><br><span class="line"><span class="comment">数据成员的封装函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">Teacher t1;</span><br><span class="line"><span class="function">Teacher <span class="title">t2</span><span class="params">(<span class="string">"Merry"</span>,<span class="number">15</span>)</span></span>;</span><br><span class="line"><span class="function">Teacher <span class="title">t3</span><span class="params">(<span class="string">"James"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t1.getName() &lt;&lt; <span class="string">" "</span> &lt;&lt; t1.getAge() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t2.getName() &lt;&lt; <span class="string">" "</span> &lt;&lt; t2.getAge() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t3.getName() &lt;&lt; <span class="string">" "</span> &lt;&lt; t3.getAge() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Teacher.h"</span></span></span><br><span class="line"></span><br><span class="line">Teacher::Teacher()&#123;</span><br><span class="line">m_strName = <span class="string">"jim"</span>;</span><br><span class="line">m_iAge = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Teacher::Teacher(<span class="built_in">string</span> name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">m_strName = name;</span><br><span class="line">m_iAge = age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher(string name,int age)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setName(<span class="built_in">string</span> name)&#123;</span><br><span class="line">m_strName = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getName()&#123;</span><br><span class="line"><span class="keyword">return</span> m_strName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setAge(<span class="keyword">int</span> age)&#123;</span><br><span class="line">m_iAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Teacher::getAge()&#123;</span><br><span class="line"><span class="keyword">return</span> m_iAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Teacher();</span><br><span class="line">Teacher(<span class="built_in">string</span> name,<span class="keyword">int</span> age = <span class="number">18</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> name)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line"><span class="keyword">int</span> m_iAge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>默认构造函数(实例化时不需要传递参数的函数是默认构造函数)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">Student <span class="title">stu1</span><span class="params">()</span></span>;</span><br><span class="line">Student *p = <span class="literal">NULL</span>;</span><br><span class="line">p = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student()&#123;&#125;;</span><br><span class="line"><span class="comment">// Student(string name);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>构造函数初始化列表</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student():m_strName(<span class="string">"jim"</span>),m_iAge(<span class="number">10</span>)&#123;&#125;;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line"><span class="keyword">int</span> m_iAge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>构造函数初始化列表特性</strong></p><ul><li>初始化列先于构造函数执行</li><li>初始化列表只能用于构造函数</li><li>初始化列表可以同时初始化多个数据成员</li></ul><p><strong>构造函数初始化列表的必要性</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Circle()&#123;m_dPi = 3.14&#125;;  通过构造函数的方式会报错</span></span><br><span class="line">Circle():m_dPi(<span class="number">3.14</span>)&#123;&#125; <span class="comment">// 通过初始化列表的方式才能成功</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> m_dPi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Teacher.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Teacher 类</span></span><br><span class="line"><span class="comment">自定义有参默认构造函数</span></span><br><span class="line"><span class="comment">使用初始化列表初始化数据</span></span><br><span class="line"><span class="comment">数据：</span></span><br><span class="line"><span class="comment">名字</span></span><br><span class="line"><span class="comment">年龄</span></span><br><span class="line"><span class="comment">成员函数：</span></span><br><span class="line"><span class="comment">数据成员的封装函数</span></span><br><span class="line"><span class="comment">拓展：</span></span><br><span class="line"><span class="comment">定义可以带最多学生的个数，此为常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="function">Teacher <span class="title">t1</span><span class="params">(<span class="string">"Merry"</span>,<span class="number">12</span>,<span class="number">150</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t1.getName() &lt;&lt; <span class="string">" "</span> &lt;&lt; t1.getAge() &lt;&lt; <span class="string">" "</span> &lt;&lt; t1.getMax() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Teacher.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Teacher::Teacher(<span class="built_in">string</span> name,<span class="keyword">int</span> age,<span class="keyword">int</span> m):m_strName(name),m_iAge(age),m_iMax(m)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher(string name,int age,int m)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setName(<span class="built_in">string</span> name)&#123;</span><br><span class="line">m_strName = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getName()&#123;</span><br><span class="line"><span class="keyword">return</span> m_strName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setAge(<span class="keyword">int</span> age)&#123;</span><br><span class="line">m_iAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getAge()&#123;</span><br><span class="line"><span class="keyword">return</span> m_iAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Teacher::getMax()&#123;</span><br><span class="line"><span class="keyword">return</span> m_iMax;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Teacher(<span class="built_in">string</span> name = <span class="string">"Jim"</span>,<span class="keyword">int</span> age = <span class="number">1</span>,<span class="keyword">int</span> m = <span class="number">100</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> name)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line"><span class="keyword">int</span> m_iAge;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> m_iMax;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>拷贝构造函数</strong></p><ul><li><p>如果没有自定义的拷贝构造函数则系统自动生成一个默认的拷贝构造函数</p></li><li><p>当采用直接初始化或复制初始化实例化对象时系统自动调用拷贝构造函数</p></li><li><p>拷贝构造函数不可以重载</p></li></ul><p>定义格式： 类名（const类名 &amp; 变量名）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student()&#123;</span><br><span class="line">m_strName = <span class="string">"jim"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Student(<span class="keyword">const</span> Student &amp; stu)&#123; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/blog/.io//constructor.png" alt="构造函数总结"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Teacher.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Teacher类</span></span><br><span class="line"><span class="comment">自定义拷贝构造函数</span></span><br><span class="line"><span class="comment">数据：</span></span><br><span class="line"><span class="comment">名字</span></span><br><span class="line"><span class="comment">年龄</span></span><br><span class="line"><span class="comment">成员函数：</span></span><br><span class="line"><span class="comment">数据成员的封装函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">Teacher t1;</span><br><span class="line">Teacher t2 = t1; <span class="comment">// 调用拷贝构造函数</span></span><br><span class="line"><span class="function">Teacher <span class="title">t3</span><span class="params">(t1)</span></span>; <span class="comment">// 调用拷贝构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Teacher.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Teacher.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Teacher::Teacher(<span class="built_in">string</span> name,<span class="keyword">int</span> age):m_strName(name),m_iAge(age)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher(string name,int age)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Teacher::Teacher(<span class="keyword">const</span> Teacher &amp; tea)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher(const Teacher &amp; tea)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setName(<span class="built_in">string</span> name)&#123;</span><br><span class="line">m_strName = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getName()&#123;</span><br><span class="line"><span class="keyword">return</span> m_strName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setAge(<span class="keyword">int</span> age)&#123;</span><br><span class="line">m_iAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getAge()&#123;</span><br><span class="line"><span class="keyword">return</span> m_iAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Teacher(<span class="built_in">string</span> name = <span class="string">"jim"</span>, <span class="keyword">int</span> age = <span class="number">1</span>);</span><br><span class="line">Teacher(<span class="keyword">const</span> Teacher &amp; tea)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> name)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line"><span class="keyword">int</span> m_iAge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>析构函数</strong></p><ul><li><p>如果没有自定义的析构函数则系统自动生成一个析构函数</p></li><li><p>析构函数在对象销毁时自动调用</p></li><li><p>析构函数没有返回值，没有参数也不能重载</p></li></ul><p>定义格式： <code>~类名()</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student()&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Student"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Student()&#123; <span class="comment">// 析构函数没有参数</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~Student"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student()&#123;</span><br><span class="line">m_pName = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">&#125;</span><br><span class="line">~Student()&#123; <span class="comment">// 析构函数的唯一作用就是释放资源</span></span><br><span class="line"><span class="keyword">delete</span> []m_pName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> *m_pName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象的生命历程</p><pre><code>申请内存 --&gt; 初始化列表 --&gt; 构造函数    ↑                        |    ↓                        ↓释放内存 &lt;-- 析构函数 &lt;--- 参与运算</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Teacher.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Teacher类</span></span><br><span class="line"><span class="comment">1. 自定义析构函数</span></span><br><span class="line"><span class="comment">2. 普通方式实例化的对象，在销毁对象时是否自动调用析构函数</span></span><br><span class="line"><span class="comment">3. 通过拷贝析构函数实例化独享，在销毁对象是 是否调用析构函数</span></span><br><span class="line"><span class="comment">数据：</span></span><br><span class="line"><span class="comment">名字</span></span><br><span class="line"><span class="comment">年龄</span></span><br><span class="line"><span class="comment">成员函数：</span></span><br><span class="line"><span class="comment">数据成员的封装函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">Teacher t1; <span class="comment">// 栈</span></span><br><span class="line">Teacher *p = <span class="keyword">new</span> Teacher();<span class="comment">// 堆</span></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line"><span class="function">Teacher <span class="title">t2</span><span class="params">(t1)</span></span>; <span class="comment">// 拷贝构造函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Teacher.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Teacher::Teacher(<span class="built_in">string</span> name,<span class="keyword">int</span> age):m_strName(name),m_iAge(age)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher(string name,int age)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Teacher::Teacher(<span class="keyword">const</span> Teacher &amp; tea)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher(const Teacher &amp; tea)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Teacher::~Teacher()&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~Teacher()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Teacher::setName(<span class="built_in">string</span> name)&#123;</span><br><span class="line">m_strName = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getName()&#123;</span><br><span class="line"><span class="keyword">return</span> m_strName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setAge(<span class="keyword">int</span> age)&#123;</span><br><span class="line">m_iAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getAge()&#123;</span><br><span class="line"><span class="keyword">return</span> m_iAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Teacher(<span class="built_in">string</span> name = <span class="string">"jim"</span>, <span class="keyword">int</span> age = <span class="number">1</span>);</span><br><span class="line">Teacher(<span class="keyword">const</span> Teacher &amp; tea);</span><br><span class="line">~Teacher();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> name)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line"><span class="keyword">int</span> m_iAge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="4-inherit.md">C++ 远征之继承篇</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-远征之封装篇&quot;&gt;&lt;a href=&quot;#C-远征之封装篇&quot; class=&quot;headerlink&quot; title=&quot;C++ 远征之封装篇&quot;&gt;&lt;/a&gt;C++ 远征之封装篇&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;README.md&quot;&gt;目录&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;构造函数&amp;amp
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/jade/README/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/jade/README/</id>
    <published>2019-06-12T07:21:24.975Z</published>
    <updated>2019-06-12T07:21:24.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jade随记"><a href="#jade随记" class="headerlink" title="jade随记"></a>jade随记</h1><h3 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h3><pre><code>extends layout                    ---- 相当于src进来一个页面include note.txt                 ---- include同于导入文本include ./layout/header.jade     ---- 将header.jade当做html引入 block content                     ---- block获取block下边的内容，content可以在别的文件引用  h1   p   p</code></pre><p><strong>可重用的 jade 块 (Mixins)</strong></p><pre><code>//- 也可以给这个重用块指定参数    mixin pets(pets)      ul.pets        - each pet in pets          li= pet    +pets([&apos;cat&apos;, &apos;dog&apos;, &apos;pig&apos;])//- Mixins 同时也支持在外部传入 jade 块    mixin article(title)      .article        .article-wrapper          h1= title          //- block 为 jade 关键字代表外部传入的块          if block            block          else            p 该文章没有内容    +article(&apos;Hello world&apos;)    +article(&apos;Hello Jade&apos;)      p 这里是外部传入的块      p 再写两句//- Mixins 同时也可以从外部获取属性。    mixin link(href, name)      a(class!=attributes.class, href=href)= name    +link(&apos;/foo&apos;, &apos;foo&apos;)(class=&quot;btn&quot;)//- 申明可重用的块    mixin list      ul        li foo        li bar        li baz    //- 调用    +list()    +list()</code></pre><p><strong>jade内写js</strong></p><pre><code>- console.log(&apos;hello&apos;);         ---- 这段代码在服务端执行- var s = &apos;hello world&apos;         ---- 在服务端空间中定义变量- if 参数                        ---- if判断- var user = { description: &apos;foo bar baz&apos; }- var authorised = false#user  if user.description    h2 Description    p.description= user.description  else if authorised    h2 Description    p.description.      User has no description,      why not add one...  else    h1 Description    p.description User has no description- for (var i = 0; i &lt; array.length; ++i) {    li hello #{array[i]}         ---- for循环  - }  each val, index in [&apos;西瓜&apos;, &apos;苹果&apos;, &apos;梨子&apos;]     ---- each遍历    li= index + &apos;: &apos; + val- var friends = 1                case friends                    ---- 相当于 switch case default  when 0: p you have no friends  when 1: p you have a friend  default: p you have #{friends} friendsscript  :coffee    console.log &apos;这里是 coffee script&apos;</code></pre><p><strong>jade内写md</strong></p><pre><code>:markdown  # Markdown 标题     这里使用的是 MarkDown 格式</code></pre><p><strong>bug记录</strong></p><pre><code>jade模板的最后一行如果有空行也会报 缩进错误用extends继承的话，被继承的页面有数据，继承的页面拿不到数据，用include包含就正常。但是在资源方面，用extends，资源位置正常，但是也不会继承数据，用include包含的话，缩进对的，资源位置就变了 </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;jade随记&quot;&gt;&lt;a href=&quot;#jade随记&quot; class=&quot;headerlink&quot; title=&quot;jade随记&quot;&gt;&lt;/a&gt;jade随记&lt;/h1&gt;&lt;h3 id=&quot;参数：&quot;&gt;&lt;a href=&quot;#参数：&quot; class=&quot;headerlink&quot; title=&quot;参数：
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/git-bash-make/README/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/git-bash-make/README/</id>
    <published>2019-06-12T07:21:24.913Z</published>
    <updated>2019-06-12T07:21:24.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="—————–下面是使用git的一些心得笔记-———"><a href="#—————–下面是使用git的一些心得笔记-———" class="headerlink" title="—————–下面是使用git的一些心得笔记 ———-"></a>—————–下面是使用git的一些心得笔记 ———-</h1><p><del>能成功上传全依赖于<a href="http://www.cnblogs.com/schaepher/p/5561193.html#six" target="_blank" rel="noopener">http://www.cnblogs.com/schaepher/p/5561193.html#six</a></del></p><h3 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h3><p><img src="/blog/.io//git-Common-commands.jpg" alt></p><h3 id="使用git-diff查看各个区之间的差异"><a href="#使用git-diff查看各个区之间的差异" class="headerlink" title="使用git diff查看各个区之间的差异"></a>使用git diff查看各个区之间的差异</h3><blockquote><p>git diff 和 git diff –-cached容易混淆</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff                        # 比较的是工作区和暂存区的差别</span><br><span class="line">git diff –-cached               # 比较的是暂存区和版本库的差别</span><br><span class="line">git diff HEAD                   # 可以查看工作区和版本库的差别</span><br></pre></td></tr></table></figure><blockquote><p>每次commit后,git diff –-cached没有内容，是因为暂存区的内容已经更新到版本库中，因此暂存区和版本库中的内容无差别</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached "文件路径"      # 不删除物理文件，仅将该文件从缓存中删除；</span><br><span class="line">git rm --cached "文件名"        # 可以从缓存区移除文件，使该文件变为未跟踪的状态，</span><br><span class="line">git checkout –- &lt;file&gt;          # 命令时，会用暂存区全部或指定的文件替换工作区的文件。</span><br><span class="line">git ls-files                    # 查看缓冲区内有哪些文件</span><br><span class="line">git rm -r --cached .            # 删除缓存区</span><br></pre></td></tr></table></figure><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEADE~1    # 回滚到上一版本</span><br><span class="line">git reset --hard commit_id(版本号，版本ID，commit_id)      # 回滚到某个版本</span><br><span class="line">git reflog # 查看命令历史的commit_id,可以获取回退之前的commit_id,</span><br><span class="line">git reflog# 记录这个仓库中所有的分支的所有更新记录，包括已经撤销的更新.</span><br><span class="line"></span><br><span class="line">HEAD        # 表示当前版本</span><br><span class="line">HEAD^       # 是上一个版本</span><br><span class="line">HEAD^       # ^是上上一个版本</span><br><span class="line">HEAD~100    # 100表示100个版本,100个版本写100个^比较容易数不过来。</span><br></pre></td></tr></table></figure><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD^     # 删除到HEAD^的commit，(仅commit删除，文件未变化)</span><br><span class="line">git commit --amend         # 修改最近一次的commit内容(git push过的不能修改)</span><br><span class="line">git rebase -i HEAD~3       # 修改倒数第几次的git commit</span><br><span class="line">git rebase -i commit_id(版本号，版本ID，commit_id)    # 可以修改或删除某个commit</span><br><span class="line">git rebase --continue      # 如果修改错了要返回原来的git commit，可以使用这个命令</span><br></pre></td></tr></table></figure><p>修改commit massage</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1. $ git rebase -i commit_id(版本号，版本ID，commit_id)    # 可以修改或删除某个commit</span><br><span class="line"></span><br><span class="line">2. 显示结果如下，修改 pick 为 edit ，并 :wq 保存退出</span><br><span class="line">    pick 92b495b 2009-08-08: ×××××××</span><br><span class="line"></span><br><span class="line">    # Rebase 9ef2b1f..92b495b onto 9ef2b1f</span><br><span class="line">    #</span><br><span class="line">    # Commands:</span><br><span class="line">    #  pick = use commit</span><br><span class="line">    #  edit = use commit, but stop for amending //改上面的 pick 为 edit</span><br><span class="line">    #  squash = use commit, but meld into previous commit</span><br><span class="line">    #</span><br><span class="line">    # If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line">    # However, if you remove everything, the rebase will be aborted.</span><br><span class="line"></span><br><span class="line">3. 命令行显示：</span><br><span class="line"></span><br><span class="line">    Stopped at e35b8f3… reflog branch first commit</span><br><span class="line">    You can amend the commit now, with</span><br><span class="line">    git commit –amend</span><br><span class="line">    Once you are satisfied with your changes, run</span><br><span class="line">    git rebase –continue</span><br><span class="line"></span><br><span class="line">4. 修改需要修改的地方（只是修改commit message就不用做)</span><br><span class="line"></span><br><span class="line">    git add . #这一步如果只是修改commit message不用输入</span><br><span class="line">    git commit --amend</span><br><span class="line">    #输入修改后的commit message，保存</span><br><span class="line"></span><br><span class="line">5. $ git rebase –continue   # 使用 git rebase –continue 完成操作</span><br><span class="line"></span><br><span class="line">6. 推送到远端（若还没有推送到远端，不用处理）</span><br><span class="line">    $ git push &lt;remote&gt; &lt;branch&gt; -f   # 加-f 表示忽略冲突（强推）</span><br></pre></td></tr></table></figure><h4 id="上传本地文件夹到远程仓库"><a href="#上传本地文件夹到远程仓库" class="headerlink" title="上传本地文件夹到远程仓库"></a>上传本地文件夹到远程仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. git init     # 本地项目根目录下执行这个命令</span><br><span class="line">2. git add .    # 将项目的所有文件添加到仓库中</span><br><span class="line">3. git commit -m "注释语句"</span><br><span class="line">4. git remote add origin git@github.com:roy-lau/python.git     # 将本地的仓库关联到github上</span><br><span class="line">5. git pull origin master       # 上传github之前，要先pull一下</span><br><span class="line">6. git push -u origin master    # 上传代码到github远程仓库</span><br></pre></td></tr></table></figure><h3 id="分支类（master）"><a href="#分支类（master）" class="headerlink" title="分支类（master）"></a>分支类（master）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git log --graph                 # 查看分支图</span><br><span class="line">git branch                      # 查看分支</span><br><span class="line">git branch -r                   # 查看所有远程分支</span><br><span class="line">git branch  BranchName          # 创建分支</span><br><span class="line">git checkout  BranchName        # 切换分支</span><br><span class="line">git checkout -b  BranchName     # 创建+切换分支</span><br><span class="line">git merge  BranchName           # 合并某分支到当前分支</span><br><span class="line">git branch -D  BranchName       # 删除本地分支</span><br><span class="line">git pull origin  remoteBranchName:localBranchName # 获取远程分支</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支(推送一个空分支到远程分支,就相当于删除了远程分支)</span></span><br><span class="line">git push origin :branchName</span><br><span class="line">git push -d origin branchName</span><br><span class="line"></span><br><span class="line">git branch -m oldBranchName newBranchName   # 修改branch名</span><br></pre></td></tr></table></figure><h4 id="git-快速clone"><a href="#git-快速clone" class="headerlink" title="git 快速clone"></a>git 快速clone</h4><blockquote><p>1、 开始 <code>clone</code>，如果觉得仓库太大，可以在 <code>git clone</code> 中加入参数 <code>--depth=1</code>，只拉取最近的一个 <code>revision</code>。</p></blockquote><pre><code>git clone  git@github.com:roy-lau/web_project.git --depth=1     # 设置克隆的深度(两个参数可以连起来)git clone  git@github.com:roy-lau/web_project.git -b dev        # 设置克隆的分支(两个参数可以连起来)</code></pre><blockquote><p>2、 如果后面想看历史的版本，那么也很好办，使用 git fetch 即可。</p></blockquote><pre><code>git fetch --unshallow               # 获取除当前分支的所有历史版本</code></pre><blockquote><p>3、拉取远程分支到本地分支</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin  remoteBranchName:localBranchName</span><br><span class="line"><span class="comment"># 如果remoteBranchName和localBranchName冲突,手动merge,可以设置深度--depth=1</span></span><br><span class="line">git pull origin  remoteBranchName:localBranchName</span><br><span class="line"><span class="comment"># 如果remoteBranchName和localBranchName冲突,自动merge,可以设置深度--depth=1</span></span><br></pre></td></tr></table></figure><blockquote><p>注： BranchName:分支名 localBranchName:本地分支名  remoteBranchName: 远程分支名</p></blockquote><h3 id="标签（tag）"><a href="#标签（tag）" class="headerlink" title="标签（tag）"></a>标签（tag）</h3><ul><li><p>创建标签</p><ul><li>git tag -a <code>tagName</code> -m “注释”        # 创建附注标签(常用)</li><li>git tag  tagName-light                  # 创建轻量标签</li></ul></li><li><p>上传标签</p><ul><li>git push origin tag <code>tagName</code>          # 将 tagName 标签提交到git服务器</li><li>git push origin -–tags                 # 将本地所有标签一次性提交到git服务器</li></ul></li><li><p>git tag                                   # 查看当前分支下的标签</p></li><li>git tag -d  <code>tagName</code>                     # 删除本地标签</li><li>git push origin <code>:refs/tags/tagName</code>      # 删除远程标签</li><li>git checkout <code>tagName</code>                     # 切换标签</li><li>git tag -m oldTagName <code>newTagName</code>        # 修改tag名</li><li>git fetch origin tag <code>tagName</code>             # 获取远程tag</li></ul><h3 id="远程主机（origin）"><a href="#远程主机（origin）" class="headerlink" title="远程主机（origin）"></a>远程主机（origin）</h3><ol><li><p>为了便于管理，git要求每个远程主机都必须指定一个主机名。不带选项的时候，<code>git remote</code>命令会列出所有远程主机。</p><pre><code>$ git remoteorigin</code></pre></li><li><p>使用<code>-v</code>选项可以查看远程主机的网址</p><pre><code>$ git remote -vorigin git@github.com:roy-lau/python.git(fetch)origin git@github.com:roy-lau/python.git(push)</code></pre></li><li><p>克隆的时候，所使用的远程主机自动被git命名为origin。如果想使用其他主机名，需要用<code>git clone</code>命令的<code>-o</code>选项指定。</p><pre><code>$ git clone -o roy-lau https://github.com/roy-lau/python.git$ git remote roy-lau</code></pre><p> 上面命令表示，克隆的时候，指定远程主机叫<strong>roy-lau</strong></p></li><li><p><code>git remote show &lt;主机名&gt;</code> 可以查看该主机的详细信息。</p></li><li><code>git remote add &lt;主机名&gt;&lt;网址&gt;</code>  添加远程主机。</li><li><code>git remote rm &lt;主机名&gt;</code> 删除远程主机</li><li><code>git remote rename &lt;源主机名&gt; &lt;新主机名&gt;</code> 更改远程主机名。<br>End. <code>git push -u &lt;主机名&gt; &lt;分支名&gt;</code></li></ol><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><ol><li><code>git config -l</code>                            查看git配置</li><li><code>git config -e</code>                            vim下修改配置</li><li><code>git config -–add user.name=roy-lau</code>       添加一个配置项命令参数</li><li><code>git config --get user.name</code>               获取一个配置项命令参数</li><li><code>git congig --unset user.name=roy-lau</code>     删除一个配置项命令参数</li></ol><ul><li><p><code>git add</code> 的时候，中文会显示成<code>\344\270\255\346\226\207.txt</code>，使用如下命令进行配置：</p><pre><code>git config --global core.quotepath false</code></pre></li><li><p>Git使用https方式进行连接时，默认每次推送时都要输入用户名和密码。进行如下设置后，只要在推送一次，以后就不需要用户名和密码了</p><pre><code>git config credential.helper store</code></pre></li><li><p>设置 <code>git lg</code> （设置个命令后，使用<strong><em>git lg</em></strong>命令可以查看分支日志等！）</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.lg <span class="string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span></span><br></pre></td></tr></table></figure><ul><li>设置git可提交最大bit</li></ul><blockquote><p>问题原因是<code>http.postBuffer</code>默认上限为<code>1M</code>所致。在git的配置里将<code>http.postBuffer</code>变量改大一些即可，比如将上限设为<code>500M</code></p></blockquote><pre><code>git config --global http.postBuffer 524288000git sparse clone 路径  可以克隆git仓库下的某个目录</code></pre><ul><li>设置github大文件提交(超过50M)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git lfs install     <span class="comment"># 开启`lfs`功能（只需运行一次）</span></span><br><span class="line">git lfs track <span class="string">"*.psd"</span> <span class="comment">#命令进行大文件追踪 例如 `git lfs track "*.psd"` 追踪所有后缀为 `psd`的文件</span></span><br><span class="line">git lfs track       <span class="comment"># 查看现有的文件追踪模式</span></span><br><span class="line">git add .gitattributes <span class="comment"># 提交代码需要将`gitattributes`文件提交至仓库`.` 它保存了文件的追踪记录</span></span><br><span class="line">git lfs ls-files    <span class="comment"># 可以显示当前跟踪的文件列表（查看当前有哪些文件是使用lfs管理的）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常只需如下步骤即可</span></span><br><span class="line">git lfs install</span><br><span class="line">git lfs track <span class="string">"*.psd"</span></span><br><span class="line">git add .gitattributes</span><br><span class="line">git add file.psd</span><br><span class="line">git commit -m <span class="string">"Add design file"</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><em>将代码 <code>push</code> 到远程仓库后，<code>LFS</code> 跟踪的文件会以<code>Git LFS</code>的形式显示:<br><code>clone</code> 时 使用<code>git clone</code> 或 <code>git lfs clone</code> 均可</em></p><h3 id="github的SSH配置如下："><a href="#github的SSH配置如下：" class="headerlink" title="github的SSH配置如下："></a>github的SSH配置如下：</h3><p><strong>1. 设置Git的user name和email：</strong></p><pre><code>$ git config --global user.name &quot;roy-lau&quot;$ git config --global user.email &quot;roylau_vip@163.com&quot;</code></pre><p><strong>2. 生成SSH密钥过程：</strong></p><ol><li><p>查看是否已经有了ssh密钥：</p><pre><code>cd ~/.ssh</code></pre><blockquote><p>如果没有密钥则不会有此文件夹，有则备份删除</p></blockquote></li><li><p>保存密钥：</p><pre><code>$ ssh-keygen -t rsa -C  &quot;roylau_vip@163.com&quot;</code></pre><p> 按3个回车，密码为空。</p><p> Your identification has been saved in /home/tekkub/.ssh/id_rsa.<br> Your public key has been saved in /home/tekkub/.ssh/id_rsa.pub.<br> The key fingerprint is:<br> ………………</p><blockquote><p>最后得到了两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code></p></blockquote></li><li><p>添加密钥</p><pre><code>ssh：ssh-add 文件名   # 需要之前输入密码。</code></pre></li><li><p>在github上添加ssh密钥，这要添加的是<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    打开https://github.com/ ，登陆roy-lau，然后添加ssh。</span><br><span class="line"></span><br><span class="line">5. 测试：</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">    $ ssh -T git@github.com</span><br><span class="line">    Hi roy-lau! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></p></li></ol><h3 id="git私服搭建"><a href="#git私服搭建" class="headerlink" title="git私服搭建"></a>git私服搭建</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>git如何搭建私服<a href="git-server-build.md">点击查看</a></strong></p><h3 id="bug记录！"><a href="#bug记录！" class="headerlink" title="bug记录！"></a>bug记录！</h3><ul><li>bug1：<code>工作区和暂存区和远程仓库不同。但是，git push 【Everything up-to-date】</code></li></ul><blockquote><p>解决步骤如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1. Administrator@liuroy-lau MINGW32 /d/git_rpo/README (master)</span><br><span class="line">    $ git add -A                                <span class="comment"># 重点在这里，以前都是用git add .或git add --all</span></span><br><span class="line"></span><br><span class="line">2. Administrator@liuroy-lau MINGW32 /d/git_rpo/README (master)</span><br><span class="line">    $ git commit -m <span class="string">"error"</span></span><br><span class="line">    [master ef2b048] error</span><br><span class="line">     3 files changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line">     create mode 100644 git.png</span><br><span class="line">     create mode 100644 git_help.png</span><br><span class="line">     create mode 100644 <span class="string">"git\351\200\237\347\216\207.png"</span></span><br><span class="line"></span><br><span class="line">3. Administrator@liuroy-lau MINGW32 /d/git_rpo/README (master)</span><br><span class="line">    $ git push -u origin master</span><br><span class="line">    Counting objects: 5, <span class="keyword">done</span>.</span><br><span class="line">    Delta compression using up to 4 threads.</span><br><span class="line">    Compressing objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">    Writing objects: 100% (5/5), 680.94 KiB | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">    Total 5 (delta 0), reused 0 (delta 0)</span><br><span class="line">    To git@github.com:roy-lau/README.git</span><br><span class="line">       792f815..ef2b048  master -&gt; master</span><br></pre></td></tr></table></figure><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><ol><li><code>git add -A</code>   保存所有的修改</li><li><code>git add .</code>    保存新的添加和修改，但是不包括删除</li><li><code>git add -u</code>   保存修改和删除，但是不包括新建文件。</li><li>工作的时候经常需要在各个目录之间跳转，可以通过环境变量对目录进行缩写，方便地在多个目录直接切换。</li></ol><p>在 <strong>~/.bashrc</strong>添加：</p><pre><code>export wd=&quot;/d/Projects/MyProject/git&quot;export doc=&quot;/d/Projects/documents/&quot;</code></pre><p>以后只需要用 <code>cd $wd, cd $doc</code> 即可进入对应目录。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;—————–下面是使用git的一些心得笔记-———&quot;&gt;&lt;a href=&quot;#—————–下面是使用git的一些心得笔记-———&quot; class=&quot;headerlink&quot; title=&quot;—————–下面是使用git的一些心得笔记 ———-&quot;&gt;&lt;/a&gt;—————–下面是使
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/git-bash-make/git-server-build/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/git-bash-make/git-server-build/</id>
    <published>2019-06-12T07:21:24.913Z</published>
    <updated>2019-06-12T07:21:24.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-搭建私服"><a href="#git-搭建私服" class="headerlink" title="git 搭建私服"></a>git 搭建私服</h1><p> Centos 下搭建 Git 服务器。</p><p> 1、安装Git</p><p><a href="../Linux/install/git.md">点此查看git 在Centos下的安装方法</a></p><p> 2、创建用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> groupadd git          # 创建一个用户组</span><br><span class="line"><span class="meta">$</span> adduser git -g git    # 将git用户添加到git用户组</span><br><span class="line"><span class="meta">$</span> su git                # 切换到git用户</span><br></pre></td></tr></table></figure><p>3、创建证书登录</p><blockquote><p>收集所有需要登录的用户的公钥，公钥位于id_rsa.pub文件中，把我们的公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。</p></blockquote><p>如果没有该文件创建它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /home/git/</span><br><span class="line"><span class="meta">$</span> mkdir .ssh</span><br><span class="line"><span class="meta">$</span> chmod 700 .ssh</span><br><span class="line"><span class="meta">$</span> touch .ssh/authorized_keys# 这个文件是用来存放用户的 公钥 的，一行一个</span><br><span class="line"><span class="meta">$</span> chmod 600 .ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>4、初始化Git仓库</p><p>首先我们选定一个目录作为Git仓库，假定是/home/gitrepo/javaScript.git，在/home/gitrepo目录下输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /home</span><br><span class="line"><span class="meta">$</span> mkdir gitrepo</span><br><span class="line"><span class="meta">$</span> chown git:git gitrepo/</span><br><span class="line"><span class="meta">$</span> cd gitrepo</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> git init --bare javaScript.git</span><br><span class="line">Initialized empty Git repository in /home/gitrepo/javaScript.git/</span><br></pre></td></tr></table></figure><blockquote><p>以上命令Git创建一个空仓库，服务器上的Git仓库通常都以.git结尾。然后，把仓库所属用户改为git：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> chown -R git:git javaScript.git</span><br></pre></td></tr></table></figure><p>5、克隆仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone git@192.168.45.4:/home/gitrepo/javaScript.git</span><br><span class="line">Cloning into 'javaScript'...</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure><p>192.168.45.4 为 Git 所在服务器 ip ，你需要将其修改为你自己的 Git 服务 ip。</p><p>这样我们的 Git 服务器安装就完成了，接下来我们可以禁用 git 用户通过shell登录，可以通过编辑/etc/passwd文件完成。找到类似下面的一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:503:503::/home/git:/bin/bash</span><br></pre></td></tr></table></figure><p>改为：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:503:503::/home/git:/sbin/nologin</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-搭建私服&quot;&gt;&lt;a href=&quot;#git-搭建私服&quot; class=&quot;headerlink&quot; title=&quot;git 搭建私服&quot;&gt;&lt;/a&gt;git 搭建私服&lt;/h1&gt;&lt;p&gt; Centos 下搭建 Git 服务器。&lt;/p&gt;
&lt;p&gt; 1、安装Git&lt;/p&gt;
&lt;p&gt;&lt;a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/emoji/README/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/emoji/README/</id>
    <published>2019-06-12T07:21:24.913Z</published>
    <updated>2019-06-12T07:21:24.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Emoji表情"><a href="#Emoji表情" class="headerlink" title="Emoji表情"></a><a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">Emoji表情</a></h1><p>鼠标悬停在表情上，即可显示emoji表情的符号码,将对应符号码输入你的markdown文本即可显示emoji表情。如<code>:blush:</code>，显示:blush:</p><h2 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h2><p> :bowtie: <code>:bowtie:</code><br> :smile: <code>:smile:</code><br> :laughing: <code>:laughing:</code><br> :blush: <code>:blush:</code><br> :smiley: <code>:smiley:</code><br> :relaxed: <code>:relaxed:</code><br> :smirk: <code>:smirk:</code><br> :heart_eyes: <code>:heart_eyes:</code><br> :kissing_heart: <code>:kissing_heart:</code><br> :kissing_closed_eyes: <code>:kissing_closed_eyes:</code><br> :flushed: <code>:flushed:</code><br> :relieved: <code>:relieved:</code><br> :satisfied: <code>:satisfied:</code><br> :grin: <code>:grin:</code><br> :wink: <code>:wink:</code><br> :stuck_out_tongue_winking_eye: <code>:stuck_out_tongue_winking_eye:</code><br> :stuck_out_tongue_closed_eyes: <code>:stuck_out_tongue_closed_eyes:</code><br> :grinning: <code>:grinning:</code><br> :kissing: <code>:kissing:</code><br> :kissing_smiling_eyes: <code>:kissing_smiling_eyes:</code><br> :stuck_out_tongue: <code>:stuck_out_tongue:</code><br> :sleeping: <code>:sleeping:</code><br> :worried: <code>:worried:</code><br> :frowning: <code>:frowning:</code><br> :anguished: <code>:anguished:</code><br> :open_mouth: <code>:open_mouth:</code><br> :grimacing: <code>:grimacing:</code><br> :confused: <code>:confused:</code><br> :hushed: <code>:hushed:</code><br> :expressionless: <code>:expressionless:</code><br> :unamused: <code>:unamused:</code><br> :sweat_smile: <code>:sweat_smile:</code><br> :sweat: <code>:sweat:</code><br> :disappointed_relieved: <code>:disappointed_relieved:</code><br> :weary: <code>:weary:</code><br> :pensive: <code>:pensive:</code><br> :confounded: <code>:confounded:</code><br> :disappointed: <code>:disappointed:</code><br> :fearful: <code>:fearful:</code><br> :cold_sweat: <code>:cold_sweat:</code><br> :persevere: <code>:persevere:</code><br> :cry: <code>:cry:</code><br> :sob: <code>:sob:</code><br> :joy: <code>:joy:</code><br> :astonished: <code>:astonished:</code><br> :scream: <code>:scream:</code><br> :neckbeard: <code>:neckbeard:</code><br> :tired_face: <code>:tired_face:</code><br> :angry: <code>:angry:</code><br> :rage: <code>:rage:</code><br> :triumph: <code>:triumph:</code><br> :sleepy: <code>:sleepy:</code><br> :yum: <code>:yum:</code><br> :mask: <code>:mask:</code><br> :sunglasses: <code>:sunglasses:</code><br> :dizzy_face: <code>:dizzy_face:</code><br> :imp: <code>:imp:</code><br> :smiling_imp: <code>:smiling_imp:</code><br> :neutral_face: <code>:neutral_face:</code><br> :no_mouth: <code>:no_mouth:</code><br> :innocent: <code>:innocent:</code><br> :alien: <code>:alien:</code><br> :yellow_heart: <code>:yellow_heart:</code><br> :blue_heart: <code>:blue_heart:</code><br> :purple_heart: <code>:purple_heart:</code><br> :heart: <code>:heart:</code><br> :green_heart: <code>:green_heart:</code><br> :broken_heart: <code>:broken_heart:</code><br> :heartbeat: <code>:heartbeat:</code><br> :heartpulse: <code>:heartpulse:</code><br> :two_hearts: <code>:two_hearts:</code><br> :revolving_hearts: <code>:revolving_hearts:</code><br> :cupid: <code>:cupid:</code><br> :sparkling_heart: <code>:sparkling_heart:</code><br> :sparkles: <code>:sparkles:</code><br> :star: <code>:star:</code><br> :star2: <code>:star2:</code><br> :dizzy: <code>:dizzy:</code><br> :boom: <code>:boom:</code><br> :collision: <code>:collision:</code><br> :anger: <code>:anger:</code><br> :exclamation: <code>:exclamation:</code><br> :question: <code>:question:</code><br> :grey_exclamation: <code>:grey_exclamation:</code><br> :grey_question: <code>:grey_question:</code><br> :zzz: <code>:zzz:</code><br> :dash: <code>:dash:</code><br> :sweat_drops: <code>:sweat_drops:</code><br> :notes: <code>:notes:</code><br> :musical_note: <code>:musical_note:</code><br> :fire: <code>:fire:</code><br> :hankey: <code>:hankey:</code><br> :poop: <code>:poop:</code><br> :shit: <code>:shit:</code><br> :+1:<code>+:1:</code><br> :thumbsup: <code>:thumbsup:</code><br> :-1:<code>-:1:</code><br> :thumbsdown: <code>:thumbsdown:</code><br> :ok_hand: <code>:ok_hand:</code><br> :punch: <code>:punch:</code><br> :facepunch: <code>:facepunch:</code><br> :fist: <code>:fist:</code><br> :v: <code>:v:</code><br> :wave: <code>:wave:</code><br> :hand: <code>:hand:</code><br> :raised_hand: <code>:raised_hand:</code><br> :open_hands: <code>:open_hands:</code><br> :point_up: <code>:point_up:</code><br> :point_down: <code>:point_down:</code><br> :point_left: <code>:point_left:</code><br> :point_right: <code>:point_right:</code><br> :raised_hands: <code>:raised_hands:</code><br> :pray: <code>:pray:</code><br> :point_up_2: <code>:point_up_2:</code><br> :clap: <code>:clap:</code><br> :muscle: <code>:muscle:</code><br> :metal: <code>:metal:</code><br> :fu: <code>:fu:</code><br> :walking: <code>:walking:</code><br> :runner: <code>:runner:</code><br> :running: <code>:running:</code><br> :couple: <code>:couple:</code><br> :family: <code>:family:</code><br> :two_men_holding_hands: <code>:two_men_holding_hands:</code><br> :two_women_holding_hands: <code>:two_women_holding_hands:</code><br> :dancer: <code>:dancer:</code><br> :dancers: <code>:dancers:</code><br> :ok_woman: <code>:ok_woman:</code><br> :no_good: <code>:no_good:</code><br> :information_desk_person: <code>:information_desk_person:</code><br> :raising_hand: <code>:raising_hand:</code><br> :bride_with_veil: <code>:bride_with_veil:</code><br> :person_with_pouting_face: <code>:person_with_pouting_face:</code><br> :person_frowning: <code>:person_frowning:</code><br> :bow: <code>:bow:</code><br> :couplekiss: <code>:couplekiss:</code><br> :couple_with_heart: <code>:couple_with_heart:</code><br> :massage: <code>:massage:</code><br> :haircut: <code>:haircut:</code><br> :nail_care: <code>:nail_care:</code><br> :boy: <code>:boy:</code><br> :girl: <code>:girl:</code><br> :woman: <code>:woman:</code><br> :man: <code>:man:</code><br> :baby: <code>:baby:</code><br> :older_woman: <code>:older_woman:</code><br> :older_man: <code>:older_man:</code><br> :person_with_blond_hair: <code>:person_with_blond_hair:</code><br> :man_with_gua_pi_mao: <code>:man_with_gua_pi_mao:</code><br> :man_with_turban: <code>:man_with_turban:</code><br> :construction_worker: <code>:construction_worker:</code><br> :cop: <code>:cop:</code><br> :angel: <code>:angel:</code><br> :princess: <code>:princess:</code><br> :smiley_cat: <code>:smiley_cat:</code><br> :smile_cat: <code>:smile_cat:</code><br> :heart_eyes_cat: <code>:heart_eyes_cat:</code><br> :kissing_cat: <code>:kissing_cat:</code><br> :smirk_cat: <code>:smirk_cat:</code><br> :scream_cat: <code>:scream_cat:</code><br> :crying_cat_face: <code>:crying_cat_face:</code><br> :joy_cat: <code>:joy_cat:</code><br> :pouting_cat: <code>:pouting_cat:</code><br> :japanese_ogre: <code>:japanese_ogre:</code><br> :japanese_goblin: <code>:japanese_goblin:</code><br> :see_no_evil: <code>:see_no_evil:</code><br> :hear_no_evil: <code>:hear_no_evil:</code><br> :speak_no_evil: <code>:speak_no_evil:</code><br> :guardsman: <code>:guardsman:</code><br> :skull: <code>:skull:</code><br> :feet: <code>:feet:</code><br> :lips: <code>:lips:</code><br> :kiss: <code>:kiss:</code><br> :droplet: <code>:droplet:</code><br> :ear: <code>:ear:</code><br> :eyes: <code>:eyes:</code><br> :nose: <code>:nose:</code><br> :tongue: <code>:tongue:</code><br> :love_letter: <code>:love_letter:</code><br> :bust_in_silhouette: <code>:bust_in_silhouette:</code><br> :busts_in_silhouette: <code>:busts_in_silhouette:</code><br> :speech_balloon: <code>:speech_balloon:</code><br> :thought_balloon: <code>:thought_balloon:</code><br> :feelsgood: <code>:feelsgood:</code><br> :finnadie: <code>:finnadie:</code><br> :goberserk: <code>:goberserk:</code><br> :godmode: <code>:godmode:</code><br> :hurtrealbad: <code>:hurtrealbad:</code><br> :rage1: <code>:rage1:</code><br> :rage2: <code>:rage2:</code><br> :rage3: <code>:rage3:</code><br> :rage4: <code>:rage4:</code><br> :suspect: <code>:suspect:</code><br> :trollface: <code>:trollface:</code></p><h2 id="自然"><a href="#自然" class="headerlink" title="自然"></a>自然</h2><p> :sunny: <code>:sunny:</code><br> :umbrella: <code>:umbrella:</code><br> :cloud: <code>:cloud:</code><br> :snowflake: <code>:snowflake:</code><br> :snowman: <code>:snowman:</code><br> :zap: <code>:zap:</code><br> :cyclone: <code>:cyclone:</code><br> :foggy: <code>:foggy:</code><br> :ocean: <code>:ocean:</code><br> :cat: <code>:cat:</code><br> :dog: <code>:dog:</code><br> :mouse: <code>:mouse:</code><br> :hamster: <code>:hamster:</code><br> :rabbit: <code>:rabbit:</code><br> :wolf: <code>:wolf:</code><br> :frog: <code>:frog:</code><br> :tiger: <code>:tiger:</code><br> :koala: <code>:koala:</code><br> :bear: <code>:bear:</code><br> :pig: <code>:pig:</code><br> :pig_nose: <code>:pig_nose:</code><br> :cow: <code>:cow:</code><br> :boar: <code>:boar:</code><br> :monkey_face: <code>:monkey_face:</code><br> :monkey: <code>:monkey:</code><br> :horse: <code>:horse:</code><br> :racehorse: <code>:racehorse:</code><br> :camel: <code>:camel:</code><br> :sheep: <code>:sheep:</code><br> :elephant: <code>:elephant:</code><br> :panda_face: <code>:panda_face:</code><br> :snake: <code>:snake:</code><br> :bird: <code>:bird:</code><br> :baby_chick: <code>:baby_chick:</code><br> :hatched_chick: <code>:hatched_chick:</code><br> :hatching_chick: <code>:hatching_chick:</code><br> :chicken: <code>:chicken:</code><br> :penguin: <code>:penguin:</code><br> :turtle: <code>:turtle:</code><br> :bug: <code>:bug:</code><br> :honeybee: <code>:honeybee:</code><br> :ant: <code>:ant:</code><br> :beetle: <code>:beetle:</code><br> :snail: <code>:snail:</code><br> :octopus: <code>:octopus:</code><br> :tropical_fish: <code>:tropical_fish:</code><br> :fish: <code>:fish:</code><br> :whale: <code>:whale:</code><br> :whale2: <code>:whale2:</code><br> :dolphin: <code>:dolphin:</code><br> :cow2: <code>:cow2:</code><br> :ram: <code>:ram:</code><br> :rat: <code>:rat:</code><br> :water_buffalo: <code>:water_buffalo:</code><br> :tiger2: <code>:tiger2:</code><br> :rabbit2: <code>:rabbit2:</code><br> :dragon: <code>:dragon:</code><br> :goat: <code>:goat:</code><br> :rooster: <code>:rooster:</code><br> :dog2: <code>:dog2:</code><br> :pig2: <code>:pig2:</code><br> :mouse2: <code>:mouse2:</code><br> :ox: <code>:ox:</code><br> :dragon_face: <code>:dragon_face:</code><br> :blowfish: <code>:blowfish:</code><br> :crocodile: <code>:crocodile:</code><br> :dromedary_camel: <code>:dromedary_camel:</code><br> :leopard: <code>:leopard:</code><br> :cat2: <code>:cat2:</code><br> :poodle: <code>:poodle:</code><br> :paw_prints: <code>:paw_prints:</code><br> :bouquet: <code>:bouquet:</code><br> :cherry_blossom: <code>:cherry_blossom:</code><br> :tulip: <code>:tulip:</code><br> :four_leaf_clover: <code>:four_leaf_clover:</code><br> :rose: <code>:rose:</code><br> :sunflower: <code>:sunflower:</code><br> :hibiscus: <code>:hibiscus:</code><br> :maple_leaf: <code>:maple_leaf:</code><br> :leaves: <code>:leaves:</code><br> :fallen_leaf: <code>:fallen_leaf:</code><br> :herb: <code>:herb:</code><br> :mushroom: <code>:mushroom:</code><br> :cactus: <code>:cactus:</code><br> :palm_tree: <code>:palm_tree:</code><br> :evergreen_tree: <code>:evergreen_tree:</code><br> :deciduous_tree: <code>:deciduous_tree:</code><br> :chestnut: <code>:chestnut:</code><br> :seedling: <code>:seedling:</code><br> :blossom: <code>:blossom:</code><br> :ear_of_rice: <code>:ear_of_rice:</code><br> :shell: <code>:shell:</code><br> :globe_with_meridians: <code>:globe_with_meridians:</code><br> :sun_with_face: <code>:sun_with_face:</code><br> :full_moon_with_face: <code>:full_moon_with_face:</code><br> :new_moon_with_face: <code>:new_moon_with_face:</code><br> :new_moon: <code>:new_moon:</code><br> :waxing_crescent_moon: <code>:waxing_crescent_moon:</code><br> :first_quarter_moon: <code>:first_quarter_moon:</code><br> :waxing_gibbous_moon: <code>:waxing_gibbous_moon:</code><br> :full_moon: <code>:full_moon:</code><br> :waning_gibbous_moon: <code>:waning_gibbous_moon:</code><br> :last_quarter_moon: <code>:last_quarter_moon:</code><br> :waning_crescent_moon: <code>:waning_crescent_moon:</code><br> :last_quarter_moon_with_face: <code>:last_quarter_moon_with_face:</code><br> :first_quarter_moon_with_face: <code>:first_quarter_moon_with_face:</code><br> :moon: <code>:moon:</code><br> :earth_africa: <code>:earth_africa:</code><br> :earth_americas: <code>:earth_americas:</code><br> :earth_asia: <code>:earth_asia:</code><br> :volcano: <code>:volcano:</code><br> :milky_way: <code>:milky_way:</code><br> :partly_sunny: <code>:partly_sunny:</code><br> :octocat: <code>:octocat:</code><br> :squirrel: <code>:squirrel:</code></p><h2 id="物体"><a href="#物体" class="headerlink" title="物体"></a>物体</h2><p> :bamboo: <code>:bamboo:</code><br> :gift_heart: <code>:gift_heart:</code><br> :dolls: <code>:dolls:</code><br> :school_satchel: <code>:school_satchel:</code><br> :mortar_board: <code>:mortar_board:</code><br> :flags: <code>:flags:</code><br> :fireworks: <code>:fireworks:</code><br> :sparkler: <code>:sparkler:</code><br> :wind_chime: <code>:wind_chime:</code><br> :rice_scene: <code>:rice_scene:</code><br> :jack_o_lantern: <code>:jack_o_lantern:</code><br> :ghost: <code>:ghost:</code><br> :santa: <code>:santa:</code><br> :christmas_tree: <code>:christmas_tree:</code><br> :gift: <code>:gift:</code><br> :bell: <code>:bell:</code><br> :no_bell: <code>:no_bell:</code><br> :tanabata_tree: <code>:tanabata_tree:</code><br> :tada: <code>:tada:</code><br> :confetti_ball: <code>:confetti_ball:</code><br> :balloon: <code>:balloon:</code><br> :crystal_ball: <code>:crystal_ball:</code><br> :cd: <code>:cd:</code><br> :dvd: <code>:dvd:</code><br> :floppy_disk: <code>:floppy_disk:</code><br> :camera: <code>:camera:</code><br> :video_camera: <code>:video_camera:</code><br> :movie_camera: <code>:movie_camera:</code><br> :computer: <code>:computer:</code><br> :tv: <code>:tv:</code><br> :iphone: <code>:iphone:</code><br> :phone: <code>:phone:</code><br> :telephone: <code>:telephone:</code><br> :telephone_receiver: <code>:telephone_receiver:</code><br> :pager: <code>:pager:</code><br> :fax: <code>:fax:</code><br> :minidisc: <code>:minidisc:</code><br> :vhs: <code>:vhs:</code><br> :sound: <code>:sound:</code><br> :speaker: <code>:speaker:</code><br> :mute: <code>:mute:</code><br> :loudspeaker: <code>:loudspeaker:</code><br> :mega: <code>:mega:</code><br> :hourglass: <code>:hourglass:</code><br> :hourglass_flowing_sand: <code>:hourglass_flowing_sand:</code><br> :alarm_clock: <code>:alarm_clock:</code><br> :watch: <code>:watch:</code><br> :radio: <code>:radio:</code><br> :satellite: <code>:satellite:</code><br> :loop: <code>:loop:</code><br> :mag: <code>:mag:</code><br> :mag_right: <code>:mag_right:</code><br> :unlock: <code>:unlock:</code><br> :lock: <code>:lock:</code><br> :lock_with_ink_pen: <code>:lock_with_ink_pen:</code><br> :closed_lock_with_key: <code>:closed_lock_with_key:</code><br> :key: <code>:key:</code><br> :bulb: <code>:bulb:</code><br> :flashlight: <code>:flashlight:</code><br> :high_brightness: <code>:high_brightness:</code><br> :low_brightness: <code>:low_brightness:</code><br> :electric_plug: <code>:electric_plug:</code><br> :battery: <code>:battery:</code><br> :calling: <code>:calling:</code><br> :email: <code>:email:</code><br> :mailbox: <code>:mailbox:</code><br> :postbox: <code>:postbox:</code><br> :bath: <code>:bath:</code><br> :bathtub: <code>:bathtub:</code><br> :shower: <code>:shower:</code><br> :toilet: <code>:toilet:</code><br> :wrench: <code>:wrench:</code><br> :nut_and_bolt: <code>:nut_and_bolt:</code><br> :hammer: <code>:hammer:</code><br> :seat: <code>:seat:</code><br> :moneybag: <code>:moneybag:</code><br> :yen: <code>:yen:</code><br> :dollar: <code>:dollar:</code><br> :pound: <code>:pound:</code><br> :euro: <code>:euro:</code><br> :credit_card: <code>:credit_card:</code><br> :money_with_wings: <code>:money_with_wings:</code><br> :e-mail: <code>:e:</code><br> :inbox_tray: <code>:inbox_tray:</code><br> :outbox_tray: <code>:outbox_tray:</code><br> :envelope: <code>:envelope:</code><br> :incoming_envelope: <code>:incoming_envelope:</code><br> :postal_horn: <code>:postal_horn:</code><br> :mailbox_closed: <code>:mailbox_closed:</code><br> :mailbox_with_mail: <code>:mailbox_with_mail:</code><br> :mailbox_with_no_mail: <code>:mailbox_with_no_mail:</code><br> :door: <code>:door:</code><br> :smoking: <code>:smoking:</code><br> :bomb: <code>:bomb:</code><br> :gun: <code>:gun:</code><br> :hocho: <code>:hocho:</code><br> :pill: <code>:pill:</code><br> :syringe: <code>:syringe:</code><br> :page_facing_up: <code>:page_facing_up:</code><br> :page_with_curl: <code>:page_with_curl:</code><br> :bookmark_tabs: <code>:bookmark_tabs:</code><br> :bar_chart: <code>:bar_chart:</code><br> :chart_with_upwards_trend: <code>:chart_with_upwards_trend:</code><br> :chart_with_downwards_trend: <code>:chart_with_downwards_trend:</code><br> :scroll: <code>:scroll:</code><br> :clipboard: <code>:clipboard:</code><br> :calendar: <code>:calendar:</code><br> :date: <code>:date:</code><br> :card_index: <code>:card_index:</code><br> :file_folder: <code>:file_folder:</code><br> :open_file_folder: <code>:open_file_folder:</code><br> :scissors: <code>:scissors:</code><br> :pushpin: <code>:pushpin:</code><br> :paperclip: <code>:paperclip:</code><br> :black_nib: <code>:black_nib:</code><br> :pencil2: <code>:pencil2:</code><br> :straight_ruler: <code>:straight_ruler:</code><br> :triangular_ruler: <code>:triangular_ruler:</code><br> :closed_book: <code>:closed_book:</code><br> :green_book: <code>:green_book:</code><br> :blue_book: <code>:blue_book:</code><br> :orange_book: <code>:orange_book:</code><br> :notebook: <code>:notebook:</code><br> :notebook_with_decorative_cover: <code>:notebook_with_decorative_cover:</code><br> :ledger: <code>:ledger:</code><br> :books: <code>:books:</code><br> :bookmark: <code>:bookmark:</code><br> :name_badge: <code>:name_badge:</code><br> :microscope: <code>:microscope:</code><br> :telescope: <code>:telescope:</code><br> :newspaper: <code>:newspaper:</code><br> :football: <code>:football:</code><br> :basketball: <code>:basketball:</code><br> :soccer: <code>:soccer:</code><br> :baseball: <code>:baseball:</code><br> :tennis: <code>:tennis:</code><br> :8ball: <code>:8ball:</code><br> :rugby_football: <code>:rugby_football:</code><br> :bowling: <code>:bowling:</code><br> :golf: <code>:golf:</code><br> :mountain_bicyclist: <code>:mountain_bicyclist:</code><br> :bicyclist: <code>:bicyclist:</code><br> :horse_racing: <code>:horse_racing:</code><br> :snowboarder: <code>:snowboarder:</code><br> :swimmer: <code>:swimmer:</code><br> :surfer: <code>:surfer:</code><br> :ski: <code>:ski:</code><br> :spades: <code>:spades:</code><br> :hearts: <code>:hearts:</code><br> :clubs: <code>:clubs:</code><br> :diamonds: <code>:diamonds:</code><br> :gem: <code>:gem:</code><br> :ring: <code>:ring:</code><br> :trophy: <code>:trophy:</code><br> :musical_score: <code>:musical_score:</code><br> :musical_keyboard: <code>:musical_keyboard:</code><br> :violin: <code>:violin:</code><br> :space_invader: <code>:space_invader:</code><br> :video_game: <code>:video_game:</code><br> :black_joker: <code>:black_joker:</code><br> :flower_playing_cards: <code>:flower_playing_cards:</code><br> :game_die: <code>:game_die:</code><br> :dart: <code>:dart:</code><br> :mahjong: <code>:mahjong:</code><br> :clapper: <code>:clapper:</code><br> :memo: <code>:memo:</code><br> :pencil: <code>:pencil:</code><br> :book: <code>:book:</code><br> :art: <code>:art:</code><br> :microphone: <code>:microphone:</code><br> :headphones: <code>:headphones:</code><br> :trumpet: <code>:trumpet:</code><br> :saxophone: <code>:saxophone:</code><br> :guitar: <code>:guitar:</code><br> :shoe: <code>:shoe:</code><br> :sandal: <code>:sandal:</code><br> :high_heel: <code>:high_heel:</code><br> :lipstick: <code>:lipstick:</code><br> :boot: <code>:boot:</code><br> :shirt: <code>:shirt:</code><br> :tshirt: <code>:tshirt:</code><br> :necktie: <code>:necktie:</code><br> :womans_clothes: <code>:womans_clothes:</code><br> :dress: <code>:dress:</code><br> :running_shirt_with_sash: <code>:running_shirt_with_sash:</code><br> :jeans: <code>:jeans:</code><br> :kimono: <code>:kimono:</code><br> :bikini: <code>:bikini:</code><br> :ribbon: <code>:ribbon:</code><br> :tophat: <code>:tophat:</code><br> :crown: <code>:crown:</code><br> :womans_hat: <code>:womans_hat:</code><br> :mans_shoe: <code>:mans_shoe:</code><br> :closed_umbrella: <code>:closed_umbrella:</code><br> :briefcase: <code>:briefcase:</code><br> :handbag: <code>:handbag:</code><br> :pouch: <code>:pouch:</code><br> :purse: <code>:purse:</code><br> :eyeglasses: <code>:eyeglasses:</code><br> :fishing_pole_and_fish: <code>:fishing_pole_and_fish:</code><br> :coffee: <code>:coffee:</code><br> :tea: <code>:tea:</code><br> :sake: <code>:sake:</code><br> :baby_bottle: <code>:baby_bottle:</code><br> :beer: <code>:beer:</code><br> :beers: <code>:beers:</code><br> :cocktail: <code>:cocktail:</code><br> :tropical_drink: <code>:tropical_drink:</code><br> :wine_glass: <code>:wine_glass:</code><br> :fork_and_knife: <code>:fork_and_knife:</code><br> :pizza: <code>:pizza:</code><br> :hamburger: <code>:hamburger:</code><br> :fries: <code>:fries:</code><br> :poultry_leg: <code>:poultry_leg:</code><br> :meat_on_bone: <code>:meat_on_bone:</code><br> :spaghetti: <code>:spaghetti:</code><br> :curry: <code>:curry:</code><br> :fried_shrimp: <code>:fried_shrimp:</code><br> :bento: <code>:bento:</code><br> :sushi: <code>:sushi:</code><br> :fish_cake: <code>:fish_cake:</code><br> :rice_ball: <code>:rice_ball:</code><br> :rice_cracker: <code>:rice_cracker:</code><br> :rice: <code>:rice:</code><br> :ramen: <code>:ramen:</code><br> :stew: <code>:stew:</code><br> :oden: <code>:oden:</code><br> :dango: <code>:dango:</code><br> :egg: <code>:egg:</code><br> :bread: <code>:bread:</code><br> :doughnut: <code>:doughnut:</code><br> :custard: <code>:custard:</code><br> :icecream: <code>:icecream:</code><br> :ice_cream: <code>:ice_cream:</code><br> :shaved_ice: <code>:shaved_ice:</code><br> :birthday: <code>:birthday:</code><br> :cake: <code>:cake:</code><br> :cookie: <code>:cookie:</code><br> :chocolate_bar: <code>:chocolate_bar:</code><br> :candy: <code>:candy:</code><br> :lollipop: <code>:lollipop:</code><br> :honey_pot: <code>:honey_pot:</code><br> :apple: <code>:apple:</code><br> :green_apple: <code>:green_apple:</code><br> :tangerine: <code>:tangerine:</code><br> :lemon: <code>:lemon:</code><br> :cherries: <code>:cherries:</code><br> :grapes: <code>:grapes:</code><br> :watermelon: <code>:watermelon:</code><br> :strawberry: <code>:strawberry:</code><br> :peach: <code>:peach:</code><br> :melon: <code>:melon:</code><br> :banana: <code>:banana:</code><br> :pear: <code>:pear:</code><br> :pineapple: <code>:pineapple:</code><br> :sweet_potato: <code>:sweet_potato:</code><br> :eggplant: <code>:eggplant:</code><br> :tomato: <code>:tomato:</code><br> :corn: <code>:corn:</code></p><h2 id="地点"><a href="#地点" class="headerlink" title="地点"></a>地点</h2><p> :house: <code>:house:</code><br> :house_with_garden: <code>:house_with_garden:</code><br> :school: <code>:school:</code><br> :office: <code>:office:</code><br> :post_office: <code>:post_office:</code><br> :hospital: <code>:hospital:</code><br> :bank: <code>:bank:</code><br> :convenience_store: <code>:convenience_store:</code><br> :love_hotel: <code>:love_hotel:</code><br> :hotel: <code>:hotel:</code><br> :wedding: <code>:wedding:</code><br> :church: <code>:church:</code><br> :department_store: <code>:department_store:</code><br> :european_post_office: <code>:european_post_office:</code><br> :city_sunrise: <code>:city_sunrise:</code><br> :city_sunset: <code>:city_sunset:</code><br> :japanese_castle: <code>:japanese_castle:</code><br> :european_castle: <code>:european_castle:</code><br> :tent: <code>:tent:</code><br> :factory: <code>:factory:</code><br> :tokyo_tower: <code>:tokyo_tower:</code><br> :japan: <code>:japan:</code><br> :mount_fuji: <code>:mount_fuji:</code><br> :sunrise_over_mountains: <code>:sunrise_over_mountains:</code><br> :sunrise: <code>:sunrise:</code><br> :stars: <code>:stars:</code><br> :statue_of_liberty: <code>:statue_of_liberty:</code><br> :bridge_at_night: <code>:bridge_at_night:</code><br> :carousel_horse: <code>:carousel_horse:</code><br> :rainbow: <code>:rainbow:</code><br> :ferris_wheel: <code>:ferris_wheel:</code><br> :fountain: <code>:fountain:</code><br> :roller_coaster: <code>:roller_coaster:</code><br> :ship: <code>:ship:</code><br> :speedboat: <code>:speedboat:</code><br> :boat: <code>:boat:</code><br> :sailboat: <code>:sailboat:</code><br> :rowboat: <code>:rowboat:</code><br> :anchor: <code>:anchor:</code><br> :rocket: <code>:rocket:</code><br> :airplane: <code>:airplane:</code><br> :helicopter: <code>:helicopter:</code><br> :steam_locomotive: <code>:steam_locomotive:</code><br> :tram: <code>:tram:</code><br> :mountain_railway: <code>:mountain_railway:</code><br> :bike: <code>:bike:</code><br> :aerial_tramway: <code>:aerial_tramway:</code><br> :suspension_railway: <code>:suspension_railway:</code><br> :mountain_cableway: <code>:mountain_cableway:</code><br> :tractor: <code>:tractor:</code><br> :blue_car: <code>:blue_car:</code><br> :oncoming_automobile: <code>:oncoming_automobile:</code><br> :car: <code>:car:</code><br> :red_car: <code>:red_car:</code><br> :taxi: <code>:taxi:</code><br> :oncoming_taxi: <code>:oncoming_taxi:</code><br> :articulated_lorry: <code>:articulated_lorry:</code><br> :bus: <code>:bus:</code><br> :oncoming_bus: <code>:oncoming_bus:</code><br> :rotating_light: <code>:rotating_light:</code><br> :police_car: <code>:police_car:</code><br> :oncoming_police_car: <code>:oncoming_police_car:</code><br> :fire_engine: <code>:fire_engine:</code><br> :ambulance: <code>:ambulance:</code><br> :minibus: <code>:minibus:</code><br> :truck: <code>:truck:</code><br> :train: <code>:train:</code><br> :station: <code>:station:</code><br> :train2: <code>:train2:</code><br> :bullettrain_front: <code>:bullettrain_front:</code><br> :bullettrain_side: <code>:bullettrain_side:</code><br> :light_rail: <code>:light_rail:</code><br> :monorail: <code>:monorail:</code><br> :railway_car: <code>:railway_car:</code><br> :trolleybus: <code>:trolleybus:</code><br> :ticket: <code>:ticket:</code><br> :fuelpump: <code>:fuelpump:</code><br> :vertical_traffic_light: <code>:vertical_traffic_light:</code><br> :traffic_light: <code>:traffic_light:</code><br> :warning: <code>:warning:</code><br> :construction: <code>:construction:</code><br> :beginner: <code>:beginner:</code><br> :atm: <code>:atm:</code><br> :slot_machine: <code>:slot_machine:</code><br> :busstop: <code>:busstop:</code><br> :barber: <code>:barber:</code><br> :hotsprings: <code>:hotsprings:</code><br> :checkered_flag: <code>:checkered_flag:</code><br> :crossed_flags: <code>:crossed_flags:</code><br> :izakaya_lantern: <code>:izakaya_lantern:</code><br> :moyai: <code>:moyai:</code><br> :circus_tent: <code>:circus_tent:</code><br> :performing_arts: <code>:performing_arts:</code><br> :round_pushpin: <code>:round_pushpin:</code><br> :triangular_flag_on_post: <code>:triangular_flag_on_post:</code><br> :jp: <code>:jp:</code><br> :kr: <code>:kr:</code><br> :cn: <code>:cn:</code><br> :us: <code>:us:</code><br> :fr: <code>:fr:</code><br> :es: <code>:es:</code><br> :it: <code>:it:</code><br> :ru: <code>:ru:</code><br> :gb: <code>:gb:</code><br> :uk: <code>:uk:</code><br> :de: <code>:de:</code></p><h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><p> :one: <code>:one:</code><br> :two: <code>:two:</code><br> :three: <code>:three:</code><br> :four: <code>:four:</code><br> :five: <code>:five:</code><br> :six: <code>:six:</code><br> :seven: <code>:seven:</code><br> :eight: <code>:eight:</code><br> :nine: <code>:nine:</code><br> :keycap_ten: <code>:keycap_ten:</code><br> :1234: <code>:1234:</code><br> :zero: <code>:zero:</code><br> :hash: <code>:hash:</code><br> :symbols: <code>:symbols:</code><br> :arrow_backward: <code>:arrow_backward:</code><br> :arrow_down: <code>:arrow_down:</code><br> :arrow_forward: <code>:arrow_forward:</code><br> :arrow_left: <code>:arrow_left:</code><br> :capital_abcd: <code>:capital_abcd:</code><br> :abcd: <code>:abcd:</code><br> :abc: <code>:abc:</code><br> :arrow_lower_left: <code>:arrow_lower_left:</code><br> :arrow_lower_right: <code>:arrow_lower_right:</code><br> :arrow_right: <code>:arrow_right:</code><br> :arrow_up: <code>:arrow_up:</code><br> :arrow_upper_left: <code>:arrow_upper_left:</code><br> :arrow_upper_right: <code>:arrow_upper_right:</code><br> :arrow_double_down: <code>:arrow_double_down:</code><br> :arrow_double_up: <code>:arrow_double_up:</code><br> :arrow_down_small: <code>:arrow_down_small:</code><br> :arrow_heading_down: <code>:arrow_heading_down:</code><br> :arrow_heading_up: <code>:arrow_heading_up:</code><br> :leftwards_arrow_with_hook: <code>:leftwards_arrow_with_hook:</code><br> :arrow_right_hook: <code>:arrow_right_hook:</code><br> :left_right_arrow: <code>:left_right_arrow:</code><br> :arrow_up_down: <code>:arrow_up_down:</code><br> :arrow_up_small: <code>:arrow_up_small:</code><br> :arrows_clockwise: <code>:arrows_clockwise:</code><br> :arrows_counterclockwise: <code>:arrows_counterclockwise:</code><br> :rewind: <code>:rewind:</code><br> :fast_forward: <code>:fast_forward:</code><br> :information_source: <code>:information_source:</code><br> :ok: <code>:ok:</code><br> :twisted_rightwards_arrows: <code>:twisted_rightwards_arrows:</code><br> :repeat: <code>:repeat:</code><br> :repeat_one: <code>:repeat_one:</code><br> :new: <code>:new:</code><br> :top: <code>:top:</code><br> :up: <code>:up:</code><br> :cool: <code>:cool:</code><br> :free: <code>:free:</code><br> :ng: <code>:ng:</code><br> :cinema: <code>:cinema:</code><br> :koko: <code>:koko:</code><br> :signal_strength: <code>:signal_strength:</code><br> :u5272: <code>:u5272:</code><br> :u5408: <code>:u5408:</code><br> :u55b6: <code>:u55b6:</code><br> :u6307: <code>:u6307:</code><br> :u6708: <code>:u6708:</code><br> :u6709: <code>:u6709:</code><br> :u6e80: <code>:u6e80:</code><br> :u7121: <code>:u7121:</code><br> :u7533: <code>:u7533:</code><br> :u7a7a: <code>:u7a7a:</code><br> :u7981: <code>:u7981:</code><br> :sa: <code>:sa:</code><br> :restroom: <code>:restroom:</code><br> :mens: <code>:mens:</code><br> :womens: <code>:womens:</code><br> :baby_symbol: <code>:baby_symbol:</code><br> :no_smoking: <code>:no_smoking:</code><br> :parking: <code>:parking:</code><br> :wheelchair: <code>:wheelchair:</code><br> :metro: <code>:metro:</code><br> :baggage_claim: <code>:baggage_claim:</code><br> :accept: <code>:accept:</code><br> :wc: <code>:wc:</code><br> :potable_water: <code>:potable_water:</code><br> :put_litter_in_its_place: <code>:put_litter_in_its_place:</code><br> :secret: <code>:secret:</code><br> :congratulations: <code>:congratulations:</code><br> :m: <code>:m:</code><br> :passport_control: <code>:passport_control:</code><br> :left_luggage: <code>:left_luggage:</code><br> :customs: <code>:customs:</code><br> :ideograph_advantage: <code>:ideograph_advantage:</code><br> :cl: <code>:cl:</code><br> :sos: <code>:sos:</code><br> :id: <code>:id:</code><br> :no_entry_sign: <code>:no_entry_sign:</code><br> :underage: <code>:underage:</code><br> :no_mobile_phones: <code>:no_mobile_phones:</code><br> :do_not_litter: <code>:do_not_litter:</code><br> :non-potable_water: <code>:non:</code><br> :no_bicycles: <code>:no_bicycles:</code><br> :no_pedestrians: <code>:no_pedestrians:</code><br> :children_crossing: <code>:children_crossing:</code><br> :no_entry: <code>:no_entry:</code><br> :eight_spoked_asterisk: <code>:eight_spoked_asterisk:</code><br> :eight_pointed_black_star: <code>:eight_pointed_black_star:</code><br> :heart_decoration: <code>:heart_decoration:</code><br> :vs: <code>:vs:</code><br> :vibration_mode: <code>:vibration_mode:</code><br> :mobile_phone_off: <code>:mobile_phone_off:</code><br> :chart: <code>:chart:</code><br> :currency_exchange: <code>:currency_exchange:</code><br> :aries: <code>:aries:</code><br> :taurus: <code>:taurus:</code><br> :gemini: <code>:gemini:</code><br> :cancer: <code>:cancer:</code><br> :leo: <code>:leo:</code><br> :virgo: <code>:virgo:</code><br> :libra: <code>:libra:</code><br> :scorpius: <code>:scorpius:</code><br> :sagittarius: <code>:sagittarius:</code><br> :capricorn: <code>:capricorn:</code><br> :aquarius: <code>:aquarius:</code><br> :pisces: <code>:pisces:</code><br> :ophiuchus: <code>:ophiuchus:</code><br> :six_pointed_star: <code>:six_pointed_star:</code><br> :negative_squared_cross_mark: <code>:negative_squared_cross_mark:</code><br> :a: <code>:a:</code><br> :b: <code>:b:</code><br> :ab: <code>:ab:</code><br> :o2: <code>:o2:</code><br> :diamond_shape_with_a_dot_inside: <code>:diamond_shape_with_a_dot_inside:</code><br> :recycle: <code>:recycle:</code><br> :end: <code>:end:</code><br> :on: <code>:on:</code><br> :soon: <code>:soon:</code><br> :clock1: <code>:clock1:</code><br> :clock130: <code>:clock130:</code><br> :clock10: <code>:clock10:</code><br> :clock1030: <code>:clock1030:</code><br> :clock11: <code>:clock11:</code><br> :clock1130: <code>:clock1130:</code><br> :clock12: <code>:clock12:</code><br> :clock1230: <code>:clock1230:</code><br> :clock2: <code>:clock2:</code><br> :clock230: <code>:clock230:</code><br> :clock3: <code>:clock3:</code><br> :clock330: <code>:clock330:</code><br> :clock4: <code>:clock4:</code><br> :clock430: <code>:clock430:</code><br> :clock5: <code>:clock5:</code><br> :clock530: <code>:clock530:</code><br> :clock6: <code>:clock6:</code><br> :clock630: <code>:clock630:</code><br> :clock7: <code>:clock7:</code><br> :clock730: <code>:clock730:</code><br> :clock8: <code>:clock8:</code><br> :clock830: <code>:clock830:</code><br> :clock9: <code>:clock9:</code><br> :clock930: <code>:clock930:</code><br> :heavy_dollar_sign: <code>:heavy_dollar_sign:</code><br> :copyright: <code>:copyright:</code><br> :registered: <code>:registered:</code><br> :tm: <code>:tm:</code><br> :x: <code>:x:</code><br> :heavy_exclamation_mark: <code>:heavy_exclamation_mark:</code><br> :bangbang: <code>:bangbang:</code><br> :interrobang: <code>:interrobang:</code><br> :o: <code>:o:</code><br> :heavy_multiplication_x: <code>:heavy_multiplication_x:</code><br> :heavy_plus_sign: <code>:heavy_plus_sign:</code><br> :heavy_minus_sign: <code>:heavy_minus_sign:</code><br> :heavy_division_sign: <code>:heavy_division_sign:</code><br> :white_flower: <code>:white_flower:</code><br> :100: <code>:100:</code><br> :heavy_check_mark: <code>:heavy_check_mark:</code><br> :ballot_box_with_check: <code>:ballot_box_with_check:</code><br> :radio_button: <code>:radio_button:</code><br> :link: <code>:link:</code><br> :curly_loop: <code>:curly_loop:</code><br> :wavy_dash: <code>:wavy_dash:</code><br> :part_alternation_mark: <code>:part_alternation_mark:</code><br> :trident: <code>:trident:</code><br> :black_large_square: <code>:black_large_square:</code><br> :white_large_square: <code>:white_large_square:</code><br> :white_check_mark: <code>:white_check_mark:</code><br> :white_square_button: <code>:white_square_button:</code><br> :black_square_button: <code>:black_square_button:</code><br> :black_circle: <code>:black_circle:</code><br> :white_circle: <code>:white_circle:</code><br> :red_circle: <code>:red_circle:</code><br> :large_blue_circle: <code>:large_blue_circle:</code><br> :large_blue_diamond: <code>:large_blue_diamond:</code><br> :large_orange_diamond: <code>:large_orange_diamond:</code><br> :small_blue_diamond: <code>:small_blue_diamond:</code><br> :small_orange_diamond: <code>:small_orange_diamond:</code><br> :small_red_triangle: <code>:small_red_triangle:</code><br> :small_red_triangle_down: <code>:small_red_triangle_down:</code><br> :shipit: <code>:shipit:</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Emoji表情&quot;&gt;&lt;a href=&quot;#Emoji表情&quot; class=&quot;headerlink&quot; title=&quot;Emoji表情&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.webpagefx.com/tools/emoji-cheat-sheet/&quot; targ
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/editor/vsCode/shortCutKey/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/editor/vsCode/shortCutKey/</id>
    <published>2019-06-12T07:21:24.897Z</published>
    <updated>2019-06-12T07:21:24.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac-os下vscode快捷键"><a href="#mac-os下vscode快捷键" class="headerlink" title="mac os下vscode快捷键"></a>mac os下vscode快捷键</h1><h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><p><code>Command + Shift + P / F1</code> 显示命令面板 <br><br><code>Command + P</code> 快速打开<br><br><code>Command + Shift + N</code> 打开新窗口<br><br><code>Command + W</code> 关闭窗口<br></p><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p><code>Command + X</code> 剪切（未选中文本的情况下，剪切光标所在行）<br><br><code>Command + C</code> 复制（未选中文本的情况下，复制光标所在行）<br><br><code>Option + Up</code> 向上移动行<br><br><code>Option + Down</code> 向下移动行<br><br><code>Option + Shift + Up</code> 向上复制行<br><br><code>Option + Shift + Down</code> 向下复制行<br><br><code>Command + Shift + K</code> 删除行<br><br><code>Command + Enter</code> 下一行插入<br><br><code>Command + Shift + Enter</code> 上一行插入<br><br><code>Command + Shift +</code> 跳转到匹配的括<br><br><code>Command + [</code> 减少缩进<br><br><code>Command + ]</code> 增加缩进<br><br><code>Home</code> 跳转至行首<br><br><code>End</code> 跳转到行尾<br><br><code>Command + Up</code> 跳转至文件开头<br><br><code>Command + Down</code> 跳转至文件结尾<br><br><code>Ctrl + PgUp</code> 按行向上滚动<br><br><code>Ctrl + PgDown</code> 按行向下滚动<br><br><code>Command + PgUp</code> 按屏向上滚动<br><br><code>Command + PgDown</code> 按屏向下滚动<br><br><code>Command + Shift + [</code> 折叠代码块<br><br><code>Command + Shift + ]</code> 展开代码块<br><br><code>Command + K Command + [</code> 折叠全部子代码块<br><br><code>Command + K Command + ]</code> 展开全部子代码块<br><br><code>Command + K Command + 0</code> 折叠全部代码块<br><br><code>Command + K Command + J</code> 展开全部代码块<br><br><code>Command + K Command + C</code> 添加行注释<br><br><code>Command + K Command + U</code> 移除行注释<br><br><code>Command + /</code> 添加、移除行注释<br><br><code>Option + Shift + A</code> 添加、移除块注释<br><br><code>Option + Z</code> 自动换行、取消自动换行<br></p><ul><li>多光标与选择</li></ul><p><code>Option + 点击</code> 插入多个光标<br><br><code>Command + Option + Up</code> 向上插入光标<br><br><code>Command + Option + Down</code> 向下插入光标<br><br><code>Command + U</code> 撤销上一个光标操作<br><br><code>Option + Shift + I</code> 在所选行的行尾插入光标<br><br><code>Command + I</code> 选中当前行<br><br><code>Command + Shift + L</code> 选中所有与当前选中内容相同部分<br><br><code>Command + F2</code> 选中所有与当前选中单词相同的单词<br><br><code>Command + Ctrl + Shift + Left</code> 折叠选中<br><br><code>Command + Ctrl + Shift + Right</code> 展开选中<br><br><code>Alt + Shift + 拖动鼠标</code> 选中代码块<br><br><code>Command + Shift + Option + Up</code> 列选择 向上<br><br><code>Command + Shift + Option + Down</code> 列选择 向下<br><br><code>Command + Shift + Option + Left</code> 列选择 向左<br><br><code>Command + Shift + Option + Right</code> 列选择 向右<br><br><code>Command + Shift + Option + PgUp</code> 列选择 向上翻页<br><br><code>Command + Shift + Option + PgDown</code> 列选择 向下翻页<br></p><ul><li>查找替换</li></ul><p><code>Command + F</code> 查找<br><br><code>Command + Option + F</code> 替换<br><br><code>Command + G</code> 查找下一个<br><br><code>Command + Shift + G</code> 查找上一个<br><br><code>Option + Enter</code> 选中所有匹配项<br><br><code>Command + D</code> 向下选中相同内容<br><br><code>Command + K Command + D</code> 移除前一个向下选中相同内容<br></p><ul><li>进阶</li></ul><p><code>Ctrl + Space</code> 打开建议<br><br><code>Command + Shift + Space</code> 参数提示<br><br><code>Tab Emmet</code>插件缩写补全<br><br><code>Option + Shift + F</code> 格式化<br><br><code>Command + K Command + F</code> 格式化选中内容<br><br><code>F12</code> 跳转到声明位置<br><br><code>Option + F12</code> 查看具体声明内容<br><br><code>Command + K F12</code> 分屏查看具体声明内容<br><br><code>Command + .</code> 快速修复<br><br><code>Shift + F12</code> 显示引用<br><br><code>F2</code> 重命名符号<br><br><code>Command + Shift + .</code> 替换为上一个值<br><br><code>Command + Shift + ,</code> 替换为下一个值<br><br><code>Command + K Command + X</code> 删除行尾多余空格<br><br><code>Command + K M</code> 更改文件语言<br></p><ul><li>导航</li></ul><p><code>Command + T</code> 显示所有符号<br><br><code>Ctrl + G</code>跳转至某行<br><br><code>Command + P</code> 跳转到某个文件<br><code>Command + Shift + O</code> 跳转到某个符号<br><br><code>Command + Shift + M</code> 打开问题面板<br><br><code>F8</code> 下一个错误或警告位置<br><br><code>Shift + F8</code> 上一个错误或警告位置<br><br><code>Ctrl + Shift + Tab</code> 编辑器历史记录<br><br><code>Ctrl + -</code> 后退<br><br><code>Ctrl + Shift + -</code> 前进<br><br><code>Ctrl + Shift + M Tab</code> 切换焦点<br></p><ul><li>编辑器管理</li></ul><p><code>Command + W</code> 关闭编辑器<br><br><code>Command + K F</code> 关闭文件夹<br><br><code>Command +</code> 编辑器分屏<br><br><code>Command + 1</code> 切换到第一分组<br><br><code>Command + 2</code> 切换到第二分组<br><br><code>Command + 3</code> 切换到第三分组<br><br><code>Command + K Command + Left</code> 切换到上一分组<br><br><code>Command + K Command + Right</code> 切换到下一分组<br><br><code>Command + K Command + Shift + Left</code> 左移编辑器<br><br><code>Command + K Command + Shift + Right</code> 右移编辑器<br><br><code>Command + K Left</code> 激活左侧编辑组<br><br><code>Command + K Right</code> 激活右侧编辑组<br></p><ul><li>文件管理</li></ul><p><code>Command + N</code> 新建文件<br><br><code>Command + O</code> 打开文件<br><br><code>Command + S</code> 保存文件<br><br><code>Command + Shift + S</code> 另存为<br><br><code>Command + Option + S</code> 全部保存<br><br><code>Command + W</code> 关闭<br><br><code>Command + K Command + W</code> 全部关闭<br><br><code>Command + Shift + T</code> 重新打开被关闭的编辑器<br><br><code>Command + K Enter</code> 保持打开<br><br><code>Ctrl + Tab</code> 打开下一个<br><br><code>Ctrl + Shift + Tab</code> 打开上一个<br><br><code>Command + K P</code> 复制当前文件路径<br><br><code>Command + K R</code> 在资源管理器中查看当前文件<br><br><code>Command + K O</code> 新窗口打开当前文件<br></p><ul><li>显示</li></ul><p><code>Command + Ctrl + F</code> 全屏、退出全屏<br><br><code>Command + Option + 1</code> 切换编辑器分屏方式（横、竖）<br><br><code>Command + +</code> 放大<br><br><code>Command + -</code> 缩小<br><br><code>Command + B</code> 显示、隐藏侧边栏<br><br><code>Command + Shift + E</code> 显示资源管理器 或 切换焦点<br><br><code>Command + Shift + F</code> 显示搜索框<br><br><code>Ctrl + Shift + G</code> 显示Git面板<br><br><code>Command + Shift + D</code> 显示调试面板<br><br><code>Command + Shift + X</code> 显示插件面板<br><br><code>Command + Shift + H</code> 全局搜索替换<br><br><code>Command + Shift + J</code> 显示、隐藏高级搜索<br><br><code>Command + Shift + C</code> 打开新终端<br><br><code>Command + Shift + U</code> 显示输出面板<br><br><code>Command + Shift + V</code> Markdown预览窗口<br><br><code>Command + K V</code> 分屏显示 Markdown预览窗口<br></p><ul><li>调试</li></ul><p><code>F9</code> 设置 或 取消断点<br><br><code>F5</code> 开始 或 继续<br><br><code>F11</code> 进入<br><br><code>Shift + F11</code> 跳出<br><br><code>F10</code> 跳过<br><br><code>Command + K Command + I</code> 显示悬停信息<br></p><ul><li>集成终端</li></ul><p>Ctrl + ` 显示终端 Ctrl + Shift +` 新建终端<br><br><code>Command + Up</code> 向上滚动<br><br><code>Command + Down</code> 向下滚动<br><br><code>PgUp</code> 向上翻页<br><br><code>PgDown</code> 向下翻页<br><br><code>Command + Home</code> 滚动到顶部<br><br><code>Command + End</code> 滚动到底部<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mac-os下vscode快捷键&quot;&gt;&lt;a href=&quot;#mac-os下vscode快捷键&quot; class=&quot;headerlink&quot; title=&quot;mac os下vscode快捷键&quot;&gt;&lt;/a&gt;mac os下vscode快捷键&lt;/h1&gt;&lt;h3 id=&quot;全局&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/editor/vsCode/README/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/editor/vsCode/README/</id>
    <published>2019-06-12T07:21:24.897Z</published>
    <updated>2019-06-12T07:21:24.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode-配置"><a href="#vscode-配置" class="headerlink" title="vscode 配置"></a>vscode 配置</h1><p>安装插件：</p><p>配置：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"editor.fontSize"</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">"editor.tabSize"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"files.associations"</span>: &#123;</span><br><span class="line">    <span class="attr">"*.vue"</span>: <span class="string">"vue"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"files.autoSave"</span>: <span class="string">"onFocusChange"</span>,</span><br><span class="line">  <span class="attr">"docthis.authorName"</span>: <span class="string">"royalu"</span>,</span><br><span class="line">  <span class="attr">"docthis.includeAuthorTag"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.validate"</span>: [</span><br><span class="line">    <span class="string">"javascript"</span>,</span><br><span class="line">    <span class="string">"javascriptreact"</span>,</span><br><span class="line">    <span class="string">"html"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"eslint.options"</span>: &#123;</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">      <span class="string">"html"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"beautify.language"</span>: &#123;</span><br><span class="line">    <span class="attr">"js"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: [</span><br><span class="line">        <span class="string">"javascript"</span>,</span><br><span class="line">        <span class="string">"json"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"filename"</span>: [</span><br><span class="line">        <span class="string">".jshintrc"</span>,</span><br><span class="line">        <span class="string">".jsbeautify"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"css"</span>: [</span><br><span class="line">      <span class="string">"css"</span>,</span><br><span class="line">      <span class="string">"scss"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"html"</span>: [</span><br><span class="line">      <span class="string">"htm"</span>,</span><br><span class="line">      <span class="string">"html"</span>,</span><br><span class="line">      <span class="string">"cshtml"</span>,</span><br><span class="line">      <span class="string">"vue"</span> //在这里加上vue</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\Program Files\\Git\\bin\\bash.exe"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>快捷键：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">// 将按键绑定配置放入此文件中即可覆盖默认值</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+d"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-editor.action.addSelectionToNextFindMatch"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+d"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.copyLinesDownAction"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"shift+alt+down"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-editor.action.copyLinesDownAction"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+down"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-problems.action.focusProblemsFromFilter"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"problemsFilterFocus"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+down"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-scrollLineDown"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"textInputFocus"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+down"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-search.focus.nextInputBox"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"inputBoxFocus &amp;&amp; searchViewletVisible"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+down"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-selectNextSuggestion"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"suggestWidgetMultipleSuggestions &amp;&amp; suggestWidgetVisible &amp;&amp; textInputFocus"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+down"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.moveLinesDownAction"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+down"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-editor.action.moveLinesDownAction"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+up"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-scrollLineUp"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"textInputFocus"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+up"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-search.action.focusSearchFromResults"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"firstMatchFocus &amp;&amp; searchViewletVisible"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+up"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-search.focus.previousInputBox"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"inputBoxFocus &amp;&amp; searchViewletVisible &amp;&amp; !searchInputBoxFocus"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+up"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-selectPrevSuggestion"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"suggestWidgetMultipleSuggestions &amp;&amp; suggestWidgetVisible &amp;&amp; textInputFocus"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+up"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.moveLinesUpAction"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+up"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-editor.action.moveLinesUpAction"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+a"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.formatDocument"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"shift+alt+f"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-editor.action.formatDocument"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+q"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.changeAll"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+f2"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-editor.action.changeAll"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+m"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-editor.action.toggleTabFocusMode"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+m"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"markdown.showPreviewToSide"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorLangId == 'markdown'"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+k v"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-markdown.showPreviewToSide"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorLangId == 'markdown'"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vscode-配置&quot;&gt;&lt;a href=&quot;#vscode-配置&quot; class=&quot;headerlink&quot; title=&quot;vscode 配置&quot;&gt;&lt;/a&gt;vscode 配置&lt;/h1&gt;&lt;p&gt;安装插件：&lt;/p&gt;
&lt;p&gt;配置：&lt;br&gt;&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/editor/subline_text/README/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/editor/subline_text/README/</id>
    <published>2019-06-12T07:21:24.819Z</published>
    <updated>2019-06-12T07:21:24.819Z</updated>
    
    <content type="html"><![CDATA[<p>#<a href="http://www.sublimetext.com/dev" target="_blank" rel="noopener">sublime text Download</a><br><img src="http://images.cnitblog.com/blog/100150/201212/30105834-adb210004ed5468b9f67e5384225a46d.png" alt><br>        改版过的<a href="http://pan.baidu.com/s/1qWr9v56" target="_blank" rel="noopener">Monokai</a> 密码: siem 代码着色，及相关资源。</p><h2 id="两步实现在Git-Bash中用Sublime打开文件"><a href="#两步实现在Git-Bash中用Sublime打开文件" class="headerlink" title="两步实现在Git Bash中用Sublime打开文件"></a>两步实现在Git Bash中用Sublime打开文件</h2><p>每次都要用鼠标点来点去才能用sublime打开文件！太不科学！今天来配置一下在Git bash中用sublime打开文件:<br>设置方法：</p><pre><code>新建一个文件命名为你想要的命令，比如 sblm（注意不能有后缀名），内容：#!/bin/sh&quot;C:\Program Files\Sublime Text 3\sublime_text.exe&quot; $1 &amp;第一行是说这是个 shell 脚本第二行的字符串是sublime 的安装目录注意这里要输入你自己的目录第二行的$1 是取的命令之后输入的参数第二行的&amp;是此命令在后台打开，这样sublime打开之后，就不会阻塞你的git bash</code></pre><p>保存到 C:\Program Files (x86)\Git\mingW32\bin 目录下(你的git目录可能与我的不一样，注意改成你自己的)</p><p>大功告成~</p><p>使用方法：</p><pre><code>sblm xxx</code></pre><p>如果xxx已存在，则打开已存在的文件，如果不存在则打开新文件命名为xxx。</p><p><strong>扩展：</strong></p><p>不光是sublime，感觉用这种方法我们就可以设置更多了，比如用chrome打开.html文件等等。 </p><p>转自： <a href="http://blog.csdn.net/weixin_35955795/article/details/54880336" target="_blank" rel="noopener">http://blog.csdn.net/weixin_35955795/article/details/54880336</a></p><h2 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h2><ul><li>大城小胖 <a href="http://v.youku.com/v_show/id_XMzU5NzQ5ODgw.html" target="_blank" rel="noopener">视频介绍</a></li><li>happypeter <a href="http://www.imooc.com/learn/333" target="_blank" rel="noopener">快乐的sublime编辑器</a></li><li>GreenBoots <a href="http://www.imooc.com/learn/40" target="_blank" rel="noopener">前端开发工具技巧介绍—Sublime篇</a></li></ul><h2 id="QQ-Group"><a href="#QQ-Group" class="headerlink" title="QQ Group"></a>QQ Group</h2><ul><li>492107297 偏前端开发(css,javascript,jquery)</li></ul><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>原则上收费的，但可以试用，试用期是免费的，在试用期间会提示你购买。</p><h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p>插件有很多，但不建议全部都安装，用到那个安装那个，安装过多，由于插件质量良莠不齐，会使软件本身不稳定，经常挂掉。</p><ol><li><p><a href="https://github.com/emmetio/emmet" target="_blank" rel="noopener">Emmet Git</a>，<a href="http://docs.emmet.io/" target="_blank" rel="noopener">Document</a>原名为：<code>Zencoding, 快速生成html,css</code>，默认扩展快捷为<code>tab</code>，如果<code>tab</code>按钮损坏，<code>ctrl+e</code>替换。<br>生成规则在：</p><p>   Preferences -&gt; Browser packages -&gt; Emment -&gt; emment -&gt; snippets.json<br>中修改。</p><p><a href="http://www.iteye.com/news/27580" target="_blank" rel="noopener">@ Emmet 中文版文档</a></p></li><li><a href="https://github.com/titoBouzout/SideBarEnhancements" target="_blank" rel="noopener">Side Bar</a><code>增强的侧边栏</code></li><li><a href="https://github.com/spadgos/sublime-jsdocs" target="_blank" rel="noopener">Docblockr</a><code>增强js注释</code></li><li><p><a href="https://github.com/wbond/sublime_alignment" target="_blank" rel="noopener">Alignment</a><code>等号对齐</code><br>在<code>Preferences -&gt; package settings -&gt; Alignment -&gt; Settings User</code>添加冒号对齐。</p><pre><code>{ &quot;align_indent&quot;: false, &quot;alignment_chars&quot;: [&quot;=&quot;, &quot;:&quot;], &quot;alignment_space_chars&quot;: [&quot;=&quot;, &quot;:&quot;]}</code></pre></li><li><p><a href="https://github.com/BoundInCode/AutoFileName" target="_blank" rel="noopener">AutoFileName</a>: <code>文件路径自动提示</code></p></li><li><a href="https://github.com/akira-cn/sublime-gbk" target="_blank" rel="noopener">gbk支持 GBK Encoding Support</a></li><li><a href="http://www.welefen.com/keymapmanager-add-check-plugins-keymap-conflict-feature.html" target="_blank" rel="noopener">检测快捷键冲突</a></li><li><p>Markdown</p><ul><li><a href="https://github.com/revolunet/sublimetext-markdown-preview" target="_blank" rel="noopener">markdown</a></li><li><a href="http://www.tcreator.info/social/experience/markdown-to-pdf.html" target="_blank" rel="noopener">markdown 转为 pdf</a></li></ul></li><li><p><a href="https://github.com/SublimeText/LineEndings" target="_blank" rel="noopener">LineEndings 设置换行符</a></p></li><li><a href="https://sublime.wbond.net/" target="_blank" rel="noopener">SublimeText插件列表</a></li><li><a href="https://github.com/rehorn/sublime-htmlbeautify" target="_blank" rel="noopener">html美化插件</a></li><li><a href="http://www.fantxi.com/blog/archives/sublime-template-engine-sublimetmpl/" target="_blank" rel="noopener">Sublime Text 新建文件的模版插件: SublimeTmpl</a></li><li><a href="http://www.cnblogs.com/liu-l/p/3902100.html" target="_blank" rel="noopener">前端自动化神器LiveReload配合浏览器和less/sass使用方法</a></li><li><a href="http://www.cnblogs.com/yili16438/p/3721896.html" target="_blank" rel="noopener">使用 Sublime Text 2 开发 Unity3D 项目</a></li><li><a href="http://www.cnblogs.com/lhb25/p/10-essential-sublime-text-plugins.html" target="_blank" rel="noopener">全栈开发必备的10款 Sublime Text 插件</a></li><li><p>其它语言框架支持</p><ul><li><p>JavaScript</p><ul><li><a href="https://github.com/tanepiper/SublimeText-Nodejs" target="_blank" rel="noopener">nodejs snippets and bindings for Sublime Text 2</a></li><li><a href="https://github.com/angular-ui/AngularJS-sublime-package" target="_blank" rel="noopener">AngularJS-sublime-package</a></li><li><a href="https://github.com/gogoyqj/AvalonHelper" target="_blank" rel="noopener">avalon completion for sublime 3</a></li><li><a href="https://github.com/vuejs/vue-syntax-highlight" target="_blank" rel="noopener">Sublime Text highlighting for Vue.js</a></li><li><a href="https://github.com/facebookarchive/sublime-react" target="_blank" rel="noopener">Sublime Text helpers for React</a></li><li><a href="https://github.com/Microsoft/TypeScript-Sublime-Plugin" target="_blank" rel="noopener">TypeScript-Sublime-Plugin</a></li></ul></li><li><p>CSS</p><ul><li><a href="https://github.com/JasonMortonNZ/bs3-sublime-plugin" target="_blank" rel="noopener">Bootstrap 3 Snippets Plugin for Sublime Text 2/3</a></li><li><a href="https://github.com/jakebresnehan/Sublime-Super-Snippets" target="_blank" rel="noopener">Sublime Text代码片段收藏</a></li></ul></li><li><p>PHP</p><ul><li><a href="https://github.com/yangweijie/SublimeThinkPHP" target="_blank" rel="noopener">Thinkphp Sublime插件 显示优化，兼容St3版本)</a></li><li><a href="https://github.com/gnarula/sublime-laravelgenerator" target="_blank" rel="noopener">laravelgenerator</a></li><li><a href="https://github.com/Medalink/laravel-blade" target="_blank" rel="noopener">Laravel Blade Highlighter</a></li><li><a href="https://github.com/yangweijie/SublimePHPNinJaManual" target="_blank" rel="noopener">Sublime中的函数手册提示</a></li></ul></li><li><p>Nodejs</p><ul><li><a href="http://segmentfault.com/q/1010000004259136" target="_blank" rel="noopener">sublime3 配置node build环境</a></li></ul></li></ul></li><li><p>版本管理</p><ul><li><a href="https://github.com/kemayo/sublime-text-git" target="_blank" rel="noopener">git</a></li><li><a href="https://github.com/jikeytang/sublime-text.git" target="_blank" rel="noopener">git</a></li><li><a href="https://wbond.net/sublime_packages/svn" target="_blank" rel="noopener">svn</a></li><li><a href="https://wbond.net/sublime_packages/sftp" target="_blank" rel="noopener">ftp</a></li></ul></li><li><p><a href="https://github.com/colinta/SublimeFileDiffs" target="_blank" rel="noopener">文件比较</a></p></li><li><a href="https://github.com/flashlizi/cssrem" target="_blank" rel="noopener">CSS值转REM的Sublime Text插件</a></li><li><a href="https://github.com/vishr/local-history" target="_blank" rel="noopener">本地历史记录</a></li><li><a href="https://github.com/ihodev/sublime-file-icons" target="_blank" rel="noopener">目录树文件图标</a></li></ol><h2 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h2><ol><li>Font<br>推荐使用 <a href="http://code.google.com/p/uigroupcode/downloads/detail?name=YaHei.Consolas.1.12.zip&amp;can=2&amp;q=#makechanges" target="_blank" rel="noopener">YaHei.Consolas.1.12.ttf</a>，即为上图中所示字体。</li><li>Theme<ul><li>code style: 推荐使用这款<a href="http://code.google.com/p/uigroupcode/downloads/detail?name=Monokai.rar&amp;can=2&amp;q=#makechanges" target="_blank" rel="noopener">marktheme</a></li><li><a href="https://gist.github.com/1854721" target="_blank" rel="noopener">更换sidebar皮肤</a></li><li><a href="http://jamiewilson.io/predawn/" target="_blank" rel="noopener">分享一个sublime 主题 </a></li><li><a href="http://colorsublime.com/" target="_blank" rel="noopener">颜色配色</a></li><li><a href="https://github.com/ctf0/Seti_ST3" target="_blank" rel="noopener">针对 ST3 的皮肤</a></li><li><a href="https://github.com/kkga/spacegray" target="_blank" rel="noopener">A Hyperminimal UI Theme for Sublime Text</a></li><li><a href="https://github.com/zchen9/sublime-color-scheme/" target="_blank" rel="noopener">Customize color scheme for Sublime</a></li><li><a href="http://www.css88.com/archives/6340" target="_blank" rel="noopener">推荐一款很酷的 Sublime Text 主题 – ayu</a></li></ul></li><li><p>Preferences</p><ul><li><p>用户设置  Preferences -&gt; Settings - User</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"color_scheme"</span>        : <span class="string">"Packages/Color Scheme - Default/Monokai.tmTheme"</span>,    <span class="comment">// theme</span></span><br><span class="line"><span class="string">"draw_minimap_border"</span> : <span class="literal">true</span>,                                                 <span class="comment">// 右侧缩略图边框</span></span><br><span class="line"><span class="string">"font_face"</span>           : <span class="string">"YaHei Consolas Hybrid"</span>,                              <span class="comment">// 字体设置</span></span><br><span class="line"><span class="string">"font_size"</span>           : <span class="number">13</span>,                                                   <span class="comment">// 字体大小</span></span><br><span class="line"><span class="string">"highlight_line"</span>      : <span class="literal">true</span>,                                                 <span class="comment">// 当前行标亮</span></span><br><span class="line"><span class="string">"ignored_packages"</span>    :[<span class="string">"Toggle Css Format"</span>],                                <span class="comment">// 开启vim模式</span></span><br><span class="line"><span class="string">"save_on_focus_lost"</span>  : <span class="literal">true</span>,                                                 <span class="comment">// 失去焦点后保存</span></span><br><span class="line"><span class="string">"auto_complete"</span>       : <span class="literal">false</span>,                                                <span class="comment">// 失去焦点后保存</span></span><br><span class="line"><span class="string">"word_wrap"</span>           : <span class="literal">false</span>,                                                <span class="comment">// 强制不换行</span></span><br><span class="line"><span class="string">"word_separators"</span>     : <span class="string">"./\\()\"':,.;&lt;&gt;~!@#$%^&amp;*|+=[]&#123;&#125;`~?"</span>,                 <span class="comment">// 双击选中中划线</span></span><br><span class="line"><span class="string">"update_check"</span>        : <span class="literal">false</span>                                                 <span class="comment">// 关闭自动更新</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><pre><code>- 全屏设置 Preferences -&gt; Settings - More -&gt; Distraction Free - User    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="string">"line_numbers"</span>     : <span class="literal">true</span>,        <span class="comment">//是否显示行号</span></span><br><span class="line">       <span class="string">"gutter"</span>           : <span class="literal">true</span>,        <span class="comment">//是否显示边列</span></span><br><span class="line">       <span class="string">"draw_centered"</span>    : <span class="literal">true</span>,        <span class="comment">//是否居中显示</span></span><br><span class="line">       <span class="string">"wrap_width"</span>       : <span class="number">80</span>,          <span class="comment">//换行宽度(单位：字符)</span></span><br><span class="line">       <span class="string">"word_wrap"</span>        : <span class="literal">false</span>,       <span class="comment">//是否自动换行</span></span><br><span class="line">       <span class="string">"scroll_past_end"</span>  : <span class="literal">true</span>         <span class="comment">//滚动能否超过结尾</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>- Emmet css冒号后面的空格，在emmet-settings-default    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"preferences"</span>: &#123;</span><br><span class="line">    <span class="string">"css.valueSeparator"</span>: <span class="string">":"</span>,</span><br><span class="line">    <span class="string">"css.propertyEnd"</span>   : <span class="string">";"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- 修改的快捷键，完全向webstorm看齐，两个软件切换无缝。 Preferences -&gt; Key Bindings - User    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"ctrl+shift+c"</span>], <span class="string">"command"</span>: <span class="string">"copy_path"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"ctrl+shift+f"</span>], <span class="string">"command"</span>: <span class="string">"html_tidy"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"alt+f12"</span>], <span class="string">"command"</span>: <span class="string">"open_in_browser"</span> &#125;, <span class="comment">// ie</span></span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"f12"</span>], <span class="string">"command"</span>: <span class="string">"side_bar_files_open_with"</span>, <span class="comment">// firefox</span></span><br><span class="line">        <span class="string">"args"</span>: &#123;</span><br><span class="line">            <span class="string">"paths"</span>: [],</span><br><span class="line">            <span class="string">"application"</span>: <span class="string">"D:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe"</span>,</span><br><span class="line">            <span class="string">"extensions"</span>:<span class="string">".*"</span> <span class="comment">//any file with extension</span></span><br><span class="line">        &#125; &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"ctrl+f12"</span>], <span class="string">"command"</span>: <span class="string">"side_bar_files_open_with"</span>, <span class="comment">// firefox</span></span><br><span class="line">    <span class="string">"args"</span>: &#123;</span><br><span class="line">        <span class="string">"paths"</span>: [],</span><br><span class="line">        <span class="string">"application"</span>: <span class="string">"C:\\Users\\tony\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe"</span>,</span><br><span class="line">        <span class="string">"extensions"</span>:<span class="string">".*"</span> <span class="comment">//any file with extension</span></span><br><span class="line">    &#125; &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"`"</span>], <span class="string">"command"</span>: <span class="string">"toggle_distraction_free"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"alt+c"</span>], <span class="string">"command"</span>: <span class="string">"run_macro_file"</span>, <span class="string">"args"</span>: &#123;<span class="string">"file"</span>: <span class="string">"Packages/Default/Delete Line.sublime-macro"</span>&#125; &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"alt+w"</span>], <span class="string">"command"</span>: <span class="string">"toggle_comment"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"alt+f3"</span>], <span class="string">"command"</span>: <span class="string">"htmlprettify"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"ctrl+d"</span>], <span class="string">"command"</span>: <span class="string">"duplicate_line"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"ctrl+shift+d"</span>], <span class="string">"command"</span>: <span class="string">"find_under_expand"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"ctr+shift+w"</span>], <span class="string">"command"</span>: <span class="string">"close"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"ctrl+w"</span>], <span class="string">"command"</span>: <span class="string">"find_under_expand"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"alt+d"</span>], <span class="string">"command"</span>: <span class="string">"open_dir"</span>, <span class="string">"args"</span>: &#123;<span class="string">"dir"</span>: <span class="string">"$file_path"</span>, <span class="string">"file"</span>: <span class="string">"$file_name"</span>&#125; &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"shift+enter"</span>], <span class="string">"command"</span>: <span class="string">"run_macro_file"</span>, <span class="string">"args"</span>: &#123;<span class="string">"file"</span>: <span class="string">"Packages/Default/Add Line.sublime-macro"</span>&#125; &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"ctrl+enter"</span>], <span class="string">"command"</span>: <span class="string">"run_macro_file"</span>, <span class="string">"args"</span>: &#123;<span class="string">"file"</span>: <span class="string">"Packages/Default/Add Line Before.sublime-macro"</span>&#125; &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"alt+right"</span>], <span class="string">"command"</span>: <span class="string">"next_view"</span> &#125;, <span class="comment">// 下一个标签</span></span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"alt+left"</span>], <span class="string">"command"</span>: <span class="string">"prev_view"</span> &#125;, <span class="comment">// 上一个标签</span></span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"alt+1"</span>], <span class="string">"command"</span>: <span class="string">"toggle_side_bar"</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></code></pre><ol start="4"><li><a href="http://baelabs.duapp.com/Sublime/indentation.html" target="_blank" rel="noopener">定制缩进</a></li><li><a href="http://baelabs.duapp.com/Sublime/spell_checking.html" target="_blank" rel="noopener">拼写检查</a></li><li><a href="http://baelabs.duapp.com/Sublime/distraction_free.html" target="_blank" rel="noopener">全屏模式，自由模式的定制</a></li><li><a href="http://www.cnblogs.com/jikey/archive/2013/03/12/2955230.html" target="_blank" rel="noopener">在sublime-text中设置浏览器预览</a></li><li><a href="http://baelabs.duapp.com/Sublime/settings.html" target="_blank" rel="noopener">其它配置</a></li><li><p>预览设置</p><ul><li><p><a href="http://www.pixelstech.net/article/1445261721-Add-Sublime-Text-to-your-context-menu-on-right-click" target="_blank" rel="noopener">配置sublime右键打开</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">SET sublimeTextPath=C:\Program Files\Sublime Text 3\sublime_text.exe</span><br><span class="line"> </span><br><span class="line">REM ADD REGISTRY KEYS</span><br><span class="line">@reg add "HKEY_CLASSES_ROOT\*\shell\Open with Sublime Text 3"         /t REG_SZ /v "" /d "Open with Sublime Text 3"   /f</span><br><span class="line">@reg add "HKEY_CLASSES_ROOT\*\shell\Open with Sublime Text 3"         /t REG_EXPAND_SZ /v "Icon" /d "%sublimeTextPath%,0" /f</span><br><span class="line">@reg add "HKEY_CLASSES_ROOT\*\shell\Open with Sublime Text 3\command" /t REG_SZ /v "" /d "%sublimeTextPath% \"%%1\"" /f</span><br><span class="line"> </span><br><span class="line">pause</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><a href="http://www.hongkiat.com/blog/preview-in-localhost/" target="_blank" rel="noopener">localhost设置打开</a></li><li><a href="http://jingyan.baidu.com/article/15622f2419ce79fdfcbea5ea.html" target="_blank" rel="noopener">Sublime Text 3 配置浏览器预览路径 localhost</a></li></ul><ol start="10"><li><a href="http://blog.sina.com.cn/s/blog_aef7731b01018cnx.html" target="_blank" rel="noopener">st开启全屏之后的设置</a> </li><li><p>React相关</p><ul><li><a href="http://www.jianshu.com/p/89771e8bcee5" target="_blank" rel="noopener">React-navite 实战系列教程之 （开发工具篇）</a> </li><li><a href="https://gist.github.com/neilcarpenter/8979ea9ed91b10e36af9" target="_blank" rel="noopener">Enable Emmet in .JSX files, using Babel JSX Syntax highlighter</a> </li><li><a href="https://gist.github.com/max-mykhailenko/41d0c3991d92f38dcbc6" target="_blank" rel="noopener">Sublime text 3. Enable Emmet in JSX files</a> </li></ul></li></ol><h2 id="Skill"><a href="#Skill" class="headerlink" title="Skill"></a>Skill</h2><ol><li>按住 <code>ctrl</code> 键，鼠标单击就是多重选择。</li><li><a href="http://baelabs.duapp.com/Sublime/multiple_selection_with_the_keyboard.html" target="_blank" rel="noopener">键盘多重选择</a></li><li>根据选择文本自动添加 ‘, “”,(),[] 匹配。    </li><li>搜索按钮的功能说明 (冷风贡献)：<br> <img src="http://e.hiphotos.baidu.com/album/pic/item/77094b36acaf2edd9ffd46a08c1001e93901936e.jpg">    </li><li><a href="http://www.jianshu.com/p/e92a52770832" target="_blank" rel="noopener">使用 Sublime + PlantUML 高效地画图</a></li></ol><h2 id="Default-Keymap"><a href="#Default-Keymap" class="headerlink" title="Default Keymap"></a>Default Keymap</h2><pre><code>1. Ctrl+L             选择整行（按住-继续选择下行） 2. Ctrl+Shift+K(shhift+del)     删除整行，  ctrl + KK 从光标处删之行尾，Ctrl+K Backspace 从光标处删除至行首3. Ctrl+Shift+D       复制光标所在整行，插入在该行之前  4. Ctrl+D             选词 （按住-继续选择下个相同的字符串，再按，可跳到相应的方法定义处5. Ctrl+Shift+M       选择括号内的内容（按住-继续选择父括号） 6. Ctrl+/             注释整行（如已选择内容，同“Ctrl+Shift+/”效果）7. Ctrl + alt + /     取消注释 8. Ctrl+Shift+UP      与上行互换  ctrl + shift + up: 列模式编辑  9. Ctrl + R           跳转当前页的目标方法10. Ctrl+K + U        大写11. Ctrl+K + L        小写12. 鼠标中间           列模式编辑13. Ctrl+Shift+[]     代码折叠14. ctrl+k ctrl+1:    折叠所有代码 15. Ctrl + K,B        打开侧边栏16. ctrl + 回车：　　   光标后插入行，　Ctrl+Shift+Enter 光标前插入行17. ctrl + m:         匹配括号18. vim mode下        查找上一个下一个的快捷键是 是* #19. ctrl +z, y:       撤销，恢复撤销20. alt + .:          闭合当前标签21. Ctrl+F2:          设置书签22. F2:               下一个书签23. Shift+F2:         上一个书签24. ctrl + p:         即时的文件切换25. ctrl + shift + a: 选择标签内的内容 26. ctrl + 单击：      多行随意位置添加光标27. alt + F3( mac: ctrl + command + g): 选择页面中所有相同的词28. ctrl + F3:        跳转到下一个选中的词    29. Ctrl+Shift+P Set Syntax:html : 设置文件类型30. Shift + 右键:     连续多行光标选中 (by Gary Gauh)</code></pre><h2 id="Emmet-zencoding-Keymap"><a href="#Emmet-zencoding-Keymap" class="headerlink" title="Emmet(zencoding) Keymap"></a>Emmet(zencoding) Keymap</h2><pre><code>1. match_pair_outward: ctrl+,向外匹配2. match_pair_inward: ctrl+alt+,向内匹配3. matching_pair: ctrl+alt+j，快速匹配html标签(phpstorm: ctrl + [])4. split_join_tag: shift+ctrl+`，快速成对修改html标签5. remove_tag: shift+ctrl+;删除包裹的html标签(phpstorm: ctrl + shift + del)6. increment_number_by_1: ctrl+up,数字快速增长,步长为17. decrement_number_by_1: ctrl+down,数字快速递减,步长为18. increment_number_by_01: alt+up,数字快速增长,步长为0.19. decrement_number_by_01: alt+down,数字快速递减,步长为0.110. increment_number_by_10:shift+alt+up,数字快速增长,步长为1011. decrement_number_by_10: shift+alt+down,数字快速递减,步长为1012. select_next_item:shift+ctrl+. 选择下一个属性13. select_previous_item: shift+ctrl+,, 选择上一个属性 14. wrap_as_you_type: shift+ctrl+g,包裹内容</code></pre><h2 id="VIM-Keymap"><a href="#VIM-Keymap" class="headerlink" title="VIM Keymap"></a>VIM Keymap</h2><p>sublime 支持 VIM 80% 左右的快捷键，以实际为准。</p><pre><code>一. 移动：    h,j,k,l: 左，下，上，右。    w: 下一个词的词首。W:下一个单词(不含标点)。    e:下一个词的词尾。E:不含标点。    b:上一个词的词首。B:不含标点。    &lt;&gt;: v 模式选中后进行缩进。    &gt;&gt;&lt;&lt;:向前向后缩进。 二. 跳转：    %: 可以匹配{},&quot;&quot;,(),[]之间跳转。    H、M、L：直接跳转到当前屏幕的顶部、中部、底部。    #H：跳转到当前屏的第#行。    #L：跳转到当前屏的倒数第#行。    zt: 当前编辑行置为屏顶。    zz: 当前编辑行置为屏中。    zb: 当前编辑行置为屏底。    G：直接跳转到文件的底部。    gg: 跳转到文件首。    gd: 跳转到光标所在函数和变量的定义。    ():跳转到当前的行首、行尾。    {}：向上、向下跳转到最近的空行。    [{：跳转到目前区块开头。    ]}：跳转到目前区块结尾。    0: 跳转到行首。    $: 跳转到行尾。    2$: 跳转到下一行的行尾。    #：跳转到该行的第#个位置。    #G: 15G,跳转到15行。    :#：跳转到#行。    f&apos;n&apos;：跳转到下一个&quot;n&quot;字母后。    ctrl+b: 向后翻一页。    ctrl+f：向前翻一页。    ctrl+u: 向后翻半页。    ctrl+d: 向前翻半页。    ctry+e: 下滚一行。三. 选择：    1.v: 开启可视模式。 V: 开启逐行可视模式。    2.^V: 矩形选择。    3.v3w: 选择三个字符。      4.ab：包括括号和()内的区域。    5.aB：包括括号和{}内的区域。    6.ib：括号()内的区域。    7.iB：括号{}内的区域。    8.aw：标记一个单词。四. 编辑：    1. 新增：        i: 光标前插入。        I: 在当前行首插入。        a: 光标后插入。        A: 当前行尾插入。        O: 在当前行之前插入新行。        o: 在当前行之后插入新行。    2. 修改 c(change) 为主：        r: 替换光标所在处的字符。        R：替换光标所到之处的字符。        cw: 更改光标所在处的字到字尾处。        c#w: c3w 修改3个字符。        C：修改到行尾。        ci&apos;：修改配对标点符号中的文本内容。        di&apos;：删除配对标点符号中的文本内容。        yi&apos;：复制配对标点符号中的文本内容。        vi&apos;：选中配对标点符号中的文本内容。        s：替换当前一个光标所处字符。        #S：删除 # 行，并以新文本代替。    3. 删除 d(delete) 为主：        D：删除到行尾。        X: 每按一次，删除光标所在位置的前面一个字符。        x: 每按一次，删除光标所在位置的后面一个字符。        #x: 删除光标所在位置后面6个字符。        d^: 删至行首。        d$: 删至行尾。        dd:(剪切)删除光标所在行。                dw: 删除一个单词/光标之后的单词剩余部分。        d4w: 删除4个word。        #dd: 从光标所在行开始删除#行。        daB: 删除{}及其内的内容。        diB: 删除{}中的内容。        n1,n2 d：将n1,n2行之间的内容删除。    4. 查找：        /： 输入关键字，发现不是要找的，直接在按n，向后查找直到找到为止。        ?： 输入关键字，发现不是要找的，直接在按n，向前查找直到找到为止。        *: 在当前页向后查找同一字。        #: 在当前页向前查找同一字。    5. 复制 y(yank)为主：        yw: 将光标所在之处到字尾的字符复制到缓冲区中。        #yw: 复制#个字到缓冲区。        Y：相当于yy, 复制整行。        #yy:表示复制从光标所在的该行往下数#行文字。        p: 粘贴。所有与y相关的操作必用p来结合粘贴。        ]p：粘贴到合适的缩进处。        n1,n2 co n3：复制第n1行到第n2行之间的内容到第n3行后面。    6. 大小写转换：        gUU: 将当前行的字母改为大写。        guu: 将当前行的字母改为小写。        gUw: 将当前光标下的单词改为大写。        guw: 将当前光标下的单词改为小写。        a. 整篇大写:        ggguG        gg: 光标到文件第一个字符。        gu: 把选择范围全部小写。        G: 到文件结束。        b. 整篇小写：gggUG    7.  其它：        J：当前行和下一行合并成一行。    8.  移动：        n1,n2 m n3：将n1行到n2行之间的内容移至n3行下。五.退出：     1. w filename: 保存正在编辑的文件filename     2. wq filename: 保存后退出正在编辑的文件filename     3. q：退出不保存。六.窗口操作：     1. ctrl+w p: 在两个分割窗口之间来回切换。     2. ctrl+w j: 跳到下面的分割窗     3. ctrl+w h: 跳到左边的分割窗。     4. ctrl+w k: 跳到上面的分割窗。     5. ctrl+w l: 跳到右边的分割窗。七.折叠：    zo 將游標所在處的折疊打開。open。    zc 將游標所在處已打開的內容再度折疊起來。close。    zr 將全文的所有折疊依層次通通打開。reduce。    zm 將全文已打開的折疊依層次通通再折疊起來。more。    zR 作用和 zr 同，但會打開含巢狀折疊（折疊中又還有折疊）的所有折疊。    zM 作用和 zm 同，但對於巢狀折疊亦有作用。    zi 這是個切換，是折疊與不折疊指令間的切換。    zn 打開全文的所有折疊。fold none。    zN 這是 zn 的相對指令，回復所有的折疊。</code></pre><h2 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h2><ul><li>非官方文档：<a href="https://sublime-text-unofficial-documentation.readthedocs.org/en/latest/" target="_blank" rel="noopener">Unofficial Document英文版</a></li><li><a href="http://sublime-undocs-zh.readthedocs.org/en/latest/index.html" target="_blank" rel="noopener">Unofficial Document中文版</a></li><li>sublime <a href="http://www.feelcss.com/sublime-text-2-settings.html" target="_blank" rel="noopener">配置详解</a></li><li>sublime <a href="http://baelabs.duapp.com/Sublime/" target="_blank" rel="noopener">其它文档</a></li></ul><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ul><li><p>如何安装插件？</p><ol><li>直接安装<br>可以去github下载安装包解压缩到Packages目录（菜单-&gt;preferences-&gt;packages）。</li><li>利用package，在安装插件之前先安装package <a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">packagecontrol 安装</a><br>如果在Perferences-&gt;package settings中看到package control这一项，则安装成功。</li><li>用Package Control安装插件的方法：<br>按下Ctrl+Shift+P调出命令面板，输入install，出现Install Package 选项并回车，然后在列表中选中要安装的插件或者直接输入需要安装插件的名称，比如Emmet。</li></ol></li><li><p>如何删除安装的插件？</p><ol><li>ctr+shift+P,输入package</li><li>查找remove package</li><li>输入你要删除的package</li><li>回车，OK</li></ol></li><li><p>百度输入造成sublime闪退(感谢<a href="https://github.com/leohxj" target="_blank" rel="noopener">leohxj</a>提供)<br>如果同时安装这两个软件，会造成sublime闪退，原因不详。但是测试过，是百度输入法的原因。希望能把这条信息加入到Wiki中，让更多人知道。</p></li><li><p>Emmet tab失效问题</p><ul><li><a href="http://jingyan.baidu.com/article/aa6a2c14d5177f0d4d19c45f.html" target="_blank" rel="noopener">Sublime报please wait a bit while pyV8 binary</a></li><li><a href="http://www.jianshu.com/p/0862e754cf15" target="_blank" rel="noopener">Sublime Text 3 解决Emmet失效的问题</a></li><li><a href="http://www.csdn123.com/html/itweb/20130915/119877_119876_119883.htm" target="_blank" rel="noopener">关于Sublime text 2中Emmet的安装 _html:xt无效</a></li></ul></li></ul><h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><ul><li><a href="http://www.zhihu.com/topic/19668076" target="_blank" rel="noopener">sublime text zhihu专题</a></li><li><a href="https://github.com/martomo/SublimeTextXdebug" target="_blank" rel="noopener">xdebug调试</a></li><li><a href="http://baelabs.duapp.com/Sublime%20text3" target="_blank" rel="noopener">sublimetext 3.0文档</a></li><li><a href="http://www.cnblogs.com/bananaplan/p/Sublime-Text-3-Powerful.html" target="_blank" rel="noopener">Sublime Text 3 绝对神器</a></li><li><a href="http://docs.sublimetext.tw/" target="_blank" rel="noopener">SublimeText手册-tw</a></li><li><a href="http://code-tech.diandian.com/post/2012-11-10/40041273125" target="_blank" rel="noopener">怎样从直接Github的repository安装Sublime Text插件</a></li><li><a href="http://code-tech.diandian.com/post/2012-11-14/40041132753" target="_blank" rel="noopener">Sublime text2的ThinkPHP插件</a></li><li><a href="http://code-tech.diandian.com/post/2012-11-14/40042622351" target="_blank" rel="noopener">Ubuntu 下Sublime Text 2 输入中文解决方法</a></li><li><a href="http://code-tech.diandian.com/post/2012-11-16/40042306130" target="_blank" rel="noopener">如何开发Sublime Text2插件_衍生篇</a></li><li><a href="http://code-tech.diandian.com/post/2012-11-16/40042845471" target="_blank" rel="noopener">用sublime构建phonegap项目</a></li><li><a href="http://code-tech.diandian.com/post/2012-11-16/40041334087" target="_blank" rel="noopener">超级牛B编码王（二）：Sublime2之Zencoding快速上手</a></li><li><a href="http://code-tech.diandian.com/post/2012-11-21/40042403501" target="_blank" rel="noopener">sublime text 左侧菜单美化1</a></li><li><a href="http://code-tech.diandian.com/post/2012-11-29/40043724758" target="_blank" rel="noopener">在 Ubuntu 12 下安装 Sublime Text 2</a></li><li><a href="http://zh.lucida.me/blog/sublime-text-complete-guide/" target="_blank" rel="noopener">Sublime Text 全程指南</a></li><li><a href="http://www.cnblogs.com/figure9/p/sublime-text-complete-guide.html" target="_blank" rel="noopener">Sublime Text 全程指引 by Lucida</a></li><li><a href="http://www.zhihu.com/question/24896283" target="_blank" rel="noopener">sublime 有哪些使用技巧</a></li><li><a href="http://www.html-js.com/article/The-frontend-tool-Megamix" target="_blank" rel="noopener">前端工程师手中的Sublime Text</a></li><li><a href="http://blog.saymagic.cn/2015/06/20/write-blog-by-sublime.html" target="_blank" rel="noopener">Sublime 进阶使用</a></li><li><a href="http://info.9iphp.com/essential-sublime-text-javascript-plugins/" target="_blank" rel="noopener">JavaScript 开发者必备的10款 Sublime Text 插件</a></li><li><a href="https://github.com/HereChen/LogList/blob/master/sublimeLog.md" target="_blank" rel="noopener"> Sublime Text 学习日志</a></li><li><a href="http://www.52cik.com/2015/10/21/sublime-text-run-es6.html" target="_blank" rel="noopener">Sublime Text 之运行 ES6 (基于babel)</a></li><li><a href="http://code.tutsplus.com/" target="_blank" rel="noopener">sublime 英文教程</a></li><li><a href="https://github.com/liveNo/Sublime-Tutorial" target="_blank" rel="noopener">Sublime-Tutorial</a></li><li><a href="http://blog.csdn.net/chszs/article/details/8232051" target="_blank" rel="noopener">Sublime Text 2搭建Java开发环境</a></li><li><a href="http://yalishizhude.github.io/2015/10/20/sublime/" target="_blank" rel="noopener">高端唯有定制，把sublime打造成专属的IDE</a></li><li><a href="http://blog.jobbole.com/95933/" target="_blank" rel="noopener">如何优雅地使用 Sublime Text</a></li><li><a href="http://guowenfh.github.io/2015/12/26/SublimeText/" target="_blank" rel="noopener">一个前端程序猿的Sublime Text3的自我修养</a></li><li><a href="https://github.com/zhiqiang21/MyToolsConfig/blob/master/sublimeconfig/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%20sublime%20text%20%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%92%8C%E9%85%8D%E7%BD%AE.md" target="_blank" rel="noopener">前端开发sublimeconfig</a></li></ul><h2 id="SublimeText3"><a href="#SublimeText3" class="headerlink" title="SublimeText3"></a>SublimeText3</h2><ul><li><a href="http://vinta.ws/code/must-have-sublime-text-packages.html" target="_blank" rel="noopener">推荐给 Web Developer 的 Sublime Text 3 插件</a></li><li><a href="https://github.com/JasonMortonNZ/bs3-sublime-plugin" target="_blank" rel="noopener">Bootstrap 3 Snippets Plugin for Sublime Text 2/3</a></li><li><a href="http://frontenddev.org/article/sublime-does-text-3-plug-in-custom-emmet-grammatical-rules-in-order-to-quickly-bootstrap-output-component.html" target="_blank" rel="noopener">自定义Emmet语法规则以快速输出bootstrap组件</a></li><li><a href="http://www.zhihu.com/question/24029280/answer/30256243" target="_blank" rel="noopener">Sublime text 3 中文文件名显示方框怎么解决？</a></li><li><a href="https://cnodejs.org/topic/51ee453af4963ade0ebde85e" target="_blank" rel="noopener">win下Sublime Text 3开发 Nodejs</a></li><li><a href="http://blog.csdn.net/wolinxuebin/article/details/41049551" target="_blank" rel="noopener">使用sublime Text 3进行java编程的一些总结</a></li><li><a href="http://dengo.org/archives/923" target="_blank" rel="noopener">Sublime Text 3能用支持的插件推荐</a></li><li><a href="http://blog.csdn.net/wolinxuebin/article/details/41049551" target="_blank" rel="noopener">使用sublime Text 3进行java编程的一些总结</a></li><li><a href="https://scotch.io/bar-talk/best-of-sublime-text-3-features-plugins-and-settings" target="_blank" rel="noopener">sublime text3 设置专题</a></li><li><a href="http://gold.xitu.io/entry/56c40cacdf0eea0053199335" target="_blank" rel="noopener">Sublime Text 3 最好的功能、插件和设置</a></li><li><a href="http://www.cnblogs.com/manfredHu/p/4941307.html" target="_blank" rel="noopener">SublimeText3常用快捷键和优秀插件（亲测）</a></li></ul><h2 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h2><ul><li><code>jikeytang#gmail.com</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#&lt;a href=&quot;http://www.sublimetext.com/dev&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sublime text Download&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://images.cnitblog.co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/editor/subline_text/sublime-settings/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/editor/subline_text/sublime-settings/</id>
    <published>2019-06-12T07:21:24.819Z</published>
    <updated>2019-06-12T07:21:24.819Z</updated>
    
    <content type="html"><![CDATA[<p> // While you can edit this file, it’s best to put your changes in<br> // “User/Preferences.sublime-settings”, which overrides the settings in here.<br> // Settings may also be placed in file type specific options files, for<br> // example, in Packages/Python/Python.sublime-settings for python files.<br> {<br>   // Sets the colors used within the text area </p><p>   主题文件的路径</p><pre><code>&quot;color_scheme&quot;: &quot;Packages/Color Scheme - Default/Monokai.tmTheme&quot;,  </code></pre><p>   // Note that the font_face and font_size are overriden in the platform<br>   // specific settings file, for example, “Preferences (Linux).sublime-settings”.<br>   // Because of this, setting them here will have no effect: you must set them<br>   // in your User File Preferences.  </p><p>   设置字体和大小，必须在Settings-User里重写，这里设置没有任何效果   </p><pre><code>&quot;font_face&quot;: &quot;Consolas&quot;,&quot;font_size&quot;: 12,</code></pre><p>   // Valid options are “no_bold”, “no_italic”,     “no_antialias”, “gray_antialias”,<br>   // “subpixel_antialias” and “no_round” (OS X only)<br>   // 字体选项：no_bold不显示粗体字，no_italic不显示斜体字，no_antialias和no_antialias关闭反锯齿<br>   // subpixel_antialias和no_round是OS X系统独有的     </p><pre><code>&quot;font_options&quot;: [],</code></pre><p>  在文字上双击会全选当前的内容，如果里面出现以下字符，就会被截断</p><pre><code>&quot;word_separators”: “./()\”‘-:,.;~!@#$%^&amp;*|+=[]{}`~?&quot;,</code></pre><p>   是否显示行号</p><pre><code>&quot;line_numbers&quot;: true,</code></pre><p>   是否显示行号边栏</p><pre><code>&quot;gutter&quot;: true,</code></pre><p>   行号边栏和文字的间距</p><pre><code>&quot;margin&quot;: 4,</code></pre><p>   是否显示代码折叠按钮</p><pre><code>&quot;fold_buttons&quot;: true,</code></pre><p>   不管鼠标在不在行号边栏，代码折叠按钮一直显示</p><pre><code>&quot;fade_fold_buttons&quot;: true,</code></pre><p>   列显示垂直标尺，在中括号里填入数字，宽度按字符计算</p><pre><code>&quot;rulers&quot;: [],</code></pre><p>   是否打开拼写检查</p><pre><code>&quot;spell_check&quot;: false,</code></pre><p>   Tab键制表符宽度</p><pre><code>&quot;tab_size&quot;: 4,</code></pre><p>   设为true时，缩进和遇到Tab键时使用空格替代</p><pre><code>&quot;translate_tabs_to_spaces&quot;: false,</code></pre><p>  translate_tabs_to_spaces设置为true，Tab和Backspace的删除/插入作用于制表符宽度<br>  否则作用于单个空格</p><pre><code>&quot;use_tab_stops&quot;: true,</code></pre><p>   false时禁止在载入的时候检测制表符和空格</p><pre><code>&quot;detect_indentation&quot;: true,</code></pre><p>   按回车时，自动与制表位对齐</p><pre><code>&quot;auto_indent&quot;: true,</code></pre><p>   // Makes auto indent a little smarter, e.g., by indenting the next line<br>   // after an if statement in C. Requires auto_indent to be enabled.</p><p>   针对C语言的</p><pre><code>&quot;smart_indent&quot;: false,</code></pre><p>   需要启用auto_indent，第一次打开括号缩进时插入空格？（没测试出来效果…）</p><pre><code>&quot;indent_to_bracket&quot;: true,</code></pre><p>   显示对齐的白线是否根据回车、tab等操作自动填补</p><pre><code>&quot;trim_automatic_white_space&quot;: true,</code></pre><p>   是否自动换行，如果选auto，需要加双引号</p><pre><code>&quot;word_wrap&quot;: false,</code></pre><p>   设置窗口内文字区域的宽度</p><pre><code>&quot;wrap_width&quot;: 0,</code></pre><p>   防止被缩进到同一级的字换行</p><pre><code>&quot;indent_subsequent_lines&quot;: true,</code></pre><p>   如果没有定义过，则文件居中显示（比如新建的文件）</p><pre><code>&quot;draw_centered&quot;: false,</code></pre><p>   自动匹配引号，括号等</p><pre><code>&quot;auto_match_enabled&quot;: true,</code></pre><p>   拼写检查的单词列表路径</p><pre><code>&quot;dictionary&quot;: &quot;Packages/Language - English/en_US.dic&quot;,</code></pre><p>   代码地图的可视区域部分是否加上边框，边框的颜色可在配色方案上加入minimapBorder键</p><pre><code>&quot;draw_minimap_border&quot;: false,</code></pre><p>   突出显示当前光标所在的行</p><pre><code>&quot;highlight_line&quot;: false,</code></pre><p>   设置光标闪动方式<code>&quot;smooth&quot;, &quot;phase&quot;, &quot;blink&quot;, &quot;wide&quot; and &quot;solid&quot;</code>.</p><pre><code>&quot;caret_style&quot;: &quot;smooth&quot;,</code></pre><p>   是否特殊显示当前光标所在的括号、代码头尾闭合标记</p><pre><code>&quot;match_brackets&quot;: true,</code></pre><p>   设为false时，只有光标在括号或头尾闭合标记的两端时，match_brackets才生效</p><pre><code>&quot;match_brackets_content&quot;: true,</code></pre><p>   是否突出显示圆括号，match_brackets为true生效</p><pre><code>&quot;match_brackets_square&quot;: false,</code></pre><p>   是否突出显示大括号，match_brackets为true生效</p><pre><code>&quot;match_brackets_braces&quot;: false,</code></pre><p>   是否突出显示尖括号，match_brackets为true生效</p><pre><code>&quot;match_brackets_angle&quot;: false,</code></pre><p>   html和xml下突出显示光标所在标签的两端，影响HTML、XML、CSS等</p><pre><code>&quot;match_tags&quot;: true,</code></pre><p>   全文突出显示和当前选中字符相同的字符</p><pre><code>&quot;match_selection&quot;: true,</code></pre><p>   设置每一行到顶部，以像素为单位的间距，效果相当于行距</p><pre><code>&quot;line_padding_top&quot;: 1,</code></pre><p>   设置每一行到底部，以像素为单位的间距，效果相当于行距</p><pre><code>&quot;line_padding_bottom&quot;: 1,</code></pre><p>   // Set to false to disable scrolling past the end of the buffer.<br>   // On OS X, this value is overridden in the platform specific settings, so<br>   // you’ll need to place this line in your user settings to override it.</p><p>   设置为false时，滚动到文本的最下方时，没有缓冲区</p><pre><code>&quot;scroll_past_end&quot;: true,</code></pre><p>   // This controls what happens when pressing up or down when on the first<br>   // or last line.<br>   // On OS X, this value is overridden in the platform specific settings, so<br>   // you’ll need to place this line in your user settings to override it.</p><p>   设置成true，当光标已经在第一行时，再Up则到行首，如果光标已经在最后一行，再Down则跳到行尾</p><pre><code>&quot;move_to_limit_on_up_down&quot;: false,</code></pre><p>   按space或tab时，实际会产生白色的点（一个空格一个点）或白色的横线（tab_size设置的制表符的宽度），中状态下才能看到<br>   设置为none时，什么情况下都不显示这些点和线<br>   设置为selection时，只显示选中状态下的点和线<br>   设置为all时，则一直显示 </p><pre><code>&quot;draw_white_space&quot;: &quot;selection&quot;,</code></pre><p>   制表位的对齐白线是否显示，颜色可在主题文件里设置（guide，activeGuide，stackGuide）</p><pre><code>&quot;draw_indent_guides&quot;: true,</code></pre><p>   制表位的对齐白线，draw_normal为一直显示，draw_active为只显示当前光标所在的代码控制域</p><pre><code>&quot;indent_guide_options&quot;: [&quot;draw_normal&quot;],</code></pre><p>   为true时，保存文件时会删除每行结束后多余的空格</p><pre><code>&quot;trim_trailing_white_space_on_save&quot;: false,</code></pre><p>   为true时，保存文件时光标会在文件的最后向下换一行</p><pre><code>&quot;ensure_newline_at_eof_on_save&quot;: false,</code></pre><p>   切换到其它文件标签或点击其它非本软件区域，文件自动保存</p><pre><code>&quot;save_on_focus_lost&quot;: false,</code></pre><p>   编码时不能自动检测编码时，将自动检测ASCII, UTF-8 和 UTF-16</p><pre><code>&quot;fallback_encoding&quot;: &quot;Western (Windows 1252)&quot;,</code></pre><p>   默认编码格式</p><pre><code>&quot;default_encoding&quot;: &quot;UTF-8&quot;,</code></pre><p>   包含空字节的文件被打开默认为十六进制</p><pre><code>&quot;enable_hexadecimal_encoding&quot;: true,</code></pre><p>   // Determines what character(s) are used to terminate each line in new files.<br>   // Valid values are ‘system’ (whatever the OS uses), ‘windows’ (CRLF) and<br>   // ‘unix’ (LF only).     </p><p>   每一行结束的时候用什么字符做终止符</p><pre><code>&quot;default_line_ending&quot;: &quot;system&quot;,</code></pre><p>   设置为enabled时，在一个字符串间按Tab将插入一个制表符<br>   设置为true时，按Tab会根据前后环境进行代码自动匹配填补   </p><pre><code>&quot;tab_completion&quot;: true,</code></pre><p>   代码提示</p><pre><code>&quot;auto_complete&quot;: true,</code></pre><p>   代码提示的大小限制</p><pre><code>&quot;auto_complete_size_limit&quot;: 4194304,</code></pre><p>   代码提示延迟显示</p><pre><code>&quot;auto_complete_delay&quot;: 50,</code></pre><p>   代码提示的控制范围</p><pre><code>&quot;auto_complete_selector&quot;: &quot;source - comment&quot;,</code></pre><p>   触发代码提示的其他情况</p><pre><code>&quot;auto_complete_triggers&quot;: [       {&quot;selector&quot;: &quot;text.html&quot;, &quot;characters&quot;: &quot;&lt;&quot;} ],</code></pre><p>   设为false时，选择提示的代码按回车或点击可以输出出来，但选择true时不会输出而是直接换行</p><pre><code>&quot;auto_complete_commit_on_tab&quot;: false,</code></pre><p>   auto_complete_commit_on_tab必须为true，控制代码提示的活跃度</p><pre><code>&quot;auto_complete_with_fields&quot;: false,</code></pre><p>   设置为false，使用Shift + tab总是插入制表符</p><pre><code>&quot;shift_tab_unindent&quot;: true,</code></pre><p>   选中的文本按Ctrl + f时，自动复制到查找面板的文本框里</p><pre><code>&quot;find_selected_text&quot;: true,</code></pre><p>   DataPackagesTheme - DefaultDefault.sublime-theme控制软件的主题</p><pre><code>&quot;theme&quot;: &quot;Default.sublime-theme&quot;,</code></pre><p>   滚动的速度</p><pre><code>&quot;scroll_speed&quot;: 1.0,</code></pre><p>   左边边栏文件夹动画</p><pre><code>&quot;tree_animation_enabled&quot;: true,</code></pre><p>   标签页的关闭按钮<br>      “show_tab_close_buttons”: true,</p><p>   // OS X 10.7 only: Set to true to disable Lion style full screen support.<br>   // Sublime Text must be restarted for this to take effect.<br>   针对OS X</p><pre><code>&quot;use_simple_full_screen&quot;: false,</code></pre><p>   水平垂直滚动条：system和disabled为默认显示方式，enabled为自动隐藏显示 </p><pre><code>&quot;overlay_scroll_bars&quot;: &quot;system&quot;,</code></pre><p>   热推出功能！退出时不会提示是否保存文件，而是直接退出<br>   下次打开软件时，文件保持退出前的状态，没来得及保存的内容都在，但并没有真实的写在原文件里</p><pre><code>&quot;hot_exit&quot;: true,</code></pre><p>   软件使用最后的设定打开文件，hot_exit为true时没有效果</p><pre><code>&quot;remember_open_files&quot;: true,</code></pre><p>   // OS X only: When files are opened from finder, or by dragging onto the<br>   // dock icon, this controls if a new window is created or not.<br>   针对OS X</p><pre><code>&quot;open_files_in_new_window&quot;: true,</code></pre><p>   // there’s a folder open within the window. This is always enabled on OS X,<br>   // changing it here won’t modify the behavior.<br>   针对OS X</p><pre><code>&quot;close_windows_when_empty&quot;: true,</code></pre><p>   哪些文件会被显示到边栏上<br>   // project basis.</p><pre><code>&quot;folder_exclude_patterns&quot;: [&quot;.svn&quot;, &quot;.git&quot;, &quot;.hg&quot;, &quot;CVS&quot;],&quot;file_exclude_patterns&quot;: [&quot;*.pyc&quot;, &quot;*.pyo&quot;, &quot;*.exe&quot;, &quot;*.dll&quot;, &quot;*.obj&quot;,&quot;*.o&quot;, &quot;*.a&quot;, &quot;*.lib&quot;, &quot;*.so&quot;, &quot;*.dylib&quot;, &quot;*.ncb&quot;, &quot;*.sdf&quot;, &quot;*.suo&quot;, &quot;*.pdb&quot;, &quot;*.idb&quot;, &quot;.DS_Store&quot;, &quot;*.class&quot;, &quot;*.psd&quot;, &quot;*.db&quot;],</code></pre><p>   // Goto Anything or Find in Files</p><pre><code>&quot;binary_file_patterns&quot;: [&quot;*.jpg&quot;, &quot;*.jpeg&quot;, &quot;*.png&quot;, &quot;*.gif&quot;, &quot;*.ttf&quot;, &quot;*.tga&quot;, &quot;*.dds&quot;, &quot;*.ico&quot;, &quot;*.eot&quot;, &quot;*.pdf&quot;, &quot;*.swf&quot;, &quot;*.jar&quot;, &quot;*.zip&quot;],</code></pre><p>   删除你想要忽略的插件，需要重启</p><pre><code>&quot;ignored_packages&quot;: [&quot;Vintage&quot;]</code></pre><p> }</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; // While you can edit this file, it’s best to put your changes in&lt;br&gt; // “User/Preferences.sublime-settings”, which overrides the settin
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/editor/subline_text/my-subline/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/editor/subline_text/my-subline/</id>
    <published>2019-06-12T07:21:24.819Z</published>
    <updated>2019-06-12T07:21:24.819Z</updated>
    
    <content type="html"><![CDATA[<h3 id="My-subline-setting"><a href="#My-subline-setting" class="headerlink" title="====================== My subline setting ======================="></a>====================== My subline setting =======================</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">    <span class="attr">"font_size"</span>: <span class="number">12</span>,</span><br><span class="line">    // 不管鼠标在不在行号边栏，代码折叠按钮一直显示</span><br><span class="line">    "fade_fold_buttons": false,</span><br><span class="line">    // 突出显示当前光标所在的行</span><br><span class="line">    "highlight_line": true,</span><br><span class="line">    // 使标签与修改文件更可见(文件有变动时，tab处高亮显示)</span><br><span class="line">    "highlight_modified_tabs": true,</span><br><span class="line">    // 为true时，保存文件时会删除每行结束后多余的空格</span><br><span class="line">    "trim_trailing_white_space_on_save": true,</span><br><span class="line">    // 按回车时，自动与制表位对齐</span><br><span class="line">    "auto_indent": true,</span><br><span class="line">    // 制表位的对齐白线，draw_normal为一直显示，draw_active为只显示当前光标所在的代码控制域</span><br><span class="line">    "indent_guide_options": ["draw_active"],</span><br><span class="line">    // 为空字符串时，可以启动vi模式</span><br><span class="line">    "ignored_packages":[""],</span><br><span class="line">    // 切换到其它文件标签或点击其它非本软件区域，文件自动保存</span><br><span class="line">    "save_on_focus_lost": true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打开jade文件-–-gt-preerences-–-gt-setting-Syntax"><a href="#打开jade文件-–-gt-preerences-–-gt-setting-Syntax" class="headerlink" title="打开jade文件 –&gt; preerences –&gt; setting-Syntax"></a>打开jade文件 –&gt; preerences –&gt; setting-Syntax</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"tab_size"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">"translate_tabs_to_spaces"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="安装的插件"><a href="#安装的插件" class="headerlink" title="安装的插件"></a>安装的插件</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"bootstrapped"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"in_process_packages"</span>:[],</span><br><span class="line"><span class="attr">"installed_packages"</span>:</span><br><span class="line">[</span><br><span class="line">// 快速编辑HTML，css插件</span><br><span class="line"><span class="string">"Emmet"</span>,</span><br><span class="line">// HTML-CSS-JS格式化</span><br><span class="line"><span class="string">"HTML-CSS-JS Prettify"</span>,</span><br><span class="line"><span class="string">"LESS"</span>,</span><br><span class="line">// markdown文本实时预览插件(用法：Ctrl+Alt+o )</span><br><span class="line"><span class="string">"OmniMarkupPreviewer"</span>,</span><br><span class="line">// 皮肤</span><br><span class="line"><span class="string">"OneDarkMaterial"</span>,</span><br><span class="line"><span class="string">"Package Control"</span>,</span><br><span class="line">// vue 插件</span><br><span class="line"><span class="string">"Vuejs Complete Package"</span>,</span><br><span class="line">// 代码注释插件</span><br><span class="line"><span class="string">"DocBlockr"</span>,</span><br><span class="line">// 可以记住折叠状态和位置的插件</span><br><span class="line"><span class="string">"BufferScroll"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="subline代码片段"><a href="#subline代码片段" class="headerlink" title="subline代码片段"></a>subline代码片段</h4><p>步骤：Tools –&gt; Developer –&gt; New snippent 文件中写入下面片段:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">snippet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">content</span>&gt;</span>&lt;![CDATA[</span><br><span class="line">按下tab键出现的代码片段</span><br><span class="line">$&#123;number&#125; : 鼠标停留的位置</span><br><span class="line">]]&gt;<span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tabTrigger</span>&gt;</span>`!`唤醒代码片段的关键字 <span class="tag">&lt;/<span class="name">tabTrigger</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>`source.python` 在什么文件类型下<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snippet</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Emmet配置让单标签闭合"><a href="#Emmet配置让单标签闭合" class="headerlink" title="Emmet配置让单标签闭合"></a>Emmet配置让单标签闭合</h4><p>步骤：preferences –&gt; package Seeting –&gt; emeet –&gt; Setting-User配置文件中写入下面片段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"syntaxProfiles"</span>:&#123;</span><br><span class="line"><span class="attr">"html"</span>:<span class="string">"xhtml"</span>,</span><br><span class="line"><span class="attr">"vue"</span>:<span class="string">"xhtml"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HTML-CSS-JS-Prettify格式化-vue文件"><a href="#HTML-CSS-JS-Prettify格式化-vue文件" class="headerlink" title="HTML-CSS-JS Prettify格式化.vue文件"></a>HTML-CSS-JS Prettify格式化.vue文件</h4><p>步骤：preferences –&gt; package Seeting –&gt; HTML/CSS/JS Prettify –&gt; Plugin Options-Default  配置文件中：</p><p>将下面代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"html": &#123;</span><br><span class="line">        "allowed_file_extensions": ["htm", "html", "xhtml", "shtml", "xml", "svg"],</span><br><span class="line">        "allowed_file_syntaxes": ["html", "xml"],</span><br><span class="line">        "disallowed_file_patterns": []</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><p>改为：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"html": &#123;</span><br><span class="line">        "allowed_file_extensions": ["htm", "html", "xhtml", "shtml", "xml", "svg", "vue"],</span><br><span class="line">        "allowed_file_syntaxes": ["html", "xml"],</span><br><span class="line">        "disallowed_file_patterns": []</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><h3 id="markdowm-文件单独配置"><a href="#markdowm-文件单独配置" class="headerlink" title="markdowm 文件单独配置"></a>markdowm 文件单独配置</h3><p>步骤：preferences –&gt; Browse Packages 打开 <code>Data\Packages\User\</code>目录下一个名字叫 <code>Markdown.sublime-settings</code> 的配置文件中：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 配置不自动清除空格</span><br><span class="line">  "trim_trailing_white_space_on_save": false</span><br></pre></td></tr></table></figure><h3 id="主题背景（会提示下载文件图标）"><a href="#主题背景（会提示下载文件图标）" class="headerlink" title="主题背景（会提示下载文件图标）"></a>主题背景（会提示下载文件图标）</h3><pre><code>Material Theme配置&quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme.tmTheme&quot;,&quot;theme&quot;: &quot;Material-Theme.sublime-theme&quot;,</code></pre><p>这行加在底部，可以让浏览器不停的刷新<br><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0.1&quot;&gt;</code></p><p>sublime_txt3注册码：</p><pre><code>—– BEGIN LICENSE —–TwitterInc200 User LicenseEA7E-8900071D77F72E 390CDD93 4DCBA022 FAF6079061AA12C0 A37081C5 D0316412 4584D13694D7F7D4 95BC8C1C 527DA828 560BB037D1EDDD8C AE7B379F 50C9D69D B35179EF2FE898C4 8E4277A8 555CE714 E1FB0E43D5D52613 C3D12E98 BC49967F 7652EED29D2D2E61 67610860 6D338B72 5CF95C69E36B85CC 84991F19 7575D828 470A92AB—— END LICENSE ——</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;My-subline-setting&quot;&gt;&lt;a href=&quot;#My-subline-setting&quot; class=&quot;headerlink&quot; title=&quot;====================== My subline setting ==============
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://roy-lau.github.io/blog/2019/06/12/README/"/>
    <id>https://roy-lau.github.io/blog/2019/06/12/README/</id>
    <published>2019-06-12T07:21:24.803Z</published>
    <updated>2019-06-12T07:21:24.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="log"><a href="#log" class="headerlink" title="log"></a>log</h1><blockquote><p>记录工作和学习中积累的一些东西</p></blockquote><ul><li><a href="./Linux">Linux</a><ul><li><a href="./Linux/ubunto">ubunto</a></li><li><a href="./Linux/centOS">centOS</a></li></ul></li><li><a href="./DB">数据库</a><ul><li><a href="./DB/mysql">mysql</a></li><li><a href="./DB/mongodb">mongodb</a></li><li><a href="./DB/redis">redis</a></li></ul></li><li><a href="./editor">编辑器</a><ul><li><a href="./editor/subline_text">sublime text</a></li><li><a href="./editor/vsCode">vsCode</a></li><li><a href="./editor/vim">vim</a></li></ul></li><li><p><a href="./learn-c++">C++ 学习笔记</a></p></li><li><p><a href="./emoji">表情</a></p></li><li><a href="./git-bash-make">git使用心得</a></li><li><a href="./Automatic_task">windows定时命令</a></li><li><a href="./Installation_package">收集的一些安装包</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;log&quot;&gt;&lt;a href=&quot;#log&quot; class=&quot;headerlink&quot; title=&quot;log&quot;&gt;&lt;/a&gt;log&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;记录工作和学习中积累的一些东西&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;.
      
    
    </summary>
    
    
  </entry>
  
</feed>
