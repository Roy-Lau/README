<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/static-pages-deploy/http-server/"/>
      <url>/blog/2019/06/12/static-pages-deploy/http-server/</url>
      
        <content type="html"><![CDATA[<h1 id="http-server用法及帮助"><a href="#http-server用法及帮助" class="headerlink" title="http-server用法及帮助"></a>http-server用法及帮助</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ hs --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">usage: http-server [path] [options]</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line"></span><br><span class="line">  -p           Port to use [8080]</span><br><span class="line">  -a           Address to use [0.0.0.0]</span><br><span class="line">  -d           Show directory listings [<span class="literal">true</span>]</span><br><span class="line">  -i           Display autoIndex [<span class="literal">true</span>]</span><br><span class="line">  -e --ext     Default file extension <span class="keyword">if</span> none supplied [none]</span><br><span class="line">  -s --silent  Suppress <span class="built_in">log</span> messages from output</span><br><span class="line">  --cors[=headers]   Enable CORS via the <span class="string">"Access-Control-Allow-Origin"</span> header</span><br><span class="line">                     Optionally provide CORS headers list separated by commas</span><br><span class="line">  -o [path]    Open browser window after starting the server</span><br><span class="line">  -c           Cache time (max-age) <span class="keyword">in</span> seconds [3600], e.g. -c10 <span class="keyword">for</span> 10 seconds.</span><br><span class="line"></span><br><span class="line">               To <span class="built_in">disable</span> caching, use -c-1.</span><br><span class="line">  -U --utc     Use UTC time format <span class="keyword">in</span> <span class="built_in">log</span> messages.</span><br><span class="line"></span><br><span class="line">  -P --proxy   Fallback proxy <span class="keyword">if</span> the request cannot be resolved. e.g.: http://someurl.com</span><br><span class="line"></span><br><span class="line">  -S --ssl     Enable https.</span><br><span class="line">  -C --cert    Path to ssl cert file (default: cert.pem).</span><br><span class="line">  -K --key     Path to ssl key file (default: key.pem).</span><br><span class="line"></span><br><span class="line">  -r --robots  Respond to /robots.txt [User-agent: *\nDisallow: /]</span><br><span class="line">  -h --<span class="built_in">help</span>    Print this list and <span class="built_in">exit</span>.</span><br></pre></td></tr></table></figure><p><strong>用法：</strong></p><p><code>hs</code>: 是<code>http-server</code>的简写</p><pre><code>usage: http-server [path] [options]         # path要启动项目的路径，options参数，如-p 1024 &lt;br&gt;</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ hs<span class="comment"># 直接运行hs，默认启动当前目录，监听8080端口</span></span><br><span class="line">Starting up http-server, serving ./</span><br><span class="line">Available on:</span><br><span class="line">  http://127.0.0.1:8080</span><br><span class="line">Hit CTRL-C to stop the server</span><br><span class="line"></span><br><span class="line">$ hs -p 1024 <span class="comment"># 设置监听端口</span></span><br><span class="line">$ hs -a 127.0.0.1 <span class="comment"># 设置监听的ip地址</span></span><br><span class="line">$ hs -d <span class="comment"># 是否显示目录列表，默认为[true]</span></span><br><span class="line">$ hs -i <span class="comment"># 是否显示 autoIndex，默认为[true]</span></span><br><span class="line">$ hs -e  or --ext <span class="comment"># 设置文件模板的扩展名，如：jijia2，jade，如果没有提供默认的文件扩展名(默认 'html')</span></span><br><span class="line">$ hs -s  or --silent <span class="comment"># 禁止日志信息输出</span></span><br><span class="line">$ hs --cors[=headers]    <span class="comment"># 设置http头，默认为Access-Control-Allow-Origin</span></span><br><span class="line">$ hs -o  [path]<span class="comment"># 自动唤起默认浏览器，也可以跟浏览器的路径</span></span><br><span class="line">$ hs -c <span class="comment"># Cache 设置最大缓存时间</span></span><br><span class="line">$ hs -U <span class="comment"># 显示UTC格式的日志时间</span></span><br><span class="line">$ hs -P</span><br><span class="line">$ hs -S <span class="comment"># 启动HTTPS协议(需要两个协议文件cert.pem和key.pem)</span></span><br><span class="line">$ hs -C <span class="comment"># 设置cert.pem文件名，默认为cert.pem。启动HTTPS时需要</span></span><br><span class="line">$ hs -K <span class="comment"># 设置key.pem文件名，默认为key.pem。启动HTTPS时需要</span></span><br><span class="line">$ hs -r <span class="comment"># robots 指定爬虫协议路径</span></span><br><span class="line">$ hs -h <span class="comment"># 显示帮助文档</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/static-pages-deploy/README/"/>
      <url>/blog/2019/06/12/static-pages-deploy/README/</url>
      
        <content type="html"><![CDATA[<h1 id="记录项目部署流程！"><a href="#记录项目部署流程！" class="headerlink" title="记录项目部署流程！"></a>记录项目部署流程！</h1><p>一、下载安装：</p><pre><code>sudo yum install node     # 安装nodenode -v                    # 查看node版本|是否安装成功sudo yum install npm    # 安装npmnpm -v                     # 查看npm版本|是否安装成功npm install pm2 -g --save         # 安装pm2(进程守护) -g 全局安装 --save 安装稳定版pm2 -v                     # 查看pm2版本|是否安装成功npm install http-server -g --save    # 安装http-server(可启动http服务) 参数同上hs --help                # 查看http-server帮助(http-server可以简写为hs)</code></pre><p>注：<br>    <a href="https://github.com/roy-lau/nodejs" target="_blank" rel="noopener">node 用法及帮助请点此查看</a><br><br>    <a href="https://github.com/roy-lau/nodejs" target="_blank" rel="noopener">npm 用法及帮助请点此查看</a><br><br>    <a href="https://github.com/roy-lau/log/blob/master/static-pages-deploy/pm2.md" target="_blank" rel="noopener">pm2 用法及帮助请点此查看</a>.<br><br>    <a href="https://github.com/roy-lau/log/blob/master/static-pages-deploy/http-server.md" target="_blank" rel="noopener">http-server 用法及帮助请点此查看</a>.</p><p>二、上传项目</p><pre><code>通过ftp工具上传项目到某目录</code></pre><p>三、测试</p><pre><code>cd 项目目录</code></pre><p>在项目目录下输入命令</p><pre><code>hsStarting up http-server, serving ./Available on:  http://127.0.0.1:8080Hit CTRL-C to stop the server</code></pre><p>在浏览器输入服务ip地址加端口号查看是否显示网页</p><p><strong>注：</strong>http-server会一直开启进程，占用端口。所以我们用npm安装了pm2（守护进程，后台监听端口）__</p><p>四、发布</p><pre><code>pm2 start &quot;http-server所在目录&quot; -x -- &quot;项目所在的路径&quot; 参数(-p 9090)pm2 start --name serveName &apos;hs&apos; -x -- &apos;.&apos; -p 1024     # 引号必须携带pm2 list 查看进程</code></pre><p>/usr/lib/node_modules/http-server/bin/http-server</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/static-pages-deploy/pm2/"/>
      <url>/blog/2019/06/12/static-pages-deploy/pm2/</url>
      
        <content type="html"><![CDATA[<h1 id="pm2-用法及帮助"><a href="#pm2-用法及帮助" class="headerlink" title="pm2 用法及帮助"></a>pm2 用法及帮助</h1><p>用法:</p><pre><code>$ npm install pm2 -g            # 命令行安装 pm2$ pm2 start app.js -i 4         # 后台运行pm2，启动4核$ pm2 start app.js -i 0         # 后台运行pm2，启动全核</code></pre><p>也可以把’max’ 参数传递给 start<br>正确的进程数目依赖于Cpu的核心数目</p><pre><code>$ pm2 start app.js --name my-api      # 命名进程$ pm2 list            # 显示所有进程状态$ pm2 monit           # 监视所有进程$ pm2 logs            # 显示所有进程日志$ pm2 stop all        # 停止所有进程$ pm2 restart all     # 重启所有进程$ pm2 reload all      # 0秒停机重载进程 (用于 NETWORKED 进程)$ pm2 stop 0          # 停止指定的进程$ pm2 restart 0       # 重启指定的进程$ pm2 startup         # 产生 init 脚本 保持进程活着$ pm2 web             # 运行健壮的 computer API endpoint (http://localhost:9615)$ pm2 delete 0        # 杀死指定的进程$ pm2 delete all      # 杀死全部进程</code></pre><p>运行进程的不同方式：</p><pre><code>$ pm2 start app.js -i max                          # 根据有效CPU数目启动最大进程数目$ pm2 start app.js -i 3                            # 启动3个进程$ pm2 start app.js -x                              # 用fork模式启动 app.js 而不是使用 cluster$ pm2 start app.js -x -- -a 23                     # 用fork模式启动 app.js 并且传递参数 (-a 23)$ pm2 start app.js --name serverone                # 启动一个进程并把它命名为 serverone$ pm2 stop serverone                               # 停止 serverone 进程$ pm2 start app.json                               # 启动进程, 在 app.json里设置选项$ pm2 start app.js -i max -- -a 23                 # 在--之后给 app.js 传递参数$ pm2 start app.js -i max -e err.log -o out.log    # 启动 并 生成一个配置文件</code></pre><p>你也可以执行用其他语言编写的app ( fork 模式):</p><pre><code>$ pm2 start my-bash-script.sh -x --interpreter bash$ pm2 start my-python-script.py -x --interpreter python</code></pre><p>0秒停机重载:<br>这项功能允许你重新载入代码而不用失去请求连接。<br>注意：<br>仅能用于web应用<br>运行于Node 0.11.x版本<br>运行于 cluster 模式（默认模式）</p><pre><code>$ pm2 reload all # 全部重启</code></pre><p>CoffeeScript:</p><pre><code>$ pm2 start my_app.coffee       </code></pre><p>列出由pm2管理的所有进程信息，还会显示一个进程会被启动多少次，因为没处理的异常。</p><pre><code>pm2 list</code></pre><p>监视每个node进程的CPU和内存的使用情况。</p><pre><code>pm2 monit</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/learn-c++/4-inherit/"/>
      <url>/blog/2019/06/12/learn-c++/4-inherit/</url>
      
        <content type="html"><![CDATA[<h1 id="C-远征之继承篇"><a href="#C-远征之继承篇" class="headerlink" title="C++ 远征之继承篇"></a>C++ 远征之继承篇</h1><p><a href="README.md">目录</a></p><p><a href="5-polymorphism.md">C++ 远征之多态篇</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/learn-c++/5-polymorphism/"/>
      <url>/blog/2019/06/12/learn-c++/5-polymorphism/</url>
      
        <content type="html"><![CDATA[<h1 id="C-远征之多态篇"><a href="#C-远征之多态篇" class="headerlink" title="C++ 远征之多态篇"></a>C++ 远征之多态篇</h1><p><a href="README.md">目录</a></p><p><a href="6-template.md">C++ 远征之模板篇</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/learn-c++/6-template/"/>
      <url>/blog/2019/06/12/learn-c++/6-template/</url>
      
        <content type="html"><![CDATA[<h1 id="C-远征之模板篇"><a href="#C-远征之模板篇" class="headerlink" title="C++ 远征之模板篇"></a>C++ 远征之模板篇</h1><p><a href="README.md">目录</a></p><p><a href>C++ </a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/learn-c++/README/"/>
      <url>/blog/2019/06/12/learn-c++/README/</url>
      
        <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><blockquote><p>C++学习笔记</p></blockquote><ul><li><a href="./1-setSail.md">C++ 远征之起航篇</a></li><li><a href="./2-departure.md">C++ 远征之离港篇</a></li><li><a href="./3-package.md">C++ 远征之封装篇</a></li><li><a href="./4-inherit.md">C++ 远征之继承篇</a></li><li><a href="./5-polymorphism.md">C++ 远征之多态篇</a></li><li><a href="./6-template.md">C++ 远征之模板篇</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/learn-c++/3-package/"/>
      <url>/blog/2019/06/12/learn-c++/3-package/</url>
      
        <content type="html"><![CDATA[<h1 id="C-远征之封装篇"><a href="#C-远征之封装篇" class="headerlink" title="C++ 远征之封装篇"></a>C++ 远征之封装篇</h1><p><a href="README.md">目录</a></p><p>构造函数&amp;析构函数</p><p>对象复制&amp;对象赋值</p><p>对象数组&amp;对象指针</p><p>this 指针</p><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><blockquote><p>数据成员&amp;成员函数</p></blockquote><p><img src="/blog/.io//class-definition.png" alt="类的定义"></p><p>访问限定符：</p><ul><li>public： 公共的</li><li>protected： 受保护的</li><li>private： 私有的</li></ul><h4 id="实例化类对象"><a href="#实例化类对象" class="headerlink" title="实例化类对象"></a>实例化类对象</h4><p>类可以实例化多个对象，实例化对象的方式一般有两种：</p><p>1、 从栈中实例化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> type;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeVol</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">power</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">TV tv;</span><br><span class="line">TV tv[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、 从堆中实例化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> type;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeVol</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">power</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">TV *p = <span class="keyword">new</span> TV();</span><br><span class="line">TV *q = <span class="keyword">new</span> TV[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// todo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="keyword">delete</span> []q;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象成员访问"><a href="#对象成员访问" class="headerlink" title="对象成员访问"></a>对象成员访问</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单一成员</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">TV tv;</span><br><span class="line">tv.type = <span class="number">0</span>;</span><br><span class="line">tv.changeVol();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">TV *p = <span class="keyword">new</span> TV();</span><br><span class="line">p-&gt;type = <span class="number">0</span>;</span><br><span class="line">p-&gt;changeVol();</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组成员</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">TV tv;</span><br><span class="line">tv.type = <span class="number">0</span>;</span><br><span class="line">tv.changeVol();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">TV *p = <span class="keyword">new</span> TV[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">p[i]-&gt;type = <span class="number">0</span>;</span><br><span class="line">p[i]-&gt;changeVol();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> []p;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实例化类对象-1"><a href="#实例化类对象-1" class="headerlink" title="实例化类对象"></a>实例化类对象</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printX</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printY</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">// 栈</span></span><br><span class="line">Coordinate Coor;</span><br><span class="line">Coor.x = <span class="number">10</span>;</span><br><span class="line">Coor.y = <span class="number">20</span>;</span><br><span class="line">Coor.printX();</span><br><span class="line">Coor.printY();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆</span></span><br><span class="line">Coordinate *p = <span class="keyword">new</span> Coordinate();  <span class="comment">// 申请内存失败，返回NULL</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p)&#123;</span><br><span class="line"><span class="comment">// failed 申请内存失败，直接返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;x = <span class="number">100</span>;</span><br><span class="line">p-&gt;y = <span class="number">200</span>;</span><br><span class="line">p-&gt;printX();</span><br><span class="line">p-&gt;printY();</span><br><span class="line"><span class="comment">// 清空内存</span></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="string-类型"><a href="#string-类型" class="headerlink" title="string 类型"></a>string 类型</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> name = <span class="string">"roy"</span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">hobby</span><span class="params">(<span class="string">"football"</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; hobby &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>初始化 string 对象的方式:</th><th></th></tr></thead><tbody><tr><td>string s1;</td><td>s1 为空字符串</td></tr><tr><td>string s2(“ABC”);</td><td>用字符串字面值初始化s2</td></tr><tr><td>string s3(s2);</td><td>将s3初始化为s2的一个副本</td></tr><tr><td>string s4(n,’c’);</td><td>将s4初始化为字符’c’的n个副本</td></tr></tbody></table><table><thead><tr><th>string 的常用操作:</th><th></th></tr></thead><tbody><tr><td>s.empty()</td><td>若s为空字符串，则返回true，否则返回false</td></tr><tr><td>s.size()</td><td>返回s中字符的个数</td></tr><tr><td>s[n]</td><td>返回s中位置为n的字符，位置从0开始</td></tr><tr><td>s1+s2</td><td>将来两个串连接成新串，返回新生成的串</td></tr><tr><td>s1 = s2</td><td>把s1得内容替换为s2的副本</td></tr><tr><td>v1 == s2</td><td>判定相等，相等返回true，否则返回false</td></tr><tr><td>v1 != s2</td><td>判定不等，不等返回true，否则返回false</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****</span></span><br><span class="line"><span class="comment"> * 题目描述：</span></span><br><span class="line"><span class="comment"> *          1. 提示用户输入姓名</span></span><br><span class="line"><span class="comment"> *          2. 接收用户的输入</span></span><br><span class="line"><span class="comment"> *          3. 向用户问好： hello name</span></span><br><span class="line"><span class="comment"> *          4. 用户名字的长度</span></span><br><span class="line"><span class="comment"> *          5. 告诉用户名字首字母是什么</span></span><br><span class="line"><span class="comment"> *          6. 如果用户直接输入回车，那么告诉用户的输入为空。</span></span><br><span class="line"><span class="comment"> *          7. 如果用户输入的是admin，告诉用户的角色是一个管理员账户</span></span><br><span class="line"><span class="comment"> *****/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入用户名："</span>;</span><br><span class="line">    <span class="built_in">string</span> username;</span><br><span class="line">    getline(<span class="built_in">cin</span>,username);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(username.empty())&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">" enter name cannot be empty X"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(username == <span class="string">"admin"</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"you is a admin !"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"hello "</span> + username &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"your name length is : "</span>  &lt;&lt;  username.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"your name isitials is : "</span> &lt;&lt; username[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据的封装"><a href="#数据的封装" class="headerlink" title="数据的封装"></a>数据的封装</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/****</span></span><br><span class="line"><span class="comment">*  数据的封装</span></span><br><span class="line"><span class="comment">* 定义一个Student类，含有如下信息：</span></span><br><span class="line"><span class="comment">* 1、姓名： name</span></span><br><span class="line"><span class="comment">* 2、性别： gender</span></span><br><span class="line"><span class="comment">* 3、学分（只读）： score</span></span><br><span class="line"><span class="comment">* 4、学习： study</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment"> ****/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="comment">// 公共的</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 设置姓名</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> _name)</span></span>&#123;</span><br><span class="line">m_strName = _name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取姓名</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_strName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置性别</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setGender</span><span class="params">(<span class="built_in">string</span> _gender)</span></span>&#123;</span><br><span class="line">m_strGender = _gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取性别</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getGender</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_strGender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取学分</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_iScore;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化学分 0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">m_iScore = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 增加学分</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">(<span class="keyword">int</span> _score)</span></span>&#123;</span><br><span class="line">m_iScore += _score</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 私有的</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line"><span class="built_in">string</span> m_strGender;</span><br><span class="line"><span class="keyword">int</span> m_iScore;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">Student stu;</span><br><span class="line">stu.initScore();</span><br><span class="line">stu.setName(<span class="string">"roy"</span>);</span><br><span class="line">stu.setGender(<span class="string">"男"</span>);</span><br><span class="line">stu.study(<span class="number">30</span>);</span><br><span class="line">stu.study(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; stu.getName() &lt;&lt; <span class="string">" "</span> &lt;&lt; stu.getGender() &lt;&lt; <span class="string">""</span> &lt;&lt; stu.getScore() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类外定义"><a href="#类外定义" class="headerlink" title="类外定义"></a>类外定义</h4><p>类内定义与内联函数</p><p>1、 内联函数</p><p>关键字: <code>inline</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>内联函数与普通函数的区别</p></blockquote><ul><li><p>普通函数</p><pre><code>main() --&gt; 调用fun() --&gt; 寻找函数的入口 --&gt; 运行函数相关的代码 --&gt; 运行完以后回到fun()，然后去执行其它代码 --&gt; 结束</code></pre></li><li><p>内联函数</p></li></ul><p><strong>编译时将函数体代码和实参代替函数调用语句</strong></p><p><strong>内联函数只执行比较简单的函数，编辑器会拒绝按照内联的方式编译复杂的函数</strong></p><p>2、 类内定义</p><blockquote><p>成员函数在类的内部(里边)</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> _age)</span></span>&#123; <span class="comment">// 这三个函数就是类内定义。由于函数比较简单，编译器会自动将其编译为内联函数。</span></span><br><span class="line">age = _age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> getAge()&#123; <span class="comment">// 这三个函数就是类内定义。由于函数比较简单，编译器会自动将其编译为内联函数。</span></span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123; <span class="comment">// 这三个函数就是类内定义。由于函数比较简单，编译器会自动将其编译为内联函数。</span></span><br><span class="line"><span class="comment">// todo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、 类外定义</p><blockquote><p>成员函数在类的外部(外边)<br>类外定义分为： 同文件类外定义、分文件类外定义</p></blockquote><ul><li>同文件类外定义</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Car.cpp</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeSpeed</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">void</span> Car::run()&#123;&#125;</span><br><span class="line"><span class="keyword">void</span> Car::stop()&#123;&#125;</span><br><span class="line"><span class="keyword">void</span> Cat::changeSpeed()&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>分文件类外定义</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Car.h 头文件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeSpeed</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Car.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Car.h"</span></span></span><br><span class="line"><span class="keyword">void</span> Car::run()&#123;&#125;</span><br><span class="line"><span class="keyword">void</span> Car::stop()&#123;&#125;</span><br><span class="line"><span class="keyword">void</span> Car::changeSpeed()&#123;&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><p>1.同文件类外定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个 Teacher类， 要求分别采用同文件类外定义和分文件类外定义的方式完成，具体要求如下：</span></span><br><span class="line"><span class="comment">数据成员：</span></span><br><span class="line"><span class="comment">名字</span></span><br><span class="line"><span class="comment">年龄</span></span><br><span class="line"><span class="comment">性别</span></span><br><span class="line"><span class="comment">成员函数：</span></span><br><span class="line"><span class="comment">数据成员的封装函数</span></span><br><span class="line"><span class="comment">授课teach</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> _name)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setGender</span><span class="params">(<span class="built_in">string</span> _gender)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getGender</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> _age)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line"><span class="built_in">string</span> m_strGender;</span><br><span class="line"><span class="keyword">int</span> m_iAge;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setName(<span class="built_in">string</span> _name)&#123;</span><br><span class="line">m_strName = _name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getName()&#123;</span><br><span class="line"><span class="keyword">return</span> m_strName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setGender(<span class="built_in">string</span> _gender)&#123;</span><br><span class="line">m_strGender = _gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getGender()&#123;</span><br><span class="line"><span class="keyword">return</span> m_strGender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setAge(<span class="keyword">int</span> _age)&#123;</span><br><span class="line">m_iAge = _age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Teacher::getAge()&#123;</span><br><span class="line"><span class="keyword">return</span> m_iAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::speak()&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"現在上課……"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">Teacher t;</span><br><span class="line">t.setName(<span class="string">"孔子"</span>);</span><br><span class="line">t.setGender(<span class="string">"男"</span>);</span><br><span class="line">t.setAge(<span class="number">30</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t.getName() &lt;&lt; <span class="string">""</span> &lt;&lt; t.getAge() &lt;&lt; <span class="string">""</span> &lt;&lt; t.getGender() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">t.speak();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.分文件类外定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> _name)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setGender</span><span class="params">(<span class="built_in">string</span> _gender)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getGender</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> _age)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line"><span class="built_in">string</span> m_strGender;</span><br><span class="line"><span class="keyword">int</span> m_iAge;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// demo.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"demo.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个 Teacher类， 要求分别采用同文件类外定义和分文件类外定义的方式完成，具体要求如下：</span></span><br><span class="line"><span class="comment">数据成员：</span></span><br><span class="line"><span class="comment">名字</span></span><br><span class="line"><span class="comment">年龄</span></span><br><span class="line"><span class="comment">性别</span></span><br><span class="line"><span class="comment">成员函数：</span></span><br><span class="line"><span class="comment">数据成员的封装函数</span></span><br><span class="line"><span class="comment">授课teach</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setName(<span class="built_in">string</span> _name)&#123;</span><br><span class="line">m_strName = _name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getName()&#123;</span><br><span class="line"><span class="keyword">return</span> m_strName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setGender(<span class="built_in">string</span> _gender)&#123;</span><br><span class="line">m_strGender = _gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getGender()&#123;</span><br><span class="line"><span class="keyword">return</span> m_strGender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setAge(<span class="keyword">int</span> _age)&#123;</span><br><span class="line">m_iAge = _age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Teacher::getAge()&#123;</span><br><span class="line"><span class="keyword">return</span> m_iAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::speak()&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"現在上課……"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">Teacher t;</span><br><span class="line">t.setName(<span class="string">"孔子"</span>);</span><br><span class="line">t.setGender(<span class="string">"男"</span>);</span><br><span class="line">t.setAge(<span class="number">30</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t.getName() &lt;&lt; <span class="string">""</span> &lt;&lt; t.getAge() &lt;&lt; <span class="string">""</span> &lt;&lt; t.getGender() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">t.speak();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象结构"><a href="#对象结构" class="headerlink" title="对象结构"></a>对象结构</h3><p>内存分区</p><p><strong>栈区：</strong> <code>int x = 0; int *p = NULL;</code></p><p><strong>堆区：</strong> <code>int *p = new int[20];</code></p><p><strong>全局区： 存储全局变量及静态变量</strong></p><p><strong>常量区：</strong> <code>string str = &quot;hello&quot;;</code></p><p><strong>代码区： 存储逻辑代码的二进制</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> wheelCount;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getWheelCoutn</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> wheelCount;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对象初始化</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tank</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_iPosX;</span><br><span class="line"><span class="keyword">int</span> m_iPosY;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">m_iPosX = <span class="number">0</span>;</span><br><span class="line">m_iPosY = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">Tank t1;</span><br><span class="line">t1.init();</span><br><span class="line">Tank t2;</span><br><span class="line">t2.init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对象初始化：1.有且只有一次，2.根据条件初始化</p></blockquote><p>构造函数的规则和特点：</p><ul><li>构造函数在对象实例化时被自动调用</li><li>构造函数与类同名</li><li>构造函数没有返回值</li><li>构造函数可以有多个重载形式</li><li>实例化对象时仅用到一个构造函数</li><li>当用户没有定义构造函数时，编译器自动生成一个构造函数</li></ul><blockquote><p>无参构造函数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student()&#123; <span class="comment">// 无参构造函数的函数名与类名相同，无参构造函数没有返回值</span></span><br><span class="line">m_strName = <span class="string">"jim"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>有参构造函数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student(<span class="built_in">string</span> name)&#123; <span class="comment">// 字符串类型的name就是有参构造函数的参数</span></span><br><span class="line">m_strName = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>重载构造函数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student()&#123;</span><br><span class="line">m_strName = <span class="string">"jim"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Student(<span class="built_in">string</span> name)&#123;</span><br><span class="line">m_strName = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>构造函数代码实例</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Teacher.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Teacher类</span></span><br><span class="line"><span class="comment">自定义无参构造函数</span></span><br><span class="line"><span class="comment">自动以有参构造函数</span></span><br><span class="line"><span class="comment">数据：</span></span><br><span class="line"><span class="comment">名字</span></span><br><span class="line"><span class="comment">年龄</span></span><br><span class="line"><span class="comment">成员函数：</span></span><br><span class="line"><span class="comment">数据成员的封装函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">Teacher t1;</span><br><span class="line"><span class="function">Teacher <span class="title">t2</span><span class="params">(<span class="string">"Merry"</span>,<span class="number">15</span>)</span></span>;</span><br><span class="line"><span class="function">Teacher <span class="title">t3</span><span class="params">(<span class="string">"James"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t1.getName() &lt;&lt; <span class="string">" "</span> &lt;&lt; t1.getAge() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t2.getName() &lt;&lt; <span class="string">" "</span> &lt;&lt; t2.getAge() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t3.getName() &lt;&lt; <span class="string">" "</span> &lt;&lt; t3.getAge() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Teacher.h"</span></span></span><br><span class="line"></span><br><span class="line">Teacher::Teacher()&#123;</span><br><span class="line">m_strName = <span class="string">"jim"</span>;</span><br><span class="line">m_iAge = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Teacher::Teacher(<span class="built_in">string</span> name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">m_strName = name;</span><br><span class="line">m_iAge = age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher(string name,int age)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setName(<span class="built_in">string</span> name)&#123;</span><br><span class="line">m_strName = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getName()&#123;</span><br><span class="line"><span class="keyword">return</span> m_strName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setAge(<span class="keyword">int</span> age)&#123;</span><br><span class="line">m_iAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Teacher::getAge()&#123;</span><br><span class="line"><span class="keyword">return</span> m_iAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Teacher();</span><br><span class="line">Teacher(<span class="built_in">string</span> name,<span class="keyword">int</span> age = <span class="number">18</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> name)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line"><span class="keyword">int</span> m_iAge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>默认构造函数(实例化时不需要传递参数的函数是默认构造函数)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">Student <span class="title">stu1</span><span class="params">()</span></span>;</span><br><span class="line">Student *p = <span class="literal">NULL</span>;</span><br><span class="line">p = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student()&#123;&#125;;</span><br><span class="line"><span class="comment">// Student(string name);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>构造函数初始化列表</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student():m_strName(<span class="string">"jim"</span>),m_iAge(<span class="number">10</span>)&#123;&#125;;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line"><span class="keyword">int</span> m_iAge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>构造函数初始化列表特性</strong></p><ul><li>初始化列先于构造函数执行</li><li>初始化列表只能用于构造函数</li><li>初始化列表可以同时初始化多个数据成员</li></ul><p><strong>构造函数初始化列表的必要性</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Circle()&#123;m_dPi = 3.14&#125;;  通过构造函数的方式会报错</span></span><br><span class="line">Circle():m_dPi(<span class="number">3.14</span>)&#123;&#125; <span class="comment">// 通过初始化列表的方式才能成功</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> m_dPi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Teacher.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Teacher 类</span></span><br><span class="line"><span class="comment">自定义有参默认构造函数</span></span><br><span class="line"><span class="comment">使用初始化列表初始化数据</span></span><br><span class="line"><span class="comment">数据：</span></span><br><span class="line"><span class="comment">名字</span></span><br><span class="line"><span class="comment">年龄</span></span><br><span class="line"><span class="comment">成员函数：</span></span><br><span class="line"><span class="comment">数据成员的封装函数</span></span><br><span class="line"><span class="comment">拓展：</span></span><br><span class="line"><span class="comment">定义可以带最多学生的个数，此为常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="function">Teacher <span class="title">t1</span><span class="params">(<span class="string">"Merry"</span>,<span class="number">12</span>,<span class="number">150</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t1.getName() &lt;&lt; <span class="string">" "</span> &lt;&lt; t1.getAge() &lt;&lt; <span class="string">" "</span> &lt;&lt; t1.getMax() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Teacher.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Teacher::Teacher(<span class="built_in">string</span> name,<span class="keyword">int</span> age,<span class="keyword">int</span> m):m_strName(name),m_iAge(age),m_iMax(m)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher(string name,int age,int m)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setName(<span class="built_in">string</span> name)&#123;</span><br><span class="line">m_strName = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getName()&#123;</span><br><span class="line"><span class="keyword">return</span> m_strName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setAge(<span class="keyword">int</span> age)&#123;</span><br><span class="line">m_iAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getAge()&#123;</span><br><span class="line"><span class="keyword">return</span> m_iAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Teacher::getMax()&#123;</span><br><span class="line"><span class="keyword">return</span> m_iMax;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Teacher(<span class="built_in">string</span> name = <span class="string">"Jim"</span>,<span class="keyword">int</span> age = <span class="number">1</span>,<span class="keyword">int</span> m = <span class="number">100</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> name)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line"><span class="keyword">int</span> m_iAge;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> m_iMax;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>拷贝构造函数</strong></p><ul><li><p>如果没有自定义的拷贝构造函数则系统自动生成一个默认的拷贝构造函数</p></li><li><p>当采用直接初始化或复制初始化实例化对象时系统自动调用拷贝构造函数</p></li><li><p>拷贝构造函数不可以重载</p></li></ul><p>定义格式： 类名（const类名 &amp; 变量名）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student()&#123;</span><br><span class="line">m_strName = <span class="string">"jim"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Student(<span class="keyword">const</span> Student &amp; stu)&#123; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/blog/.io//constructor.png" alt="构造函数总结"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Teacher.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Teacher类</span></span><br><span class="line"><span class="comment">自定义拷贝构造函数</span></span><br><span class="line"><span class="comment">数据：</span></span><br><span class="line"><span class="comment">名字</span></span><br><span class="line"><span class="comment">年龄</span></span><br><span class="line"><span class="comment">成员函数：</span></span><br><span class="line"><span class="comment">数据成员的封装函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">Teacher t1;</span><br><span class="line">Teacher t2 = t1; <span class="comment">// 调用拷贝构造函数</span></span><br><span class="line"><span class="function">Teacher <span class="title">t3</span><span class="params">(t1)</span></span>; <span class="comment">// 调用拷贝构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Teacher.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Teacher.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Teacher::Teacher(<span class="built_in">string</span> name,<span class="keyword">int</span> age):m_strName(name),m_iAge(age)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher(string name,int age)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Teacher::Teacher(<span class="keyword">const</span> Teacher &amp; tea)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher(const Teacher &amp; tea)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setName(<span class="built_in">string</span> name)&#123;</span><br><span class="line">m_strName = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getName()&#123;</span><br><span class="line"><span class="keyword">return</span> m_strName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setAge(<span class="keyword">int</span> age)&#123;</span><br><span class="line">m_iAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getAge()&#123;</span><br><span class="line"><span class="keyword">return</span> m_iAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Teacher(<span class="built_in">string</span> name = <span class="string">"jim"</span>, <span class="keyword">int</span> age = <span class="number">1</span>);</span><br><span class="line">Teacher(<span class="keyword">const</span> Teacher &amp; tea)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> name)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line"><span class="keyword">int</span> m_iAge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>析构函数</strong></p><ul><li><p>如果没有自定义的析构函数则系统自动生成一个析构函数</p></li><li><p>析构函数在对象销毁时自动调用</p></li><li><p>析构函数没有返回值，没有参数也不能重载</p></li></ul><p>定义格式： <code>~类名()</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student()&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Student"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Student()&#123; <span class="comment">// 析构函数没有参数</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~Student"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student()&#123;</span><br><span class="line">m_pName = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">&#125;</span><br><span class="line">~Student()&#123; <span class="comment">// 析构函数的唯一作用就是释放资源</span></span><br><span class="line"><span class="keyword">delete</span> []m_pName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> *m_pName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象的生命历程</p><pre><code>申请内存 --&gt; 初始化列表 --&gt; 构造函数    ↑                        |    ↓                        ↓释放内存 &lt;-- 析构函数 &lt;--- 参与运算</code></pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Teacher.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Teacher类</span></span><br><span class="line"><span class="comment">1. 自定义析构函数</span></span><br><span class="line"><span class="comment">2. 普通方式实例化的对象，在销毁对象时是否自动调用析构函数</span></span><br><span class="line"><span class="comment">3. 通过拷贝析构函数实例化独享，在销毁对象是 是否调用析构函数</span></span><br><span class="line"><span class="comment">数据：</span></span><br><span class="line"><span class="comment">名字</span></span><br><span class="line"><span class="comment">年龄</span></span><br><span class="line"><span class="comment">成员函数：</span></span><br><span class="line"><span class="comment">数据成员的封装函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">Teacher t1; <span class="comment">// 栈</span></span><br><span class="line">Teacher *p = <span class="keyword">new</span> Teacher();<span class="comment">// 堆</span></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line"><span class="function">Teacher <span class="title">t2</span><span class="params">(t1)</span></span>; <span class="comment">// 拷贝构造函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Teacher.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Teacher::Teacher(<span class="built_in">string</span> name,<span class="keyword">int</span> age):m_strName(name),m_iAge(age)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher(string name,int age)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Teacher::Teacher(<span class="keyword">const</span> Teacher &amp; tea)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher(const Teacher &amp; tea)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Teacher::~Teacher()&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~Teacher()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Teacher::setName(<span class="built_in">string</span> name)&#123;</span><br><span class="line">m_strName = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getName()&#123;</span><br><span class="line"><span class="keyword">return</span> m_strName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::setAge(<span class="keyword">int</span> age)&#123;</span><br><span class="line">m_iAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> Teacher::getAge()&#123;</span><br><span class="line"><span class="keyword">return</span> m_iAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Teacher(<span class="built_in">string</span> name = <span class="string">"jim"</span>, <span class="keyword">int</span> age = <span class="number">1</span>);</span><br><span class="line">Teacher(<span class="keyword">const</span> Teacher &amp; tea);</span><br><span class="line">~Teacher();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> name)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> m_strName;</span><br><span class="line"><span class="keyword">int</span> m_iAge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="4-inherit.md">C++ 远征之继承篇</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/learn-c++/1-setSail/"/>
      <url>/blog/2019/06/12/learn-c++/1-setSail/</url>
      
        <content type="html"><![CDATA[<h1 id="C-远征之起航篇"><a href="#C-远征之起航篇" class="headerlink" title="C++ 远征之起航篇"></a>C++ 远征之起航篇</h1><p><a href="README.md">目录</a></p><details><br>  <summary>C++ 诞生地</summary><br>  <img src="/blog/.io//C++birthplace.png" alt="C++ 诞生地"><br></details><br><details><br>  <summary>C++ 之父</summary><br>  <img src="/blog/.io//C++father.png" alt="C++ 之父"><br></details><p>C++ 初体验</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;    <span class="comment">//关于这里，且听下回分解</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello word"</span>&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">//在此填写我们的开篇Hello word</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-基础知识"><a href="#C-基础知识" class="headerlink" title="C++ 基础知识"></a>C++ 基础知识</h3><h4 id="1、-数据类型"><a href="#1、-数据类型" class="headerlink" title="1、 数据类型"></a>1、 数据类型</h4><details><br>  <summary><strong>C语言的数据类型</strong></summary><br>  <img src="/blog/.io//C++dataType.png" alt="C语言的数据类型"><br></details><p>C++ 中新的数据类型</p><table><thead><tr><th></th><th>逻辑类型</th><th>真</th><th>假</th></tr></thead><tbody><tr><td>C</td><td>没提供</td><td>非0</td><td>0</td></tr><tr><td>C++</td><td>bool</td><td>true</td><td>false</td></tr></tbody></table><p>对比<strong>C</strong>与<strong>C++</strong> <code>bool</code>类型<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C 语言</span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">// to do</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// to do</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ 语言</span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="comment">// to do</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// to do</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、-初始化方法"><a href="#2、-初始化方法" class="headerlink" title="2、 初始化方法"></a>2、 初始化方法</h4><ul><li><p>C 语言提供的初始化方法 <code>int x = 1024;</code></p></li><li><p>C++ 提供两种初始化方法:</p><ol><li><p>复制初始化： <code>int x = 1024;</code></p></li><li><p>直接初始化： <code>int x(1024); //推荐</code></p></li></ol></li></ul><h4 id="3、-随用随定义"><a href="#3、-随用随定义" class="headerlink" title="3、 随用随定义"></a>3、 随用随定义</h4><ul><li><p>C语言: 所有变量定义必须位于函数体的最前面</p></li><li><p>C++： 所有变量随用随定义</p></li></ul><p>对比<strong>C</strong>与<strong>C++</strong> 随用随定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C语言</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v1 = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> v2 = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">v1 = v1 + v2;</span><br><span class="line">v2 = v2 + v1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ 语言</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v1 = <span class="number">3</span>;</span><br><span class="line">v1 = v1 + v2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v2 = <span class="number">4</span>;</span><br><span class="line">v2 = v2 + v1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-输入输出方式"><a href="#C-输入输出方式" class="headerlink" title="C++ 输入输出方式"></a>C++ 输入输出方式</h3><blockquote><p>对比<strong>C</strong>与<strong>C++</strong>的输入输出方式</p></blockquote><details><br>    <summary>C语言的I/O方式</summary><br>    <img src="/blog/.io//C-I-O.png" alt="C语言的输入输出方式"><br></details><br><details><br>    <summary>C++的I/O方式</summary><br>    <img src="/blog/.io//C++I-O.png" alt="C++的输入输出方式"><br></details><p><strong>C++ 的I/O方式</strong></p><p><code>cout输出</code> 语法形式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; C &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"x + y ="</span>&lt;&lt; x + y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// endl`代表回车(\n)</span></span><br></pre></td></tr></table></figure></p><p><code>cin输入</code> 语法形式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br></pre></td></tr></table></figure></p><p>优点：</p><ul><li>不用关注占位符</li><li>不用关注数据类型</li><li>不易出现问题</li></ul><p><strong>C++ 输入输出特性演示</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; // 这里存着 system() 函数</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求：</span></span><br><span class="line"><span class="comment">// 1. 提示用户输入一个整数，将该整数分别以8进制，10进制，16进制打印在屏幕上</span></span><br><span class="line"><span class="comment">// 2. 提示用户输入一个布尔值（0或1），以布尔方式将值打印在屏幕上</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入一个整数："</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; oct &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 8进制</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dec &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 10进制</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; hex &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 16进制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入一个布尔值(0 or 1):"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">bool</span> y = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; y;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; boolalpha &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-命名空间-namespace"><a href="#C-命名空间-namespace" class="headerlink" title="C++ 命名空间(namespace)"></a>C++ 命名空间(namespace)</h3><p>命名空间关键字： <code>namespace</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; <span class="comment">// 调用 std 命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"A function"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> B</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"B function"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2B function"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> B; <span class="comment">// 默认使用 B 命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; A::x &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出 A 命名空间下的 x 变量</span></span><br><span class="line">B::fun();  <span class="comment">// 调用 B 命名空间下的 fun 函数</span></span><br><span class="line">fun2();    <span class="comment">// 调用 B(默认) 命名空间下的 fun2 函数</span></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="综合题"><a href="#综合题" class="headerlink" title="综合题"></a>综合题</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"><span class="comment">/* 知识点：bool类型，命名空间，输入输出                 */</span></span><br><span class="line"><span class="comment">/* 题目要求：                                           */</span></span><br><span class="line"><span class="comment">/*      使用一个函数找出一个整型数组中的最大值或最小值  */</span></span><br><span class="line"><span class="comment">/********************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaxOrMin</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> count,<span class="keyword">bool</span> isMax)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[<span class="number">0</span>]; <span class="comment">// 获取数组的第一个元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; count;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(isMax)&#123;</span><br><span class="line">    <span class="keyword">if</span>(temp &lt; arr[i])&#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp &gt; arr[i])&#123;</span><br><span class="line">                temp = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr1[<span class="number">4</span>] = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"求值(1:最大值，0:最小值): "</span>;</span><br><span class="line"><span class="keyword">bool</span> isMax = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; isMax;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; getMaxOrMin(arr1,<span class="number">4</span>,isMax) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="2-departure.md">C++ 远征之离港篇</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/learn-c++/2-departure/"/>
      <url>/blog/2019/06/12/learn-c++/2-departure/</url>
      
        <content type="html"><![CDATA[<h1 id="C-远征之离港篇"><a href="#C-远征之离港篇" class="headerlink" title="C++ 远征之离港篇"></a>C++ 远征之离港篇</h1><p><a href="README.md">目录</a></p><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><p>引用是变量的别名</p><blockquote><p>基本数据类型的引用</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;b = a; <span class="comment">// 引用（别名）必须初始化</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体类型的引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;Coor;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">Coor c1;</span><br><span class="line">Coor &amp;c = c1;  <span class="comment">// 设置c1的别名为c</span></span><br><span class="line">c.x = <span class="number">10</span>;</span><br><span class="line">c.y = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c1.x &lt;&lt; c1.y;  <span class="comment">// 10 20</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针类型的引用</p><p><code>类型 *&amp;指针引用名 = 指针;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;a;</span><br><span class="line"><span class="keyword">int</span> *&amp;q = p;</span><br><span class="line">*q = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用做为函数参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常情况下的写法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">c = *a;</span><br><span class="line">*a = *b;</span><br><span class="line">*b = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>,y = <span class="number">20</span>;</span><br><span class="line">fun(&amp;x, &amp;y);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用函数写法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">c = a;</span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>,y = <span class="number">20</span>;</span><br><span class="line">fun(x, y)</span><br></pre></td></tr></table></figure><p>代码示例<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;Coord;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> &amp;w,<span class="keyword">int</span> &amp;e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> &amp;w,<span class="keyword">int</span> &amp;e)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">r = w;</span><br><span class="line">w = e;</span><br><span class="line">e = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;b = a;</span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 2</span></span><br><span class="line">a = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">Coord c;</span><br><span class="line">Coord &amp;c1 = c;</span><br><span class="line">c1.x = <span class="number">10</span>;</span><br><span class="line">c1.y = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c.x &lt;&lt; <span class="string">","</span> &lt;&lt; c.y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;j;</span><br><span class="line"><span class="keyword">int</span> *&amp;q = p;</span><br><span class="line">*q = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数</span></span><br><span class="line"><span class="keyword">int</span> w = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> e = <span class="number">8</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; w &lt;&lt; <span class="string">"-"</span> &lt;&lt; e &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">fun(w,e);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; w &lt;&lt; <span class="string">"-"</span> &lt;&lt; e &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="const关键字"><a href="#const关键字" class="headerlink" title="const关键字"></a>const关键字</h4><p><code>const</code>与基本数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> x = <span class="number">3</span>; <span class="comment">// 常量（不可改变）</span></span><br></pre></td></tr></table></figure><p><code>const</code>与指针类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这两种是等价的</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这两种也是等价的</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> * <span class="keyword">const</span> p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int *const p = NULL;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;x;</span><br><span class="line">p = &amp;x; <span class="comment">// 正确</span></span><br><span class="line">*p = <span class="number">4</span>; <span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> p = &amp;x;</span><br><span class="line">p = &amp;y; <span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> p = &amp;x;</span><br><span class="line">p = &amp;y; <span class="comment">// 错误</span></span><br><span class="line">*p = <span class="number">4</span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p><code>const</code>与引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;y = x;</span><br><span class="line">x = <span class="number">10</span>; <span class="comment">// 正确</span></span><br><span class="line">y = <span class="number">20</span>; <span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">x = <span class="number">5</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> y = x;</span><br><span class="line">y = <span class="number">5</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *y = &amp;x;</span><br><span class="line">*y = <span class="number">5</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line">z = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> y = &amp;x;</span><br><span class="line">y = &amp;z; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;y = x;</span><br><span class="line">y = <span class="number">5</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> *y = &amp;x; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *y = &amp;x; <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><p>代码实例<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> *p = &amp;x; <span class="comment">// 等价 const int *p = &amp;x;</span></span><br><span class="line">x = <span class="number">5</span>;</span><br><span class="line">*p = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="C-函数的新特性"><a href="#C-函数的新特性" class="headerlink" title="C++函数的新特性"></a>C++函数的新特性</h3><p><strong><em>函数参数的默认值</em></strong></p><blockquote><p>有默认参数值的参数必须在参数表的最右端</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j=<span class="number">5</span>, <span class="keyword">int</span> k = <span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j=<span class="number">5</span>, <span class="keyword">int</span> k)</span></span>; <span class="comment">// 这种写法是错误的</span></span><br></pre></td></tr></table></figure><blockquote><p>无实参则用默认值，否则实参覆盖默认值</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j=<span class="number">5</span>, <span class="keyword">int</span> k=<span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; j &lt;&lt; k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fun(<span class="number">20</span>);</span><br><span class="line">fun(<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">fun(<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数重载</p><p>1、 在相同的作用域内</p><p>2、 用<strong>同一个函数名</strong>定义的多个函数</p><p>3、 <strong>参数个数</strong>和<strong>参数类型</strong>不同</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line"><span class="comment">// to do</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getMax</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line"><span class="comment">// to do</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译时编译器会通过名称加参数的方式来区分同名函数</span></span><br><span class="line"></span><br><span class="line">getMax_int_int_int</span><br><span class="line">getMax_double_double_double</span><br></pre></td></tr></table></figure><p>内联函数</p><p><img src="/blog/.io//inline-function.png" alt="内联函数"></p><p>内联函数关键字： <code>inline</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>, j = <span class="number">20</span>, k = <span class="number">30</span>, m;</span><br><span class="line">m = max(i, j, k);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"max="</span> &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上遍代码的展开式</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>, j = <span class="number">20</span>, k = <span class="number">30</span>, m;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line">a = i; b = j; c = k;</span><br><span class="line"><span class="keyword">if</span>(b &gt; a) a = b;</span><br><span class="line"><span class="keyword">if</span>(c &gt; a) a = c;</span><br><span class="line">m = a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"max="</span> &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>内联编译是建议性的，由编译器决定。</p></li><li><p>逻辑简单，调用频繁的函数建议使用内联。</p></li><li><p>递归函数无法使用内联方式。</p></li></ul><p>总结：</p><p>  函数参数默认值 –&gt; 实参覆盖默认值<br><br>  函数重载 –&gt; 名称相同参数可辨<br><br>  内联函数 –&gt; inline 效率高 有条件</p><p>代码实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i = <span class="number">30</span>, <span class="keyword">int</span> j = <span class="number">20</span>, <span class="keyword">int</span> k = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">double</span> i,<span class="keyword">double</span> j)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">fun(); <span class="comment">// 30,20,10</span></span><br><span class="line">fun(<span class="number">100</span>); <span class="comment">// 100,20,10</span></span><br><span class="line">fun(<span class="number">100</span>,<span class="number">200</span>); <span class="comment">// 100,200,10</span></span><br><span class="line">fun(<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>); <span class="comment">// 100,200,300</span></span><br><span class="line"></span><br><span class="line">fun(<span class="number">1.1</span>,<span class="number">2.2</span>) <span class="comment">//1.1, 2.2</span></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt;<span class="string">","</span>&lt;&lt; j &lt;&lt;<span class="string">","</span>&lt;&lt; k &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">double</span> i, <span class="keyword">double</span> j)</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">","</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 求两个数的最大值</span></span><br><span class="line"><span class="comment">// 2. 求数组的最大值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数功能：返回数组中的最大值</span></span><br><span class="line"><span class="comment"> * @param  arr   整型数组</span></span><br><span class="line"><span class="comment"> * @param  count 数组长度</span></span><br><span class="line"><span class="comment"> * @return       数组的最大值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> maxNum = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>; i &lt; count; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (maxNum &lt; arr[i])&#123;</span><br><span class="line">maxNum = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">// 定义数组并初始化</span></span><br><span class="line"><span class="keyword">int</span> numArr[<span class="number">3</span>] = &#123;<span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动调用 int getMax(int a, int b)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; getMax(<span class="number">2</span>, <span class="number">6</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动调用返回数组中最大值的函数返回数组中的最大值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; getMax(numArr, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="C-内存管理"><a href="#C-内存管理" class="headerlink" title="C++内存管理"></a>C++内存管理</h4><blockquote><p>思考：</p></blockquote><p>  内存的本质是什么？  <strong>资源</strong></p><p>  谁来掌管资源？         <strong>操作系统</strong></p><p>  我们能做什么？         <strong>申请/归还</strong></p><p><em>申请/规划内存资源就是内存管理</em></p><p><strong>内存的申请和释放</strong></p><blockquote><p>运算符：</p></blockquote><p>申请内存 <code>new</code><br>释放内存 <code>delete</code></p><blockquote><p>方法：</p></blockquote><p>申请内存 <code>int *p = new int;</code><br>释放内存 <code>delete p;</code></p><blockquote><p>申请和释放块内存：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]; <span class="comment">// 申请块内存</span></span><br><span class="line"><span class="keyword">delete</span> []arr; <span class="comment">// 释放块内存</span></span><br></pre></td></tr></table></figure><blockquote><p>内存管理的其他方式：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C语言</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>; <span class="comment">// 申请内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span> *memblock)</span></span>; <span class="comment">// 释放内存</span></span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span></span><br><span class="line"><span class="keyword">delete</span></span><br></pre></td></tr></table></figure><blockquote><p>注意事项：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 申请内存</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == p)&#123;</span><br><span class="line"><span class="comment">// 内存申请失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == p)&#123;</span><br><span class="line"><span class="comment">// 内存分配失败</span></span><br><span class="line"><span class="comment">// 异常处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == p)&#123;</span><br><span class="line"><span class="comment">// 内存分配失败</span></span><br><span class="line"><span class="comment">// 异常处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> []p;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>总结：</p></blockquote><p>使用<code>new</code>申请内存，使用<code>delete</code>释放内存</p><p>申请内存需要判断是否成功，释放内存需要设空指针</p><p><code>new</code>与<code>delete</code>配套使用（有申请也要有释放）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>; <span class="comment">// 申请内存</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == p)&#123; <span class="comment">// 申请失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">*p = <span class="number">20</span>;  <span class="comment">// 赋值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出值</span></span><br><span class="line"><span class="keyword">delete</span> p; <span class="comment">// 释放内存</span></span><br><span class="line">p = <span class="literal">NULL</span>; <span class="comment">// 指针赋值为空</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 块内存</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>]; <span class="comment">// 申请块内存</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == p)&#123; <span class="comment">// 申请失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">p[<span class="number">0</span>] = <span class="number">10</span>;  <span class="comment">// p[0]赋值</span></span><br><span class="line">p[<span class="number">1</span>] = <span class="number">20</span>;  <span class="comment">// p[1]赋值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p[<span class="number">0</span>] &lt;&lt; <span class="string">","</span> &lt;&lt; p[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出值</span></span><br><span class="line"><span class="keyword">delete</span> []p; <span class="comment">// 释放块内存</span></span><br><span class="line">p = <span class="literal">NULL</span>; <span class="comment">// 指针赋值为空</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="3-package.md">C++ 远征之封装篇</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/jade/README/"/>
      <url>/blog/2019/06/12/jade/README/</url>
      
        <content type="html"><![CDATA[<h1 id="jade随记"><a href="#jade随记" class="headerlink" title="jade随记"></a>jade随记</h1><h3 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h3><pre><code>extends layout                    ---- 相当于src进来一个页面include note.txt                 ---- include同于导入文本include ./layout/header.jade     ---- 将header.jade当做html引入 block content                     ---- block获取block下边的内容，content可以在别的文件引用  h1   p   p</code></pre><p><strong>可重用的 jade 块 (Mixins)</strong></p><pre><code>//- 也可以给这个重用块指定参数    mixin pets(pets)      ul.pets        - each pet in pets          li= pet    +pets([&apos;cat&apos;, &apos;dog&apos;, &apos;pig&apos;])//- Mixins 同时也支持在外部传入 jade 块    mixin article(title)      .article        .article-wrapper          h1= title          //- block 为 jade 关键字代表外部传入的块          if block            block          else            p 该文章没有内容    +article(&apos;Hello world&apos;)    +article(&apos;Hello Jade&apos;)      p 这里是外部传入的块      p 再写两句//- Mixins 同时也可以从外部获取属性。    mixin link(href, name)      a(class!=attributes.class, href=href)= name    +link(&apos;/foo&apos;, &apos;foo&apos;)(class=&quot;btn&quot;)//- 申明可重用的块    mixin list      ul        li foo        li bar        li baz    //- 调用    +list()    +list()</code></pre><p><strong>jade内写js</strong></p><pre><code>- console.log(&apos;hello&apos;);         ---- 这段代码在服务端执行- var s = &apos;hello world&apos;         ---- 在服务端空间中定义变量- if 参数                        ---- if判断- var user = { description: &apos;foo bar baz&apos; }- var authorised = false#user  if user.description    h2 Description    p.description= user.description  else if authorised    h2 Description    p.description.      User has no description,      why not add one...  else    h1 Description    p.description User has no description- for (var i = 0; i &lt; array.length; ++i) {    li hello #{array[i]}         ---- for循环  - }  each val, index in [&apos;西瓜&apos;, &apos;苹果&apos;, &apos;梨子&apos;]     ---- each遍历    li= index + &apos;: &apos; + val- var friends = 1                case friends                    ---- 相当于 switch case default  when 0: p you have no friends  when 1: p you have a friend  default: p you have #{friends} friendsscript  :coffee    console.log &apos;这里是 coffee script&apos;</code></pre><p><strong>jade内写md</strong></p><pre><code>:markdown  # Markdown 标题     这里使用的是 MarkDown 格式</code></pre><p><strong>bug记录</strong></p><pre><code>jade模板的最后一行如果有空行也会报 缩进错误用extends继承的话，被继承的页面有数据，继承的页面拿不到数据，用include包含就正常。但是在资源方面，用extends，资源位置正常，但是也不会继承数据，用include包含的话，缩进对的，资源位置就变了 </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/git-bash-make/README/"/>
      <url>/blog/2019/06/12/git-bash-make/README/</url>
      
        <content type="html"><![CDATA[<h1 id="—————–下面是使用git的一些心得笔记-———"><a href="#—————–下面是使用git的一些心得笔记-———" class="headerlink" title="—————–下面是使用git的一些心得笔记 ———-"></a>—————–下面是使用git的一些心得笔记 ———-</h1><p><del>能成功上传全依赖于<a href="http://www.cnblogs.com/schaepher/p/5561193.html#six" target="_blank" rel="noopener">http://www.cnblogs.com/schaepher/p/5561193.html#six</a></del></p><h3 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h3><p><img src="/blog/.io//git-Common-commands.jpg" alt></p><h3 id="使用git-diff查看各个区之间的差异"><a href="#使用git-diff查看各个区之间的差异" class="headerlink" title="使用git diff查看各个区之间的差异"></a>使用git diff查看各个区之间的差异</h3><blockquote><p>git diff 和 git diff –-cached容易混淆</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff                        # 比较的是工作区和暂存区的差别</span><br><span class="line">git diff –-cached               # 比较的是暂存区和版本库的差别</span><br><span class="line">git diff HEAD                   # 可以查看工作区和版本库的差别</span><br></pre></td></tr></table></figure><blockquote><p>每次commit后,git diff –-cached没有内容，是因为暂存区的内容已经更新到版本库中，因此暂存区和版本库中的内容无差别</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached "文件路径"      # 不删除物理文件，仅将该文件从缓存中删除；</span><br><span class="line">git rm --cached "文件名"        # 可以从缓存区移除文件，使该文件变为未跟踪的状态，</span><br><span class="line">git checkout –- &lt;file&gt;          # 命令时，会用暂存区全部或指定的文件替换工作区的文件。</span><br><span class="line">git ls-files                    # 查看缓冲区内有哪些文件</span><br><span class="line">git rm -r --cached .            # 删除缓存区</span><br></pre></td></tr></table></figure><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEADE~1    # 回滚到上一版本</span><br><span class="line">git reset --hard commit_id(版本号，版本ID，commit_id)      # 回滚到某个版本</span><br><span class="line">git reflog # 查看命令历史的commit_id,可以获取回退之前的commit_id,</span><br><span class="line">git reflog# 记录这个仓库中所有的分支的所有更新记录，包括已经撤销的更新.</span><br><span class="line"></span><br><span class="line">HEAD        # 表示当前版本</span><br><span class="line">HEAD^       # 是上一个版本</span><br><span class="line">HEAD^       # ^是上上一个版本</span><br><span class="line">HEAD~100    # 100表示100个版本,100个版本写100个^比较容易数不过来。</span><br></pre></td></tr></table></figure><h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD^     # 删除到HEAD^的commit，(仅commit删除，文件未变化)</span><br><span class="line">git commit --amend         # 修改最近一次的commit内容(git push过的不能修改)</span><br><span class="line">git rebase -i HEAD~3       # 修改倒数第几次的git commit</span><br><span class="line">git rebase -i commit_id(版本号，版本ID，commit_id)    # 可以修改或删除某个commit</span><br><span class="line">git rebase --continue      # 如果修改错了要返回原来的git commit，可以使用这个命令</span><br></pre></td></tr></table></figure><p>修改commit massage</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1. $ git rebase -i commit_id(版本号，版本ID，commit_id)    # 可以修改或删除某个commit</span><br><span class="line"></span><br><span class="line">2. 显示结果如下，修改 pick 为 edit ，并 :wq 保存退出</span><br><span class="line">    pick 92b495b 2009-08-08: ×××××××</span><br><span class="line"></span><br><span class="line">    # Rebase 9ef2b1f..92b495b onto 9ef2b1f</span><br><span class="line">    #</span><br><span class="line">    # Commands:</span><br><span class="line">    #  pick = use commit</span><br><span class="line">    #  edit = use commit, but stop for amending //改上面的 pick 为 edit</span><br><span class="line">    #  squash = use commit, but meld into previous commit</span><br><span class="line">    #</span><br><span class="line">    # If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line">    # However, if you remove everything, the rebase will be aborted.</span><br><span class="line"></span><br><span class="line">3. 命令行显示：</span><br><span class="line"></span><br><span class="line">    Stopped at e35b8f3… reflog branch first commit</span><br><span class="line">    You can amend the commit now, with</span><br><span class="line">    git commit –amend</span><br><span class="line">    Once you are satisfied with your changes, run</span><br><span class="line">    git rebase –continue</span><br><span class="line"></span><br><span class="line">4. 修改需要修改的地方（只是修改commit message就不用做)</span><br><span class="line"></span><br><span class="line">    git add . #这一步如果只是修改commit message不用输入</span><br><span class="line">    git commit --amend</span><br><span class="line">    #输入修改后的commit message，保存</span><br><span class="line"></span><br><span class="line">5. $ git rebase –continue   # 使用 git rebase –continue 完成操作</span><br><span class="line"></span><br><span class="line">6. 推送到远端（若还没有推送到远端，不用处理）</span><br><span class="line">    $ git push &lt;remote&gt; &lt;branch&gt; -f   # 加-f 表示忽略冲突（强推）</span><br></pre></td></tr></table></figure><h4 id="上传本地文件夹到远程仓库"><a href="#上传本地文件夹到远程仓库" class="headerlink" title="上传本地文件夹到远程仓库"></a>上传本地文件夹到远程仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. git init     # 本地项目根目录下执行这个命令</span><br><span class="line">2. git add .    # 将项目的所有文件添加到仓库中</span><br><span class="line">3. git commit -m "注释语句"</span><br><span class="line">4. git remote add origin git@github.com:roy-lau/python.git     # 将本地的仓库关联到github上</span><br><span class="line">5. git pull origin master       # 上传github之前，要先pull一下</span><br><span class="line">6. git push -u origin master    # 上传代码到github远程仓库</span><br></pre></td></tr></table></figure><h3 id="分支类（master）"><a href="#分支类（master）" class="headerlink" title="分支类（master）"></a>分支类（master）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git log --graph                 # 查看分支图</span><br><span class="line">git branch                      # 查看分支</span><br><span class="line">git branch -r                   # 查看所有远程分支</span><br><span class="line">git branch  BranchName          # 创建分支</span><br><span class="line">git checkout  BranchName        # 切换分支</span><br><span class="line">git checkout -b  BranchName     # 创建+切换分支</span><br><span class="line">git merge  BranchName           # 合并某分支到当前分支</span><br><span class="line">git branch -D  BranchName       # 删除本地分支</span><br><span class="line">git pull origin  remoteBranchName:localBranchName # 获取远程分支</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支(推送一个空分支到远程分支,就相当于删除了远程分支)</span></span><br><span class="line">git push origin :branchName</span><br><span class="line">git push -d origin branchName</span><br><span class="line"></span><br><span class="line">git branch -m oldBranchName newBranchName   # 修改branch名</span><br></pre></td></tr></table></figure><h4 id="git-快速clone"><a href="#git-快速clone" class="headerlink" title="git 快速clone"></a>git 快速clone</h4><blockquote><p>1、 开始 <code>clone</code>，如果觉得仓库太大，可以在 <code>git clone</code> 中加入参数 <code>--depth=1</code>，只拉取最近的一个 <code>revision</code>。</p></blockquote><pre><code>git clone  git@github.com:roy-lau/web_project.git --depth=1     # 设置克隆的深度(两个参数可以连起来)git clone  git@github.com:roy-lau/web_project.git -b dev        # 设置克隆的分支(两个参数可以连起来)</code></pre><blockquote><p>2、 如果后面想看历史的版本，那么也很好办，使用 git fetch 即可。</p></blockquote><pre><code>git fetch --unshallow               # 获取除当前分支的所有历史版本</code></pre><blockquote><p>3、拉取远程分支到本地分支</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin  remoteBranchName:localBranchName</span><br><span class="line"><span class="comment"># 如果remoteBranchName和localBranchName冲突,手动merge,可以设置深度--depth=1</span></span><br><span class="line">git pull origin  remoteBranchName:localBranchName</span><br><span class="line"><span class="comment"># 如果remoteBranchName和localBranchName冲突,自动merge,可以设置深度--depth=1</span></span><br></pre></td></tr></table></figure><blockquote><p>注： BranchName:分支名 localBranchName:本地分支名  remoteBranchName: 远程分支名</p></blockquote><h3 id="标签（tag）"><a href="#标签（tag）" class="headerlink" title="标签（tag）"></a>标签（tag）</h3><ul><li><p>创建标签</p><ul><li>git tag -a <code>tagName</code> -m “注释”        # 创建附注标签(常用)</li><li>git tag  tagName-light                  # 创建轻量标签</li></ul></li><li><p>上传标签</p><ul><li>git push origin tag <code>tagName</code>          # 将 tagName 标签提交到git服务器</li><li>git push origin -–tags                 # 将本地所有标签一次性提交到git服务器</li></ul></li><li><p>git tag                                   # 查看当前分支下的标签</p></li><li>git tag -d  <code>tagName</code>                     # 删除本地标签</li><li>git push origin <code>:refs/tags/tagName</code>      # 删除远程标签</li><li>git checkout <code>tagName</code>                     # 切换标签</li><li>git tag -m oldTagName <code>newTagName</code>        # 修改tag名</li><li>git fetch origin tag <code>tagName</code>             # 获取远程tag</li></ul><h3 id="远程主机（origin）"><a href="#远程主机（origin）" class="headerlink" title="远程主机（origin）"></a>远程主机（origin）</h3><ol><li><p>为了便于管理，git要求每个远程主机都必须指定一个主机名。不带选项的时候，<code>git remote</code>命令会列出所有远程主机。</p><pre><code>$ git remoteorigin</code></pre></li><li><p>使用<code>-v</code>选项可以查看远程主机的网址</p><pre><code>$ git remote -vorigin git@github.com:roy-lau/python.git(fetch)origin git@github.com:roy-lau/python.git(push)</code></pre></li><li><p>克隆的时候，所使用的远程主机自动被git命名为origin。如果想使用其他主机名，需要用<code>git clone</code>命令的<code>-o</code>选项指定。</p><pre><code>$ git clone -o roy-lau https://github.com/roy-lau/python.git$ git remote roy-lau</code></pre><p> 上面命令表示，克隆的时候，指定远程主机叫<strong>roy-lau</strong></p></li><li><p><code>git remote show &lt;主机名&gt;</code> 可以查看该主机的详细信息。</p></li><li><code>git remote add &lt;主机名&gt;&lt;网址&gt;</code>  添加远程主机。</li><li><code>git remote rm &lt;主机名&gt;</code> 删除远程主机</li><li><code>git remote rename &lt;源主机名&gt; &lt;新主机名&gt;</code> 更改远程主机名。<br>End. <code>git push -u &lt;主机名&gt; &lt;分支名&gt;</code></li></ol><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><ol><li><code>git config -l</code>                            查看git配置</li><li><code>git config -e</code>                            vim下修改配置</li><li><code>git config -–add user.name=roy-lau</code>       添加一个配置项命令参数</li><li><code>git config --get user.name</code>               获取一个配置项命令参数</li><li><code>git congig --unset user.name=roy-lau</code>     删除一个配置项命令参数</li></ol><ul><li><p><code>git add</code> 的时候，中文会显示成<code>\344\270\255\346\226\207.txt</code>，使用如下命令进行配置：</p><pre><code>git config --global core.quotepath false</code></pre></li><li><p>Git使用https方式进行连接时，默认每次推送时都要输入用户名和密码。进行如下设置后，只要在推送一次，以后就不需要用户名和密码了</p><pre><code>git config credential.helper store</code></pre></li><li><p>设置 <code>git lg</code> （设置个命令后，使用<strong><em>git lg</em></strong>命令可以查看分支日志等！）</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.lg <span class="string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span></span><br></pre></td></tr></table></figure><ul><li>设置git可提交最大bit</li></ul><blockquote><p>问题原因是<code>http.postBuffer</code>默认上限为<code>1M</code>所致。在git的配置里将<code>http.postBuffer</code>变量改大一些即可，比如将上限设为<code>500M</code></p></blockquote><pre><code>git config --global http.postBuffer 524288000git sparse clone 路径  可以克隆git仓库下的某个目录</code></pre><ul><li>设置github大文件提交(超过50M)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git lfs install     <span class="comment"># 开启`lfs`功能（只需运行一次）</span></span><br><span class="line">git lfs track <span class="string">"*.psd"</span> <span class="comment">#命令进行大文件追踪 例如 `git lfs track "*.psd"` 追踪所有后缀为 `psd`的文件</span></span><br><span class="line">git lfs track       <span class="comment"># 查看现有的文件追踪模式</span></span><br><span class="line">git add .gitattributes <span class="comment"># 提交代码需要将`gitattributes`文件提交至仓库`.` 它保存了文件的追踪记录</span></span><br><span class="line">git lfs ls-files    <span class="comment"># 可以显示当前跟踪的文件列表（查看当前有哪些文件是使用lfs管理的）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常只需如下步骤即可</span></span><br><span class="line">git lfs install</span><br><span class="line">git lfs track <span class="string">"*.psd"</span></span><br><span class="line">git add .gitattributes</span><br><span class="line">git add file.psd</span><br><span class="line">git commit -m <span class="string">"Add design file"</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><em>将代码 <code>push</code> 到远程仓库后，<code>LFS</code> 跟踪的文件会以<code>Git LFS</code>的形式显示:<br><code>clone</code> 时 使用<code>git clone</code> 或 <code>git lfs clone</code> 均可</em></p><h3 id="github的SSH配置如下："><a href="#github的SSH配置如下：" class="headerlink" title="github的SSH配置如下："></a>github的SSH配置如下：</h3><p><strong>1. 设置Git的user name和email：</strong></p><pre><code>$ git config --global user.name &quot;roy-lau&quot;$ git config --global user.email &quot;roylau_vip@163.com&quot;</code></pre><p><strong>2. 生成SSH密钥过程：</strong></p><ol><li><p>查看是否已经有了ssh密钥：</p><pre><code>cd ~/.ssh</code></pre><blockquote><p>如果没有密钥则不会有此文件夹，有则备份删除</p></blockquote></li><li><p>保存密钥：</p><pre><code>$ ssh-keygen -t rsa -C  &quot;roylau_vip@163.com&quot;</code></pre><p> 按3个回车，密码为空。</p><p> Your identification has been saved in /home/tekkub/.ssh/id_rsa.<br> Your public key has been saved in /home/tekkub/.ssh/id_rsa.pub.<br> The key fingerprint is:<br> ………………</p><blockquote><p>最后得到了两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code></p></blockquote></li><li><p>添加密钥</p><pre><code>ssh：ssh-add 文件名   # 需要之前输入密码。</code></pre></li><li><p>在github上添加ssh密钥，这要添加的是<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    打开https://github.com/ ，登陆roy-lau，然后添加ssh。</span><br><span class="line"></span><br><span class="line">5. 测试：</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">    $ ssh -T git@github.com</span><br><span class="line">    Hi roy-lau! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></p></li></ol><h3 id="git私服搭建"><a href="#git私服搭建" class="headerlink" title="git私服搭建"></a>git私服搭建</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>git如何搭建私服<a href="git-server-build.md">点击查看</a></strong></p><h3 id="bug记录！"><a href="#bug记录！" class="headerlink" title="bug记录！"></a>bug记录！</h3><ul><li>bug1：<code>工作区和暂存区和远程仓库不同。但是，git push 【Everything up-to-date】</code></li></ul><blockquote><p>解决步骤如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1. Administrator@liuroy-lau MINGW32 /d/git_rpo/README (master)</span><br><span class="line">    $ git add -A                                <span class="comment"># 重点在这里，以前都是用git add .或git add --all</span></span><br><span class="line"></span><br><span class="line">2. Administrator@liuroy-lau MINGW32 /d/git_rpo/README (master)</span><br><span class="line">    $ git commit -m <span class="string">"error"</span></span><br><span class="line">    [master ef2b048] error</span><br><span class="line">     3 files changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line">     create mode 100644 git.png</span><br><span class="line">     create mode 100644 git_help.png</span><br><span class="line">     create mode 100644 <span class="string">"git\351\200\237\347\216\207.png"</span></span><br><span class="line"></span><br><span class="line">3. Administrator@liuroy-lau MINGW32 /d/git_rpo/README (master)</span><br><span class="line">    $ git push -u origin master</span><br><span class="line">    Counting objects: 5, <span class="keyword">done</span>.</span><br><span class="line">    Delta compression using up to 4 threads.</span><br><span class="line">    Compressing objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">    Writing objects: 100% (5/5), 680.94 KiB | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">    Total 5 (delta 0), reused 0 (delta 0)</span><br><span class="line">    To git@github.com:roy-lau/README.git</span><br><span class="line">       792f815..ef2b048  master -&gt; master</span><br></pre></td></tr></table></figure><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><ol><li><code>git add -A</code>   保存所有的修改</li><li><code>git add .</code>    保存新的添加和修改，但是不包括删除</li><li><code>git add -u</code>   保存修改和删除，但是不包括新建文件。</li><li>工作的时候经常需要在各个目录之间跳转，可以通过环境变量对目录进行缩写，方便地在多个目录直接切换。</li></ol><p>在 <strong>~/.bashrc</strong>添加：</p><pre><code>export wd=&quot;/d/Projects/MyProject/git&quot;export doc=&quot;/d/Projects/documents/&quot;</code></pre><p>以后只需要用 <code>cd $wd, cd $doc</code> 即可进入对应目录。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/emoji/README/"/>
      <url>/blog/2019/06/12/emoji/README/</url>
      
        <content type="html"><![CDATA[<h1 id="Emoji表情"><a href="#Emoji表情" class="headerlink" title="Emoji表情"></a><a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">Emoji表情</a></h1><p>鼠标悬停在表情上，即可显示emoji表情的符号码,将对应符号码输入你的markdown文本即可显示emoji表情。如<code>:blush:</code>，显示:blush:</p><h2 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h2><p> :bowtie: <code>:bowtie:</code><br> :smile: <code>:smile:</code><br> :laughing: <code>:laughing:</code><br> :blush: <code>:blush:</code><br> :smiley: <code>:smiley:</code><br> :relaxed: <code>:relaxed:</code><br> :smirk: <code>:smirk:</code><br> :heart_eyes: <code>:heart_eyes:</code><br> :kissing_heart: <code>:kissing_heart:</code><br> :kissing_closed_eyes: <code>:kissing_closed_eyes:</code><br> :flushed: <code>:flushed:</code><br> :relieved: <code>:relieved:</code><br> :satisfied: <code>:satisfied:</code><br> :grin: <code>:grin:</code><br> :wink: <code>:wink:</code><br> :stuck_out_tongue_winking_eye: <code>:stuck_out_tongue_winking_eye:</code><br> :stuck_out_tongue_closed_eyes: <code>:stuck_out_tongue_closed_eyes:</code><br> :grinning: <code>:grinning:</code><br> :kissing: <code>:kissing:</code><br> :kissing_smiling_eyes: <code>:kissing_smiling_eyes:</code><br> :stuck_out_tongue: <code>:stuck_out_tongue:</code><br> :sleeping: <code>:sleeping:</code><br> :worried: <code>:worried:</code><br> :frowning: <code>:frowning:</code><br> :anguished: <code>:anguished:</code><br> :open_mouth: <code>:open_mouth:</code><br> :grimacing: <code>:grimacing:</code><br> :confused: <code>:confused:</code><br> :hushed: <code>:hushed:</code><br> :expressionless: <code>:expressionless:</code><br> :unamused: <code>:unamused:</code><br> :sweat_smile: <code>:sweat_smile:</code><br> :sweat: <code>:sweat:</code><br> :disappointed_relieved: <code>:disappointed_relieved:</code><br> :weary: <code>:weary:</code><br> :pensive: <code>:pensive:</code><br> :confounded: <code>:confounded:</code><br> :disappointed: <code>:disappointed:</code><br> :fearful: <code>:fearful:</code><br> :cold_sweat: <code>:cold_sweat:</code><br> :persevere: <code>:persevere:</code><br> :cry: <code>:cry:</code><br> :sob: <code>:sob:</code><br> :joy: <code>:joy:</code><br> :astonished: <code>:astonished:</code><br> :scream: <code>:scream:</code><br> :neckbeard: <code>:neckbeard:</code><br> :tired_face: <code>:tired_face:</code><br> :angry: <code>:angry:</code><br> :rage: <code>:rage:</code><br> :triumph: <code>:triumph:</code><br> :sleepy: <code>:sleepy:</code><br> :yum: <code>:yum:</code><br> :mask: <code>:mask:</code><br> :sunglasses: <code>:sunglasses:</code><br> :dizzy_face: <code>:dizzy_face:</code><br> :imp: <code>:imp:</code><br> :smiling_imp: <code>:smiling_imp:</code><br> :neutral_face: <code>:neutral_face:</code><br> :no_mouth: <code>:no_mouth:</code><br> :innocent: <code>:innocent:</code><br> :alien: <code>:alien:</code><br> :yellow_heart: <code>:yellow_heart:</code><br> :blue_heart: <code>:blue_heart:</code><br> :purple_heart: <code>:purple_heart:</code><br> :heart: <code>:heart:</code><br> :green_heart: <code>:green_heart:</code><br> :broken_heart: <code>:broken_heart:</code><br> :heartbeat: <code>:heartbeat:</code><br> :heartpulse: <code>:heartpulse:</code><br> :two_hearts: <code>:two_hearts:</code><br> :revolving_hearts: <code>:revolving_hearts:</code><br> :cupid: <code>:cupid:</code><br> :sparkling_heart: <code>:sparkling_heart:</code><br> :sparkles: <code>:sparkles:</code><br> :star: <code>:star:</code><br> :star2: <code>:star2:</code><br> :dizzy: <code>:dizzy:</code><br> :boom: <code>:boom:</code><br> :collision: <code>:collision:</code><br> :anger: <code>:anger:</code><br> :exclamation: <code>:exclamation:</code><br> :question: <code>:question:</code><br> :grey_exclamation: <code>:grey_exclamation:</code><br> :grey_question: <code>:grey_question:</code><br> :zzz: <code>:zzz:</code><br> :dash: <code>:dash:</code><br> :sweat_drops: <code>:sweat_drops:</code><br> :notes: <code>:notes:</code><br> :musical_note: <code>:musical_note:</code><br> :fire: <code>:fire:</code><br> :hankey: <code>:hankey:</code><br> :poop: <code>:poop:</code><br> :shit: <code>:shit:</code><br> :+1:<code>+:1:</code><br> :thumbsup: <code>:thumbsup:</code><br> :-1:<code>-:1:</code><br> :thumbsdown: <code>:thumbsdown:</code><br> :ok_hand: <code>:ok_hand:</code><br> :punch: <code>:punch:</code><br> :facepunch: <code>:facepunch:</code><br> :fist: <code>:fist:</code><br> :v: <code>:v:</code><br> :wave: <code>:wave:</code><br> :hand: <code>:hand:</code><br> :raised_hand: <code>:raised_hand:</code><br> :open_hands: <code>:open_hands:</code><br> :point_up: <code>:point_up:</code><br> :point_down: <code>:point_down:</code><br> :point_left: <code>:point_left:</code><br> :point_right: <code>:point_right:</code><br> :raised_hands: <code>:raised_hands:</code><br> :pray: <code>:pray:</code><br> :point_up_2: <code>:point_up_2:</code><br> :clap: <code>:clap:</code><br> :muscle: <code>:muscle:</code><br> :metal: <code>:metal:</code><br> :fu: <code>:fu:</code><br> :walking: <code>:walking:</code><br> :runner: <code>:runner:</code><br> :running: <code>:running:</code><br> :couple: <code>:couple:</code><br> :family: <code>:family:</code><br> :two_men_holding_hands: <code>:two_men_holding_hands:</code><br> :two_women_holding_hands: <code>:two_women_holding_hands:</code><br> :dancer: <code>:dancer:</code><br> :dancers: <code>:dancers:</code><br> :ok_woman: <code>:ok_woman:</code><br> :no_good: <code>:no_good:</code><br> :information_desk_person: <code>:information_desk_person:</code><br> :raising_hand: <code>:raising_hand:</code><br> :bride_with_veil: <code>:bride_with_veil:</code><br> :person_with_pouting_face: <code>:person_with_pouting_face:</code><br> :person_frowning: <code>:person_frowning:</code><br> :bow: <code>:bow:</code><br> :couplekiss: <code>:couplekiss:</code><br> :couple_with_heart: <code>:couple_with_heart:</code><br> :massage: <code>:massage:</code><br> :haircut: <code>:haircut:</code><br> :nail_care: <code>:nail_care:</code><br> :boy: <code>:boy:</code><br> :girl: <code>:girl:</code><br> :woman: <code>:woman:</code><br> :man: <code>:man:</code><br> :baby: <code>:baby:</code><br> :older_woman: <code>:older_woman:</code><br> :older_man: <code>:older_man:</code><br> :person_with_blond_hair: <code>:person_with_blond_hair:</code><br> :man_with_gua_pi_mao: <code>:man_with_gua_pi_mao:</code><br> :man_with_turban: <code>:man_with_turban:</code><br> :construction_worker: <code>:construction_worker:</code><br> :cop: <code>:cop:</code><br> :angel: <code>:angel:</code><br> :princess: <code>:princess:</code><br> :smiley_cat: <code>:smiley_cat:</code><br> :smile_cat: <code>:smile_cat:</code><br> :heart_eyes_cat: <code>:heart_eyes_cat:</code><br> :kissing_cat: <code>:kissing_cat:</code><br> :smirk_cat: <code>:smirk_cat:</code><br> :scream_cat: <code>:scream_cat:</code><br> :crying_cat_face: <code>:crying_cat_face:</code><br> :joy_cat: <code>:joy_cat:</code><br> :pouting_cat: <code>:pouting_cat:</code><br> :japanese_ogre: <code>:japanese_ogre:</code><br> :japanese_goblin: <code>:japanese_goblin:</code><br> :see_no_evil: <code>:see_no_evil:</code><br> :hear_no_evil: <code>:hear_no_evil:</code><br> :speak_no_evil: <code>:speak_no_evil:</code><br> :guardsman: <code>:guardsman:</code><br> :skull: <code>:skull:</code><br> :feet: <code>:feet:</code><br> :lips: <code>:lips:</code><br> :kiss: <code>:kiss:</code><br> :droplet: <code>:droplet:</code><br> :ear: <code>:ear:</code><br> :eyes: <code>:eyes:</code><br> :nose: <code>:nose:</code><br> :tongue: <code>:tongue:</code><br> :love_letter: <code>:love_letter:</code><br> :bust_in_silhouette: <code>:bust_in_silhouette:</code><br> :busts_in_silhouette: <code>:busts_in_silhouette:</code><br> :speech_balloon: <code>:speech_balloon:</code><br> :thought_balloon: <code>:thought_balloon:</code><br> :feelsgood: <code>:feelsgood:</code><br> :finnadie: <code>:finnadie:</code><br> :goberserk: <code>:goberserk:</code><br> :godmode: <code>:godmode:</code><br> :hurtrealbad: <code>:hurtrealbad:</code><br> :rage1: <code>:rage1:</code><br> :rage2: <code>:rage2:</code><br> :rage3: <code>:rage3:</code><br> :rage4: <code>:rage4:</code><br> :suspect: <code>:suspect:</code><br> :trollface: <code>:trollface:</code></p><h2 id="自然"><a href="#自然" class="headerlink" title="自然"></a>自然</h2><p> :sunny: <code>:sunny:</code><br> :umbrella: <code>:umbrella:</code><br> :cloud: <code>:cloud:</code><br> :snowflake: <code>:snowflake:</code><br> :snowman: <code>:snowman:</code><br> :zap: <code>:zap:</code><br> :cyclone: <code>:cyclone:</code><br> :foggy: <code>:foggy:</code><br> :ocean: <code>:ocean:</code><br> :cat: <code>:cat:</code><br> :dog: <code>:dog:</code><br> :mouse: <code>:mouse:</code><br> :hamster: <code>:hamster:</code><br> :rabbit: <code>:rabbit:</code><br> :wolf: <code>:wolf:</code><br> :frog: <code>:frog:</code><br> :tiger: <code>:tiger:</code><br> :koala: <code>:koala:</code><br> :bear: <code>:bear:</code><br> :pig: <code>:pig:</code><br> :pig_nose: <code>:pig_nose:</code><br> :cow: <code>:cow:</code><br> :boar: <code>:boar:</code><br> :monkey_face: <code>:monkey_face:</code><br> :monkey: <code>:monkey:</code><br> :horse: <code>:horse:</code><br> :racehorse: <code>:racehorse:</code><br> :camel: <code>:camel:</code><br> :sheep: <code>:sheep:</code><br> :elephant: <code>:elephant:</code><br> :panda_face: <code>:panda_face:</code><br> :snake: <code>:snake:</code><br> :bird: <code>:bird:</code><br> :baby_chick: <code>:baby_chick:</code><br> :hatched_chick: <code>:hatched_chick:</code><br> :hatching_chick: <code>:hatching_chick:</code><br> :chicken: <code>:chicken:</code><br> :penguin: <code>:penguin:</code><br> :turtle: <code>:turtle:</code><br> :bug: <code>:bug:</code><br> :honeybee: <code>:honeybee:</code><br> :ant: <code>:ant:</code><br> :beetle: <code>:beetle:</code><br> :snail: <code>:snail:</code><br> :octopus: <code>:octopus:</code><br> :tropical_fish: <code>:tropical_fish:</code><br> :fish: <code>:fish:</code><br> :whale: <code>:whale:</code><br> :whale2: <code>:whale2:</code><br> :dolphin: <code>:dolphin:</code><br> :cow2: <code>:cow2:</code><br> :ram: <code>:ram:</code><br> :rat: <code>:rat:</code><br> :water_buffalo: <code>:water_buffalo:</code><br> :tiger2: <code>:tiger2:</code><br> :rabbit2: <code>:rabbit2:</code><br> :dragon: <code>:dragon:</code><br> :goat: <code>:goat:</code><br> :rooster: <code>:rooster:</code><br> :dog2: <code>:dog2:</code><br> :pig2: <code>:pig2:</code><br> :mouse2: <code>:mouse2:</code><br> :ox: <code>:ox:</code><br> :dragon_face: <code>:dragon_face:</code><br> :blowfish: <code>:blowfish:</code><br> :crocodile: <code>:crocodile:</code><br> :dromedary_camel: <code>:dromedary_camel:</code><br> :leopard: <code>:leopard:</code><br> :cat2: <code>:cat2:</code><br> :poodle: <code>:poodle:</code><br> :paw_prints: <code>:paw_prints:</code><br> :bouquet: <code>:bouquet:</code><br> :cherry_blossom: <code>:cherry_blossom:</code><br> :tulip: <code>:tulip:</code><br> :four_leaf_clover: <code>:four_leaf_clover:</code><br> :rose: <code>:rose:</code><br> :sunflower: <code>:sunflower:</code><br> :hibiscus: <code>:hibiscus:</code><br> :maple_leaf: <code>:maple_leaf:</code><br> :leaves: <code>:leaves:</code><br> :fallen_leaf: <code>:fallen_leaf:</code><br> :herb: <code>:herb:</code><br> :mushroom: <code>:mushroom:</code><br> :cactus: <code>:cactus:</code><br> :palm_tree: <code>:palm_tree:</code><br> :evergreen_tree: <code>:evergreen_tree:</code><br> :deciduous_tree: <code>:deciduous_tree:</code><br> :chestnut: <code>:chestnut:</code><br> :seedling: <code>:seedling:</code><br> :blossom: <code>:blossom:</code><br> :ear_of_rice: <code>:ear_of_rice:</code><br> :shell: <code>:shell:</code><br> :globe_with_meridians: <code>:globe_with_meridians:</code><br> :sun_with_face: <code>:sun_with_face:</code><br> :full_moon_with_face: <code>:full_moon_with_face:</code><br> :new_moon_with_face: <code>:new_moon_with_face:</code><br> :new_moon: <code>:new_moon:</code><br> :waxing_crescent_moon: <code>:waxing_crescent_moon:</code><br> :first_quarter_moon: <code>:first_quarter_moon:</code><br> :waxing_gibbous_moon: <code>:waxing_gibbous_moon:</code><br> :full_moon: <code>:full_moon:</code><br> :waning_gibbous_moon: <code>:waning_gibbous_moon:</code><br> :last_quarter_moon: <code>:last_quarter_moon:</code><br> :waning_crescent_moon: <code>:waning_crescent_moon:</code><br> :last_quarter_moon_with_face: <code>:last_quarter_moon_with_face:</code><br> :first_quarter_moon_with_face: <code>:first_quarter_moon_with_face:</code><br> :moon: <code>:moon:</code><br> :earth_africa: <code>:earth_africa:</code><br> :earth_americas: <code>:earth_americas:</code><br> :earth_asia: <code>:earth_asia:</code><br> :volcano: <code>:volcano:</code><br> :milky_way: <code>:milky_way:</code><br> :partly_sunny: <code>:partly_sunny:</code><br> :octocat: <code>:octocat:</code><br> :squirrel: <code>:squirrel:</code></p><h2 id="物体"><a href="#物体" class="headerlink" title="物体"></a>物体</h2><p> :bamboo: <code>:bamboo:</code><br> :gift_heart: <code>:gift_heart:</code><br> :dolls: <code>:dolls:</code><br> :school_satchel: <code>:school_satchel:</code><br> :mortar_board: <code>:mortar_board:</code><br> :flags: <code>:flags:</code><br> :fireworks: <code>:fireworks:</code><br> :sparkler: <code>:sparkler:</code><br> :wind_chime: <code>:wind_chime:</code><br> :rice_scene: <code>:rice_scene:</code><br> :jack_o_lantern: <code>:jack_o_lantern:</code><br> :ghost: <code>:ghost:</code><br> :santa: <code>:santa:</code><br> :christmas_tree: <code>:christmas_tree:</code><br> :gift: <code>:gift:</code><br> :bell: <code>:bell:</code><br> :no_bell: <code>:no_bell:</code><br> :tanabata_tree: <code>:tanabata_tree:</code><br> :tada: <code>:tada:</code><br> :confetti_ball: <code>:confetti_ball:</code><br> :balloon: <code>:balloon:</code><br> :crystal_ball: <code>:crystal_ball:</code><br> :cd: <code>:cd:</code><br> :dvd: <code>:dvd:</code><br> :floppy_disk: <code>:floppy_disk:</code><br> :camera: <code>:camera:</code><br> :video_camera: <code>:video_camera:</code><br> :movie_camera: <code>:movie_camera:</code><br> :computer: <code>:computer:</code><br> :tv: <code>:tv:</code><br> :iphone: <code>:iphone:</code><br> :phone: <code>:phone:</code><br> :telephone: <code>:telephone:</code><br> :telephone_receiver: <code>:telephone_receiver:</code><br> :pager: <code>:pager:</code><br> :fax: <code>:fax:</code><br> :minidisc: <code>:minidisc:</code><br> :vhs: <code>:vhs:</code><br> :sound: <code>:sound:</code><br> :speaker: <code>:speaker:</code><br> :mute: <code>:mute:</code><br> :loudspeaker: <code>:loudspeaker:</code><br> :mega: <code>:mega:</code><br> :hourglass: <code>:hourglass:</code><br> :hourglass_flowing_sand: <code>:hourglass_flowing_sand:</code><br> :alarm_clock: <code>:alarm_clock:</code><br> :watch: <code>:watch:</code><br> :radio: <code>:radio:</code><br> :satellite: <code>:satellite:</code><br> :loop: <code>:loop:</code><br> :mag: <code>:mag:</code><br> :mag_right: <code>:mag_right:</code><br> :unlock: <code>:unlock:</code><br> :lock: <code>:lock:</code><br> :lock_with_ink_pen: <code>:lock_with_ink_pen:</code><br> :closed_lock_with_key: <code>:closed_lock_with_key:</code><br> :key: <code>:key:</code><br> :bulb: <code>:bulb:</code><br> :flashlight: <code>:flashlight:</code><br> :high_brightness: <code>:high_brightness:</code><br> :low_brightness: <code>:low_brightness:</code><br> :electric_plug: <code>:electric_plug:</code><br> :battery: <code>:battery:</code><br> :calling: <code>:calling:</code><br> :email: <code>:email:</code><br> :mailbox: <code>:mailbox:</code><br> :postbox: <code>:postbox:</code><br> :bath: <code>:bath:</code><br> :bathtub: <code>:bathtub:</code><br> :shower: <code>:shower:</code><br> :toilet: <code>:toilet:</code><br> :wrench: <code>:wrench:</code><br> :nut_and_bolt: <code>:nut_and_bolt:</code><br> :hammer: <code>:hammer:</code><br> :seat: <code>:seat:</code><br> :moneybag: <code>:moneybag:</code><br> :yen: <code>:yen:</code><br> :dollar: <code>:dollar:</code><br> :pound: <code>:pound:</code><br> :euro: <code>:euro:</code><br> :credit_card: <code>:credit_card:</code><br> :money_with_wings: <code>:money_with_wings:</code><br> :e-mail: <code>:e:</code><br> :inbox_tray: <code>:inbox_tray:</code><br> :outbox_tray: <code>:outbox_tray:</code><br> :envelope: <code>:envelope:</code><br> :incoming_envelope: <code>:incoming_envelope:</code><br> :postal_horn: <code>:postal_horn:</code><br> :mailbox_closed: <code>:mailbox_closed:</code><br> :mailbox_with_mail: <code>:mailbox_with_mail:</code><br> :mailbox_with_no_mail: <code>:mailbox_with_no_mail:</code><br> :door: <code>:door:</code><br> :smoking: <code>:smoking:</code><br> :bomb: <code>:bomb:</code><br> :gun: <code>:gun:</code><br> :hocho: <code>:hocho:</code><br> :pill: <code>:pill:</code><br> :syringe: <code>:syringe:</code><br> :page_facing_up: <code>:page_facing_up:</code><br> :page_with_curl: <code>:page_with_curl:</code><br> :bookmark_tabs: <code>:bookmark_tabs:</code><br> :bar_chart: <code>:bar_chart:</code><br> :chart_with_upwards_trend: <code>:chart_with_upwards_trend:</code><br> :chart_with_downwards_trend: <code>:chart_with_downwards_trend:</code><br> :scroll: <code>:scroll:</code><br> :clipboard: <code>:clipboard:</code><br> :calendar: <code>:calendar:</code><br> :date: <code>:date:</code><br> :card_index: <code>:card_index:</code><br> :file_folder: <code>:file_folder:</code><br> :open_file_folder: <code>:open_file_folder:</code><br> :scissors: <code>:scissors:</code><br> :pushpin: <code>:pushpin:</code><br> :paperclip: <code>:paperclip:</code><br> :black_nib: <code>:black_nib:</code><br> :pencil2: <code>:pencil2:</code><br> :straight_ruler: <code>:straight_ruler:</code><br> :triangular_ruler: <code>:triangular_ruler:</code><br> :closed_book: <code>:closed_book:</code><br> :green_book: <code>:green_book:</code><br> :blue_book: <code>:blue_book:</code><br> :orange_book: <code>:orange_book:</code><br> :notebook: <code>:notebook:</code><br> :notebook_with_decorative_cover: <code>:notebook_with_decorative_cover:</code><br> :ledger: <code>:ledger:</code><br> :books: <code>:books:</code><br> :bookmark: <code>:bookmark:</code><br> :name_badge: <code>:name_badge:</code><br> :microscope: <code>:microscope:</code><br> :telescope: <code>:telescope:</code><br> :newspaper: <code>:newspaper:</code><br> :football: <code>:football:</code><br> :basketball: <code>:basketball:</code><br> :soccer: <code>:soccer:</code><br> :baseball: <code>:baseball:</code><br> :tennis: <code>:tennis:</code><br> :8ball: <code>:8ball:</code><br> :rugby_football: <code>:rugby_football:</code><br> :bowling: <code>:bowling:</code><br> :golf: <code>:golf:</code><br> :mountain_bicyclist: <code>:mountain_bicyclist:</code><br> :bicyclist: <code>:bicyclist:</code><br> :horse_racing: <code>:horse_racing:</code><br> :snowboarder: <code>:snowboarder:</code><br> :swimmer: <code>:swimmer:</code><br> :surfer: <code>:surfer:</code><br> :ski: <code>:ski:</code><br> :spades: <code>:spades:</code><br> :hearts: <code>:hearts:</code><br> :clubs: <code>:clubs:</code><br> :diamonds: <code>:diamonds:</code><br> :gem: <code>:gem:</code><br> :ring: <code>:ring:</code><br> :trophy: <code>:trophy:</code><br> :musical_score: <code>:musical_score:</code><br> :musical_keyboard: <code>:musical_keyboard:</code><br> :violin: <code>:violin:</code><br> :space_invader: <code>:space_invader:</code><br> :video_game: <code>:video_game:</code><br> :black_joker: <code>:black_joker:</code><br> :flower_playing_cards: <code>:flower_playing_cards:</code><br> :game_die: <code>:game_die:</code><br> :dart: <code>:dart:</code><br> :mahjong: <code>:mahjong:</code><br> :clapper: <code>:clapper:</code><br> :memo: <code>:memo:</code><br> :pencil: <code>:pencil:</code><br> :book: <code>:book:</code><br> :art: <code>:art:</code><br> :microphone: <code>:microphone:</code><br> :headphones: <code>:headphones:</code><br> :trumpet: <code>:trumpet:</code><br> :saxophone: <code>:saxophone:</code><br> :guitar: <code>:guitar:</code><br> :shoe: <code>:shoe:</code><br> :sandal: <code>:sandal:</code><br> :high_heel: <code>:high_heel:</code><br> :lipstick: <code>:lipstick:</code><br> :boot: <code>:boot:</code><br> :shirt: <code>:shirt:</code><br> :tshirt: <code>:tshirt:</code><br> :necktie: <code>:necktie:</code><br> :womans_clothes: <code>:womans_clothes:</code><br> :dress: <code>:dress:</code><br> :running_shirt_with_sash: <code>:running_shirt_with_sash:</code><br> :jeans: <code>:jeans:</code><br> :kimono: <code>:kimono:</code><br> :bikini: <code>:bikini:</code><br> :ribbon: <code>:ribbon:</code><br> :tophat: <code>:tophat:</code><br> :crown: <code>:crown:</code><br> :womans_hat: <code>:womans_hat:</code><br> :mans_shoe: <code>:mans_shoe:</code><br> :closed_umbrella: <code>:closed_umbrella:</code><br> :briefcase: <code>:briefcase:</code><br> :handbag: <code>:handbag:</code><br> :pouch: <code>:pouch:</code><br> :purse: <code>:purse:</code><br> :eyeglasses: <code>:eyeglasses:</code><br> :fishing_pole_and_fish: <code>:fishing_pole_and_fish:</code><br> :coffee: <code>:coffee:</code><br> :tea: <code>:tea:</code><br> :sake: <code>:sake:</code><br> :baby_bottle: <code>:baby_bottle:</code><br> :beer: <code>:beer:</code><br> :beers: <code>:beers:</code><br> :cocktail: <code>:cocktail:</code><br> :tropical_drink: <code>:tropical_drink:</code><br> :wine_glass: <code>:wine_glass:</code><br> :fork_and_knife: <code>:fork_and_knife:</code><br> :pizza: <code>:pizza:</code><br> :hamburger: <code>:hamburger:</code><br> :fries: <code>:fries:</code><br> :poultry_leg: <code>:poultry_leg:</code><br> :meat_on_bone: <code>:meat_on_bone:</code><br> :spaghetti: <code>:spaghetti:</code><br> :curry: <code>:curry:</code><br> :fried_shrimp: <code>:fried_shrimp:</code><br> :bento: <code>:bento:</code><br> :sushi: <code>:sushi:</code><br> :fish_cake: <code>:fish_cake:</code><br> :rice_ball: <code>:rice_ball:</code><br> :rice_cracker: <code>:rice_cracker:</code><br> :rice: <code>:rice:</code><br> :ramen: <code>:ramen:</code><br> :stew: <code>:stew:</code><br> :oden: <code>:oden:</code><br> :dango: <code>:dango:</code><br> :egg: <code>:egg:</code><br> :bread: <code>:bread:</code><br> :doughnut: <code>:doughnut:</code><br> :custard: <code>:custard:</code><br> :icecream: <code>:icecream:</code><br> :ice_cream: <code>:ice_cream:</code><br> :shaved_ice: <code>:shaved_ice:</code><br> :birthday: <code>:birthday:</code><br> :cake: <code>:cake:</code><br> :cookie: <code>:cookie:</code><br> :chocolate_bar: <code>:chocolate_bar:</code><br> :candy: <code>:candy:</code><br> :lollipop: <code>:lollipop:</code><br> :honey_pot: <code>:honey_pot:</code><br> :apple: <code>:apple:</code><br> :green_apple: <code>:green_apple:</code><br> :tangerine: <code>:tangerine:</code><br> :lemon: <code>:lemon:</code><br> :cherries: <code>:cherries:</code><br> :grapes: <code>:grapes:</code><br> :watermelon: <code>:watermelon:</code><br> :strawberry: <code>:strawberry:</code><br> :peach: <code>:peach:</code><br> :melon: <code>:melon:</code><br> :banana: <code>:banana:</code><br> :pear: <code>:pear:</code><br> :pineapple: <code>:pineapple:</code><br> :sweet_potato: <code>:sweet_potato:</code><br> :eggplant: <code>:eggplant:</code><br> :tomato: <code>:tomato:</code><br> :corn: <code>:corn:</code></p><h2 id="地点"><a href="#地点" class="headerlink" title="地点"></a>地点</h2><p> :house: <code>:house:</code><br> :house_with_garden: <code>:house_with_garden:</code><br> :school: <code>:school:</code><br> :office: <code>:office:</code><br> :post_office: <code>:post_office:</code><br> :hospital: <code>:hospital:</code><br> :bank: <code>:bank:</code><br> :convenience_store: <code>:convenience_store:</code><br> :love_hotel: <code>:love_hotel:</code><br> :hotel: <code>:hotel:</code><br> :wedding: <code>:wedding:</code><br> :church: <code>:church:</code><br> :department_store: <code>:department_store:</code><br> :european_post_office: <code>:european_post_office:</code><br> :city_sunrise: <code>:city_sunrise:</code><br> :city_sunset: <code>:city_sunset:</code><br> :japanese_castle: <code>:japanese_castle:</code><br> :european_castle: <code>:european_castle:</code><br> :tent: <code>:tent:</code><br> :factory: <code>:factory:</code><br> :tokyo_tower: <code>:tokyo_tower:</code><br> :japan: <code>:japan:</code><br> :mount_fuji: <code>:mount_fuji:</code><br> :sunrise_over_mountains: <code>:sunrise_over_mountains:</code><br> :sunrise: <code>:sunrise:</code><br> :stars: <code>:stars:</code><br> :statue_of_liberty: <code>:statue_of_liberty:</code><br> :bridge_at_night: <code>:bridge_at_night:</code><br> :carousel_horse: <code>:carousel_horse:</code><br> :rainbow: <code>:rainbow:</code><br> :ferris_wheel: <code>:ferris_wheel:</code><br> :fountain: <code>:fountain:</code><br> :roller_coaster: <code>:roller_coaster:</code><br> :ship: <code>:ship:</code><br> :speedboat: <code>:speedboat:</code><br> :boat: <code>:boat:</code><br> :sailboat: <code>:sailboat:</code><br> :rowboat: <code>:rowboat:</code><br> :anchor: <code>:anchor:</code><br> :rocket: <code>:rocket:</code><br> :airplane: <code>:airplane:</code><br> :helicopter: <code>:helicopter:</code><br> :steam_locomotive: <code>:steam_locomotive:</code><br> :tram: <code>:tram:</code><br> :mountain_railway: <code>:mountain_railway:</code><br> :bike: <code>:bike:</code><br> :aerial_tramway: <code>:aerial_tramway:</code><br> :suspension_railway: <code>:suspension_railway:</code><br> :mountain_cableway: <code>:mountain_cableway:</code><br> :tractor: <code>:tractor:</code><br> :blue_car: <code>:blue_car:</code><br> :oncoming_automobile: <code>:oncoming_automobile:</code><br> :car: <code>:car:</code><br> :red_car: <code>:red_car:</code><br> :taxi: <code>:taxi:</code><br> :oncoming_taxi: <code>:oncoming_taxi:</code><br> :articulated_lorry: <code>:articulated_lorry:</code><br> :bus: <code>:bus:</code><br> :oncoming_bus: <code>:oncoming_bus:</code><br> :rotating_light: <code>:rotating_light:</code><br> :police_car: <code>:police_car:</code><br> :oncoming_police_car: <code>:oncoming_police_car:</code><br> :fire_engine: <code>:fire_engine:</code><br> :ambulance: <code>:ambulance:</code><br> :minibus: <code>:minibus:</code><br> :truck: <code>:truck:</code><br> :train: <code>:train:</code><br> :station: <code>:station:</code><br> :train2: <code>:train2:</code><br> :bullettrain_front: <code>:bullettrain_front:</code><br> :bullettrain_side: <code>:bullettrain_side:</code><br> :light_rail: <code>:light_rail:</code><br> :monorail: <code>:monorail:</code><br> :railway_car: <code>:railway_car:</code><br> :trolleybus: <code>:trolleybus:</code><br> :ticket: <code>:ticket:</code><br> :fuelpump: <code>:fuelpump:</code><br> :vertical_traffic_light: <code>:vertical_traffic_light:</code><br> :traffic_light: <code>:traffic_light:</code><br> :warning: <code>:warning:</code><br> :construction: <code>:construction:</code><br> :beginner: <code>:beginner:</code><br> :atm: <code>:atm:</code><br> :slot_machine: <code>:slot_machine:</code><br> :busstop: <code>:busstop:</code><br> :barber: <code>:barber:</code><br> :hotsprings: <code>:hotsprings:</code><br> :checkered_flag: <code>:checkered_flag:</code><br> :crossed_flags: <code>:crossed_flags:</code><br> :izakaya_lantern: <code>:izakaya_lantern:</code><br> :moyai: <code>:moyai:</code><br> :circus_tent: <code>:circus_tent:</code><br> :performing_arts: <code>:performing_arts:</code><br> :round_pushpin: <code>:round_pushpin:</code><br> :triangular_flag_on_post: <code>:triangular_flag_on_post:</code><br> :jp: <code>:jp:</code><br> :kr: <code>:kr:</code><br> :cn: <code>:cn:</code><br> :us: <code>:us:</code><br> :fr: <code>:fr:</code><br> :es: <code>:es:</code><br> :it: <code>:it:</code><br> :ru: <code>:ru:</code><br> :gb: <code>:gb:</code><br> :uk: <code>:uk:</code><br> :de: <code>:de:</code></p><h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><p> :one: <code>:one:</code><br> :two: <code>:two:</code><br> :three: <code>:three:</code><br> :four: <code>:four:</code><br> :five: <code>:five:</code><br> :six: <code>:six:</code><br> :seven: <code>:seven:</code><br> :eight: <code>:eight:</code><br> :nine: <code>:nine:</code><br> :keycap_ten: <code>:keycap_ten:</code><br> :1234: <code>:1234:</code><br> :zero: <code>:zero:</code><br> :hash: <code>:hash:</code><br> :symbols: <code>:symbols:</code><br> :arrow_backward: <code>:arrow_backward:</code><br> :arrow_down: <code>:arrow_down:</code><br> :arrow_forward: <code>:arrow_forward:</code><br> :arrow_left: <code>:arrow_left:</code><br> :capital_abcd: <code>:capital_abcd:</code><br> :abcd: <code>:abcd:</code><br> :abc: <code>:abc:</code><br> :arrow_lower_left: <code>:arrow_lower_left:</code><br> :arrow_lower_right: <code>:arrow_lower_right:</code><br> :arrow_right: <code>:arrow_right:</code><br> :arrow_up: <code>:arrow_up:</code><br> :arrow_upper_left: <code>:arrow_upper_left:</code><br> :arrow_upper_right: <code>:arrow_upper_right:</code><br> :arrow_double_down: <code>:arrow_double_down:</code><br> :arrow_double_up: <code>:arrow_double_up:</code><br> :arrow_down_small: <code>:arrow_down_small:</code><br> :arrow_heading_down: <code>:arrow_heading_down:</code><br> :arrow_heading_up: <code>:arrow_heading_up:</code><br> :leftwards_arrow_with_hook: <code>:leftwards_arrow_with_hook:</code><br> :arrow_right_hook: <code>:arrow_right_hook:</code><br> :left_right_arrow: <code>:left_right_arrow:</code><br> :arrow_up_down: <code>:arrow_up_down:</code><br> :arrow_up_small: <code>:arrow_up_small:</code><br> :arrows_clockwise: <code>:arrows_clockwise:</code><br> :arrows_counterclockwise: <code>:arrows_counterclockwise:</code><br> :rewind: <code>:rewind:</code><br> :fast_forward: <code>:fast_forward:</code><br> :information_source: <code>:information_source:</code><br> :ok: <code>:ok:</code><br> :twisted_rightwards_arrows: <code>:twisted_rightwards_arrows:</code><br> :repeat: <code>:repeat:</code><br> :repeat_one: <code>:repeat_one:</code><br> :new: <code>:new:</code><br> :top: <code>:top:</code><br> :up: <code>:up:</code><br> :cool: <code>:cool:</code><br> :free: <code>:free:</code><br> :ng: <code>:ng:</code><br> :cinema: <code>:cinema:</code><br> :koko: <code>:koko:</code><br> :signal_strength: <code>:signal_strength:</code><br> :u5272: <code>:u5272:</code><br> :u5408: <code>:u5408:</code><br> :u55b6: <code>:u55b6:</code><br> :u6307: <code>:u6307:</code><br> :u6708: <code>:u6708:</code><br> :u6709: <code>:u6709:</code><br> :u6e80: <code>:u6e80:</code><br> :u7121: <code>:u7121:</code><br> :u7533: <code>:u7533:</code><br> :u7a7a: <code>:u7a7a:</code><br> :u7981: <code>:u7981:</code><br> :sa: <code>:sa:</code><br> :restroom: <code>:restroom:</code><br> :mens: <code>:mens:</code><br> :womens: <code>:womens:</code><br> :baby_symbol: <code>:baby_symbol:</code><br> :no_smoking: <code>:no_smoking:</code><br> :parking: <code>:parking:</code><br> :wheelchair: <code>:wheelchair:</code><br> :metro: <code>:metro:</code><br> :baggage_claim: <code>:baggage_claim:</code><br> :accept: <code>:accept:</code><br> :wc: <code>:wc:</code><br> :potable_water: <code>:potable_water:</code><br> :put_litter_in_its_place: <code>:put_litter_in_its_place:</code><br> :secret: <code>:secret:</code><br> :congratulations: <code>:congratulations:</code><br> :m: <code>:m:</code><br> :passport_control: <code>:passport_control:</code><br> :left_luggage: <code>:left_luggage:</code><br> :customs: <code>:customs:</code><br> :ideograph_advantage: <code>:ideograph_advantage:</code><br> :cl: <code>:cl:</code><br> :sos: <code>:sos:</code><br> :id: <code>:id:</code><br> :no_entry_sign: <code>:no_entry_sign:</code><br> :underage: <code>:underage:</code><br> :no_mobile_phones: <code>:no_mobile_phones:</code><br> :do_not_litter: <code>:do_not_litter:</code><br> :non-potable_water: <code>:non:</code><br> :no_bicycles: <code>:no_bicycles:</code><br> :no_pedestrians: <code>:no_pedestrians:</code><br> :children_crossing: <code>:children_crossing:</code><br> :no_entry: <code>:no_entry:</code><br> :eight_spoked_asterisk: <code>:eight_spoked_asterisk:</code><br> :eight_pointed_black_star: <code>:eight_pointed_black_star:</code><br> :heart_decoration: <code>:heart_decoration:</code><br> :vs: <code>:vs:</code><br> :vibration_mode: <code>:vibration_mode:</code><br> :mobile_phone_off: <code>:mobile_phone_off:</code><br> :chart: <code>:chart:</code><br> :currency_exchange: <code>:currency_exchange:</code><br> :aries: <code>:aries:</code><br> :taurus: <code>:taurus:</code><br> :gemini: <code>:gemini:</code><br> :cancer: <code>:cancer:</code><br> :leo: <code>:leo:</code><br> :virgo: <code>:virgo:</code><br> :libra: <code>:libra:</code><br> :scorpius: <code>:scorpius:</code><br> :sagittarius: <code>:sagittarius:</code><br> :capricorn: <code>:capricorn:</code><br> :aquarius: <code>:aquarius:</code><br> :pisces: <code>:pisces:</code><br> :ophiuchus: <code>:ophiuchus:</code><br> :six_pointed_star: <code>:six_pointed_star:</code><br> :negative_squared_cross_mark: <code>:negative_squared_cross_mark:</code><br> :a: <code>:a:</code><br> :b: <code>:b:</code><br> :ab: <code>:ab:</code><br> :o2: <code>:o2:</code><br> :diamond_shape_with_a_dot_inside: <code>:diamond_shape_with_a_dot_inside:</code><br> :recycle: <code>:recycle:</code><br> :end: <code>:end:</code><br> :on: <code>:on:</code><br> :soon: <code>:soon:</code><br> :clock1: <code>:clock1:</code><br> :clock130: <code>:clock130:</code><br> :clock10: <code>:clock10:</code><br> :clock1030: <code>:clock1030:</code><br> :clock11: <code>:clock11:</code><br> :clock1130: <code>:clock1130:</code><br> :clock12: <code>:clock12:</code><br> :clock1230: <code>:clock1230:</code><br> :clock2: <code>:clock2:</code><br> :clock230: <code>:clock230:</code><br> :clock3: <code>:clock3:</code><br> :clock330: <code>:clock330:</code><br> :clock4: <code>:clock4:</code><br> :clock430: <code>:clock430:</code><br> :clock5: <code>:clock5:</code><br> :clock530: <code>:clock530:</code><br> :clock6: <code>:clock6:</code><br> :clock630: <code>:clock630:</code><br> :clock7: <code>:clock7:</code><br> :clock730: <code>:clock730:</code><br> :clock8: <code>:clock8:</code><br> :clock830: <code>:clock830:</code><br> :clock9: <code>:clock9:</code><br> :clock930: <code>:clock930:</code><br> :heavy_dollar_sign: <code>:heavy_dollar_sign:</code><br> :copyright: <code>:copyright:</code><br> :registered: <code>:registered:</code><br> :tm: <code>:tm:</code><br> :x: <code>:x:</code><br> :heavy_exclamation_mark: <code>:heavy_exclamation_mark:</code><br> :bangbang: <code>:bangbang:</code><br> :interrobang: <code>:interrobang:</code><br> :o: <code>:o:</code><br> :heavy_multiplication_x: <code>:heavy_multiplication_x:</code><br> :heavy_plus_sign: <code>:heavy_plus_sign:</code><br> :heavy_minus_sign: <code>:heavy_minus_sign:</code><br> :heavy_division_sign: <code>:heavy_division_sign:</code><br> :white_flower: <code>:white_flower:</code><br> :100: <code>:100:</code><br> :heavy_check_mark: <code>:heavy_check_mark:</code><br> :ballot_box_with_check: <code>:ballot_box_with_check:</code><br> :radio_button: <code>:radio_button:</code><br> :link: <code>:link:</code><br> :curly_loop: <code>:curly_loop:</code><br> :wavy_dash: <code>:wavy_dash:</code><br> :part_alternation_mark: <code>:part_alternation_mark:</code><br> :trident: <code>:trident:</code><br> :black_large_square: <code>:black_large_square:</code><br> :white_large_square: <code>:white_large_square:</code><br> :white_check_mark: <code>:white_check_mark:</code><br> :white_square_button: <code>:white_square_button:</code><br> :black_square_button: <code>:black_square_button:</code><br> :black_circle: <code>:black_circle:</code><br> :white_circle: <code>:white_circle:</code><br> :red_circle: <code>:red_circle:</code><br> :large_blue_circle: <code>:large_blue_circle:</code><br> :large_blue_diamond: <code>:large_blue_diamond:</code><br> :large_orange_diamond: <code>:large_orange_diamond:</code><br> :small_blue_diamond: <code>:small_blue_diamond:</code><br> :small_orange_diamond: <code>:small_orange_diamond:</code><br> :small_red_triangle: <code>:small_red_triangle:</code><br> :small_red_triangle_down: <code>:small_red_triangle_down:</code><br> :shipit: <code>:shipit:</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/git-bash-make/git-server-build/"/>
      <url>/blog/2019/06/12/git-bash-make/git-server-build/</url>
      
        <content type="html"><![CDATA[<h1 id="git-搭建私服"><a href="#git-搭建私服" class="headerlink" title="git 搭建私服"></a>git 搭建私服</h1><p> Centos 下搭建 Git 服务器。</p><p> 1、安装Git</p><p><a href="../Linux/install/git.md">点此查看git 在Centos下的安装方法</a></p><p> 2、创建用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> groupadd git          # 创建一个用户组</span><br><span class="line"><span class="meta">$</span> adduser git -g git    # 将git用户添加到git用户组</span><br><span class="line"><span class="meta">$</span> su git                # 切换到git用户</span><br></pre></td></tr></table></figure><p>3、创建证书登录</p><blockquote><p>收集所有需要登录的用户的公钥，公钥位于id_rsa.pub文件中，把我们的公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。</p></blockquote><p>如果没有该文件创建它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /home/git/</span><br><span class="line"><span class="meta">$</span> mkdir .ssh</span><br><span class="line"><span class="meta">$</span> chmod 700 .ssh</span><br><span class="line"><span class="meta">$</span> touch .ssh/authorized_keys# 这个文件是用来存放用户的 公钥 的，一行一个</span><br><span class="line"><span class="meta">$</span> chmod 600 .ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>4、初始化Git仓库</p><p>首先我们选定一个目录作为Git仓库，假定是/home/gitrepo/javaScript.git，在/home/gitrepo目录下输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /home</span><br><span class="line"><span class="meta">$</span> mkdir gitrepo</span><br><span class="line"><span class="meta">$</span> chown git:git gitrepo/</span><br><span class="line"><span class="meta">$</span> cd gitrepo</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> git init --bare javaScript.git</span><br><span class="line">Initialized empty Git repository in /home/gitrepo/javaScript.git/</span><br></pre></td></tr></table></figure><blockquote><p>以上命令Git创建一个空仓库，服务器上的Git仓库通常都以.git结尾。然后，把仓库所属用户改为git：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> chown -R git:git javaScript.git</span><br></pre></td></tr></table></figure><p>5、克隆仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone git@192.168.45.4:/home/gitrepo/javaScript.git</span><br><span class="line">Cloning into 'javaScript'...</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure><p>192.168.45.4 为 Git 所在服务器 ip ，你需要将其修改为你自己的 Git 服务 ip。</p><p>这样我们的 Git 服务器安装就完成了，接下来我们可以禁用 git 用户通过shell登录，可以通过编辑/etc/passwd文件完成。找到类似下面的一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:503:503::/home/git:/bin/bash</span><br></pre></td></tr></table></figure><p>改为：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:503:503::/home/git:/sbin/nologin</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/editor/vsCode/shortCutKey/"/>
      <url>/blog/2019/06/12/editor/vsCode/shortCutKey/</url>
      
        <content type="html"><![CDATA[<h1 id="mac-os下vscode快捷键"><a href="#mac-os下vscode快捷键" class="headerlink" title="mac os下vscode快捷键"></a>mac os下vscode快捷键</h1><h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><p><code>Command + Shift + P / F1</code> 显示命令面板 <br><br><code>Command + P</code> 快速打开<br><br><code>Command + Shift + N</code> 打开新窗口<br><br><code>Command + W</code> 关闭窗口<br></p><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p><code>Command + X</code> 剪切（未选中文本的情况下，剪切光标所在行）<br><br><code>Command + C</code> 复制（未选中文本的情况下，复制光标所在行）<br><br><code>Option + Up</code> 向上移动行<br><br><code>Option + Down</code> 向下移动行<br><br><code>Option + Shift + Up</code> 向上复制行<br><br><code>Option + Shift + Down</code> 向下复制行<br><br><code>Command + Shift + K</code> 删除行<br><br><code>Command + Enter</code> 下一行插入<br><br><code>Command + Shift + Enter</code> 上一行插入<br><br><code>Command + Shift +</code> 跳转到匹配的括<br><br><code>Command + [</code> 减少缩进<br><br><code>Command + ]</code> 增加缩进<br><br><code>Home</code> 跳转至行首<br><br><code>End</code> 跳转到行尾<br><br><code>Command + Up</code> 跳转至文件开头<br><br><code>Command + Down</code> 跳转至文件结尾<br><br><code>Ctrl + PgUp</code> 按行向上滚动<br><br><code>Ctrl + PgDown</code> 按行向下滚动<br><br><code>Command + PgUp</code> 按屏向上滚动<br><br><code>Command + PgDown</code> 按屏向下滚动<br><br><code>Command + Shift + [</code> 折叠代码块<br><br><code>Command + Shift + ]</code> 展开代码块<br><br><code>Command + K Command + [</code> 折叠全部子代码块<br><br><code>Command + K Command + ]</code> 展开全部子代码块<br><br><code>Command + K Command + 0</code> 折叠全部代码块<br><br><code>Command + K Command + J</code> 展开全部代码块<br><br><code>Command + K Command + C</code> 添加行注释<br><br><code>Command + K Command + U</code> 移除行注释<br><br><code>Command + /</code> 添加、移除行注释<br><br><code>Option + Shift + A</code> 添加、移除块注释<br><br><code>Option + Z</code> 自动换行、取消自动换行<br></p><ul><li>多光标与选择</li></ul><p><code>Option + 点击</code> 插入多个光标<br><br><code>Command + Option + Up</code> 向上插入光标<br><br><code>Command + Option + Down</code> 向下插入光标<br><br><code>Command + U</code> 撤销上一个光标操作<br><br><code>Option + Shift + I</code> 在所选行的行尾插入光标<br><br><code>Command + I</code> 选中当前行<br><br><code>Command + Shift + L</code> 选中所有与当前选中内容相同部分<br><br><code>Command + F2</code> 选中所有与当前选中单词相同的单词<br><br><code>Command + Ctrl + Shift + Left</code> 折叠选中<br><br><code>Command + Ctrl + Shift + Right</code> 展开选中<br><br><code>Alt + Shift + 拖动鼠标</code> 选中代码块<br><br><code>Command + Shift + Option + Up</code> 列选择 向上<br><br><code>Command + Shift + Option + Down</code> 列选择 向下<br><br><code>Command + Shift + Option + Left</code> 列选择 向左<br><br><code>Command + Shift + Option + Right</code> 列选择 向右<br><br><code>Command + Shift + Option + PgUp</code> 列选择 向上翻页<br><br><code>Command + Shift + Option + PgDown</code> 列选择 向下翻页<br></p><ul><li>查找替换</li></ul><p><code>Command + F</code> 查找<br><br><code>Command + Option + F</code> 替换<br><br><code>Command + G</code> 查找下一个<br><br><code>Command + Shift + G</code> 查找上一个<br><br><code>Option + Enter</code> 选中所有匹配项<br><br><code>Command + D</code> 向下选中相同内容<br><br><code>Command + K Command + D</code> 移除前一个向下选中相同内容<br></p><ul><li>进阶</li></ul><p><code>Ctrl + Space</code> 打开建议<br><br><code>Command + Shift + Space</code> 参数提示<br><br><code>Tab Emmet</code>插件缩写补全<br><br><code>Option + Shift + F</code> 格式化<br><br><code>Command + K Command + F</code> 格式化选中内容<br><br><code>F12</code> 跳转到声明位置<br><br><code>Option + F12</code> 查看具体声明内容<br><br><code>Command + K F12</code> 分屏查看具体声明内容<br><br><code>Command + .</code> 快速修复<br><br><code>Shift + F12</code> 显示引用<br><br><code>F2</code> 重命名符号<br><br><code>Command + Shift + .</code> 替换为上一个值<br><br><code>Command + Shift + ,</code> 替换为下一个值<br><br><code>Command + K Command + X</code> 删除行尾多余空格<br><br><code>Command + K M</code> 更改文件语言<br></p><ul><li>导航</li></ul><p><code>Command + T</code> 显示所有符号<br><br><code>Ctrl + G</code>跳转至某行<br><br><code>Command + P</code> 跳转到某个文件<br><code>Command + Shift + O</code> 跳转到某个符号<br><br><code>Command + Shift + M</code> 打开问题面板<br><br><code>F8</code> 下一个错误或警告位置<br><br><code>Shift + F8</code> 上一个错误或警告位置<br><br><code>Ctrl + Shift + Tab</code> 编辑器历史记录<br><br><code>Ctrl + -</code> 后退<br><br><code>Ctrl + Shift + -</code> 前进<br><br><code>Ctrl + Shift + M Tab</code> 切换焦点<br></p><ul><li>编辑器管理</li></ul><p><code>Command + W</code> 关闭编辑器<br><br><code>Command + K F</code> 关闭文件夹<br><br><code>Command +</code> 编辑器分屏<br><br><code>Command + 1</code> 切换到第一分组<br><br><code>Command + 2</code> 切换到第二分组<br><br><code>Command + 3</code> 切换到第三分组<br><br><code>Command + K Command + Left</code> 切换到上一分组<br><br><code>Command + K Command + Right</code> 切换到下一分组<br><br><code>Command + K Command + Shift + Left</code> 左移编辑器<br><br><code>Command + K Command + Shift + Right</code> 右移编辑器<br><br><code>Command + K Left</code> 激活左侧编辑组<br><br><code>Command + K Right</code> 激活右侧编辑组<br></p><ul><li>文件管理</li></ul><p><code>Command + N</code> 新建文件<br><br><code>Command + O</code> 打开文件<br><br><code>Command + S</code> 保存文件<br><br><code>Command + Shift + S</code> 另存为<br><br><code>Command + Option + S</code> 全部保存<br><br><code>Command + W</code> 关闭<br><br><code>Command + K Command + W</code> 全部关闭<br><br><code>Command + Shift + T</code> 重新打开被关闭的编辑器<br><br><code>Command + K Enter</code> 保持打开<br><br><code>Ctrl + Tab</code> 打开下一个<br><br><code>Ctrl + Shift + Tab</code> 打开上一个<br><br><code>Command + K P</code> 复制当前文件路径<br><br><code>Command + K R</code> 在资源管理器中查看当前文件<br><br><code>Command + K O</code> 新窗口打开当前文件<br></p><ul><li>显示</li></ul><p><code>Command + Ctrl + F</code> 全屏、退出全屏<br><br><code>Command + Option + 1</code> 切换编辑器分屏方式（横、竖）<br><br><code>Command + +</code> 放大<br><br><code>Command + -</code> 缩小<br><br><code>Command + B</code> 显示、隐藏侧边栏<br><br><code>Command + Shift + E</code> 显示资源管理器 或 切换焦点<br><br><code>Command + Shift + F</code> 显示搜索框<br><br><code>Ctrl + Shift + G</code> 显示Git面板<br><br><code>Command + Shift + D</code> 显示调试面板<br><br><code>Command + Shift + X</code> 显示插件面板<br><br><code>Command + Shift + H</code> 全局搜索替换<br><br><code>Command + Shift + J</code> 显示、隐藏高级搜索<br><br><code>Command + Shift + C</code> 打开新终端<br><br><code>Command + Shift + U</code> 显示输出面板<br><br><code>Command + Shift + V</code> Markdown预览窗口<br><br><code>Command + K V</code> 分屏显示 Markdown预览窗口<br></p><ul><li>调试</li></ul><p><code>F9</code> 设置 或 取消断点<br><br><code>F5</code> 开始 或 继续<br><br><code>F11</code> 进入<br><br><code>Shift + F11</code> 跳出<br><br><code>F10</code> 跳过<br><br><code>Command + K Command + I</code> 显示悬停信息<br></p><ul><li>集成终端</li></ul><p>Ctrl + ` 显示终端 Ctrl + Shift +` 新建终端<br><br><code>Command + Up</code> 向上滚动<br><br><code>Command + Down</code> 向下滚动<br><br><code>PgUp</code> 向上翻页<br><br><code>PgDown</code> 向下翻页<br><br><code>Command + Home</code> 滚动到顶部<br><br><code>Command + End</code> 滚动到底部<br></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/editor/vsCode/README/"/>
      <url>/blog/2019/06/12/editor/vsCode/README/</url>
      
        <content type="html"><![CDATA[<h1 id="vscode-配置"><a href="#vscode-配置" class="headerlink" title="vscode 配置"></a>vscode 配置</h1><p>安装插件：</p><p>配置：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"editor.fontSize"</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">"editor.tabSize"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"files.associations"</span>: &#123;</span><br><span class="line">    <span class="attr">"*.vue"</span>: <span class="string">"vue"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"files.autoSave"</span>: <span class="string">"onFocusChange"</span>,</span><br><span class="line">  <span class="attr">"docthis.authorName"</span>: <span class="string">"royalu"</span>,</span><br><span class="line">  <span class="attr">"docthis.includeAuthorTag"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"eslint.validate"</span>: [</span><br><span class="line">    <span class="string">"javascript"</span>,</span><br><span class="line">    <span class="string">"javascriptreact"</span>,</span><br><span class="line">    <span class="string">"html"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"eslint.options"</span>: &#123;</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">      <span class="string">"html"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"beautify.language"</span>: &#123;</span><br><span class="line">    <span class="attr">"js"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: [</span><br><span class="line">        <span class="string">"javascript"</span>,</span><br><span class="line">        <span class="string">"json"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"filename"</span>: [</span><br><span class="line">        <span class="string">".jshintrc"</span>,</span><br><span class="line">        <span class="string">".jsbeautify"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"css"</span>: [</span><br><span class="line">      <span class="string">"css"</span>,</span><br><span class="line">      <span class="string">"scss"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"html"</span>: [</span><br><span class="line">      <span class="string">"htm"</span>,</span><br><span class="line">      <span class="string">"html"</span>,</span><br><span class="line">      <span class="string">"cshtml"</span>,</span><br><span class="line">      <span class="string">"vue"</span> //在这里加上vue</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\Program Files\\Git\\bin\\bash.exe"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>快捷键：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">// 将按键绑定配置放入此文件中即可覆盖默认值</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+d"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-editor.action.addSelectionToNextFindMatch"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorFocus"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+d"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.copyLinesDownAction"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"shift+alt+down"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-editor.action.copyLinesDownAction"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+down"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-problems.action.focusProblemsFromFilter"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"problemsFilterFocus"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+down"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-scrollLineDown"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"textInputFocus"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+down"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-search.focus.nextInputBox"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"inputBoxFocus &amp;&amp; searchViewletVisible"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+down"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-selectNextSuggestion"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"suggestWidgetMultipleSuggestions &amp;&amp; suggestWidgetVisible &amp;&amp; textInputFocus"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+down"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.moveLinesDownAction"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+down"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-editor.action.moveLinesDownAction"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+up"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-scrollLineUp"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"textInputFocus"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+up"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-search.action.focusSearchFromResults"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"firstMatchFocus &amp;&amp; searchViewletVisible"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+up"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-search.focus.previousInputBox"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"inputBoxFocus &amp;&amp; searchViewletVisible &amp;&amp; !searchInputBoxFocus"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+up"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-selectPrevSuggestion"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"suggestWidgetMultipleSuggestions &amp;&amp; suggestWidgetVisible &amp;&amp; textInputFocus"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+up"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.moveLinesUpAction"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+up"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-editor.action.moveLinesUpAction"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+shift+a"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.formatDocument"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"shift+alt+f"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-editor.action.formatDocument"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"alt+q"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"editor.action.changeAll"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+f2"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-editor.action.changeAll"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></span><br><span class="line">  &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+m"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-editor.action.toggleTabFocusMode"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+m"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"markdown.showPreviewToSide"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorLangId == 'markdown'"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"ctrl+k v"</span>,</span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"-markdown.showPreviewToSide"</span>,</span><br><span class="line">    <span class="attr">"when"</span>: <span class="string">"editorLangId == 'markdown'"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/editor/subline_text/README/"/>
      <url>/blog/2019/06/12/editor/subline_text/README/</url>
      
        <content type="html"><![CDATA[<p>#<a href="http://www.sublimetext.com/dev" target="_blank" rel="noopener">sublime text Download</a><br><img src="http://images.cnitblog.com/blog/100150/201212/30105834-adb210004ed5468b9f67e5384225a46d.png" alt><br>        改版过的<a href="http://pan.baidu.com/s/1qWr9v56" target="_blank" rel="noopener">Monokai</a> 密码: siem 代码着色，及相关资源。</p><h2 id="两步实现在Git-Bash中用Sublime打开文件"><a href="#两步实现在Git-Bash中用Sublime打开文件" class="headerlink" title="两步实现在Git Bash中用Sublime打开文件"></a>两步实现在Git Bash中用Sublime打开文件</h2><p>每次都要用鼠标点来点去才能用sublime打开文件！太不科学！今天来配置一下在Git bash中用sublime打开文件:<br>设置方法：</p><pre><code>新建一个文件命名为你想要的命令，比如 sblm（注意不能有后缀名），内容：#!/bin/sh&quot;C:\Program Files\Sublime Text 3\sublime_text.exe&quot; $1 &amp;第一行是说这是个 shell 脚本第二行的字符串是sublime 的安装目录注意这里要输入你自己的目录第二行的$1 是取的命令之后输入的参数第二行的&amp;是此命令在后台打开，这样sublime打开之后，就不会阻塞你的git bash</code></pre><p>保存到 C:\Program Files (x86)\Git\mingW32\bin 目录下(你的git目录可能与我的不一样，注意改成你自己的)</p><p>大功告成~</p><p>使用方法：</p><pre><code>sblm xxx</code></pre><p>如果xxx已存在，则打开已存在的文件，如果不存在则打开新文件命名为xxx。</p><p><strong>扩展：</strong></p><p>不光是sublime，感觉用这种方法我们就可以设置更多了，比如用chrome打开.html文件等等。 </p><p>转自： <a href="http://blog.csdn.net/weixin_35955795/article/details/54880336" target="_blank" rel="noopener">http://blog.csdn.net/weixin_35955795/article/details/54880336</a></p><h2 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h2><ul><li>大城小胖 <a href="http://v.youku.com/v_show/id_XMzU5NzQ5ODgw.html" target="_blank" rel="noopener">视频介绍</a></li><li>happypeter <a href="http://www.imooc.com/learn/333" target="_blank" rel="noopener">快乐的sublime编辑器</a></li><li>GreenBoots <a href="http://www.imooc.com/learn/40" target="_blank" rel="noopener">前端开发工具技巧介绍—Sublime篇</a></li></ul><h2 id="QQ-Group"><a href="#QQ-Group" class="headerlink" title="QQ Group"></a>QQ Group</h2><ul><li>492107297 偏前端开发(css,javascript,jquery)</li></ul><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>原则上收费的，但可以试用，试用期是免费的，在试用期间会提示你购买。</p><h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p>插件有很多，但不建议全部都安装，用到那个安装那个，安装过多，由于插件质量良莠不齐，会使软件本身不稳定，经常挂掉。</p><ol><li><p><a href="https://github.com/emmetio/emmet" target="_blank" rel="noopener">Emmet Git</a>，<a href="http://docs.emmet.io/" target="_blank" rel="noopener">Document</a>原名为：<code>Zencoding, 快速生成html,css</code>，默认扩展快捷为<code>tab</code>，如果<code>tab</code>按钮损坏，<code>ctrl+e</code>替换。<br>生成规则在：</p><p>   Preferences -&gt; Browser packages -&gt; Emment -&gt; emment -&gt; snippets.json<br>中修改。</p><p><a href="http://www.iteye.com/news/27580" target="_blank" rel="noopener">@ Emmet 中文版文档</a></p></li><li><a href="https://github.com/titoBouzout/SideBarEnhancements" target="_blank" rel="noopener">Side Bar</a><code>增强的侧边栏</code></li><li><a href="https://github.com/spadgos/sublime-jsdocs" target="_blank" rel="noopener">Docblockr</a><code>增强js注释</code></li><li><p><a href="https://github.com/wbond/sublime_alignment" target="_blank" rel="noopener">Alignment</a><code>等号对齐</code><br>在<code>Preferences -&gt; package settings -&gt; Alignment -&gt; Settings User</code>添加冒号对齐。</p><pre><code>{ &quot;align_indent&quot;: false, &quot;alignment_chars&quot;: [&quot;=&quot;, &quot;:&quot;], &quot;alignment_space_chars&quot;: [&quot;=&quot;, &quot;:&quot;]}</code></pre></li><li><p><a href="https://github.com/BoundInCode/AutoFileName" target="_blank" rel="noopener">AutoFileName</a>: <code>文件路径自动提示</code></p></li><li><a href="https://github.com/akira-cn/sublime-gbk" target="_blank" rel="noopener">gbk支持 GBK Encoding Support</a></li><li><a href="http://www.welefen.com/keymapmanager-add-check-plugins-keymap-conflict-feature.html" target="_blank" rel="noopener">检测快捷键冲突</a></li><li><p>Markdown</p><ul><li><a href="https://github.com/revolunet/sublimetext-markdown-preview" target="_blank" rel="noopener">markdown</a></li><li><a href="http://www.tcreator.info/social/experience/markdown-to-pdf.html" target="_blank" rel="noopener">markdown 转为 pdf</a></li></ul></li><li><p><a href="https://github.com/SublimeText/LineEndings" target="_blank" rel="noopener">LineEndings 设置换行符</a></p></li><li><a href="https://sublime.wbond.net/" target="_blank" rel="noopener">SublimeText插件列表</a></li><li><a href="https://github.com/rehorn/sublime-htmlbeautify" target="_blank" rel="noopener">html美化插件</a></li><li><a href="http://www.fantxi.com/blog/archives/sublime-template-engine-sublimetmpl/" target="_blank" rel="noopener">Sublime Text 新建文件的模版插件: SublimeTmpl</a></li><li><a href="http://www.cnblogs.com/liu-l/p/3902100.html" target="_blank" rel="noopener">前端自动化神器LiveReload配合浏览器和less/sass使用方法</a></li><li><a href="http://www.cnblogs.com/yili16438/p/3721896.html" target="_blank" rel="noopener">使用 Sublime Text 2 开发 Unity3D 项目</a></li><li><a href="http://www.cnblogs.com/lhb25/p/10-essential-sublime-text-plugins.html" target="_blank" rel="noopener">全栈开发必备的10款 Sublime Text 插件</a></li><li><p>其它语言框架支持</p><ul><li><p>JavaScript</p><ul><li><a href="https://github.com/tanepiper/SublimeText-Nodejs" target="_blank" rel="noopener">nodejs snippets and bindings for Sublime Text 2</a></li><li><a href="https://github.com/angular-ui/AngularJS-sublime-package" target="_blank" rel="noopener">AngularJS-sublime-package</a></li><li><a href="https://github.com/gogoyqj/AvalonHelper" target="_blank" rel="noopener">avalon completion for sublime 3</a></li><li><a href="https://github.com/vuejs/vue-syntax-highlight" target="_blank" rel="noopener">Sublime Text highlighting for Vue.js</a></li><li><a href="https://github.com/facebookarchive/sublime-react" target="_blank" rel="noopener">Sublime Text helpers for React</a></li><li><a href="https://github.com/Microsoft/TypeScript-Sublime-Plugin" target="_blank" rel="noopener">TypeScript-Sublime-Plugin</a></li></ul></li><li><p>CSS</p><ul><li><a href="https://github.com/JasonMortonNZ/bs3-sublime-plugin" target="_blank" rel="noopener">Bootstrap 3 Snippets Plugin for Sublime Text 2/3</a></li><li><a href="https://github.com/jakebresnehan/Sublime-Super-Snippets" target="_blank" rel="noopener">Sublime Text代码片段收藏</a></li></ul></li><li><p>PHP</p><ul><li><a href="https://github.com/yangweijie/SublimeThinkPHP" target="_blank" rel="noopener">Thinkphp Sublime插件 显示优化，兼容St3版本)</a></li><li><a href="https://github.com/gnarula/sublime-laravelgenerator" target="_blank" rel="noopener">laravelgenerator</a></li><li><a href="https://github.com/Medalink/laravel-blade" target="_blank" rel="noopener">Laravel Blade Highlighter</a></li><li><a href="https://github.com/yangweijie/SublimePHPNinJaManual" target="_blank" rel="noopener">Sublime中的函数手册提示</a></li></ul></li><li><p>Nodejs</p><ul><li><a href="http://segmentfault.com/q/1010000004259136" target="_blank" rel="noopener">sublime3 配置node build环境</a></li></ul></li></ul></li><li><p>版本管理</p><ul><li><a href="https://github.com/kemayo/sublime-text-git" target="_blank" rel="noopener">git</a></li><li><a href="https://github.com/jikeytang/sublime-text.git" target="_blank" rel="noopener">git</a></li><li><a href="https://wbond.net/sublime_packages/svn" target="_blank" rel="noopener">svn</a></li><li><a href="https://wbond.net/sublime_packages/sftp" target="_blank" rel="noopener">ftp</a></li></ul></li><li><p><a href="https://github.com/colinta/SublimeFileDiffs" target="_blank" rel="noopener">文件比较</a></p></li><li><a href="https://github.com/flashlizi/cssrem" target="_blank" rel="noopener">CSS值转REM的Sublime Text插件</a></li><li><a href="https://github.com/vishr/local-history" target="_blank" rel="noopener">本地历史记录</a></li><li><a href="https://github.com/ihodev/sublime-file-icons" target="_blank" rel="noopener">目录树文件图标</a></li></ol><h2 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h2><ol><li>Font<br>推荐使用 <a href="http://code.google.com/p/uigroupcode/downloads/detail?name=YaHei.Consolas.1.12.zip&amp;can=2&amp;q=#makechanges" target="_blank" rel="noopener">YaHei.Consolas.1.12.ttf</a>，即为上图中所示字体。</li><li>Theme<ul><li>code style: 推荐使用这款<a href="http://code.google.com/p/uigroupcode/downloads/detail?name=Monokai.rar&amp;can=2&amp;q=#makechanges" target="_blank" rel="noopener">marktheme</a></li><li><a href="https://gist.github.com/1854721" target="_blank" rel="noopener">更换sidebar皮肤</a></li><li><a href="http://jamiewilson.io/predawn/" target="_blank" rel="noopener">分享一个sublime 主题 </a></li><li><a href="http://colorsublime.com/" target="_blank" rel="noopener">颜色配色</a></li><li><a href="https://github.com/ctf0/Seti_ST3" target="_blank" rel="noopener">针对 ST3 的皮肤</a></li><li><a href="https://github.com/kkga/spacegray" target="_blank" rel="noopener">A Hyperminimal UI Theme for Sublime Text</a></li><li><a href="https://github.com/zchen9/sublime-color-scheme/" target="_blank" rel="noopener">Customize color scheme for Sublime</a></li><li><a href="http://www.css88.com/archives/6340" target="_blank" rel="noopener">推荐一款很酷的 Sublime Text 主题 – ayu</a></li></ul></li><li><p>Preferences</p><ul><li><p>用户设置  Preferences -&gt; Settings - User</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"color_scheme"</span>        : <span class="string">"Packages/Color Scheme - Default/Monokai.tmTheme"</span>,    <span class="comment">// theme</span></span><br><span class="line"><span class="string">"draw_minimap_border"</span> : <span class="literal">true</span>,                                                 <span class="comment">// 右侧缩略图边框</span></span><br><span class="line"><span class="string">"font_face"</span>           : <span class="string">"YaHei Consolas Hybrid"</span>,                              <span class="comment">// 字体设置</span></span><br><span class="line"><span class="string">"font_size"</span>           : <span class="number">13</span>,                                                   <span class="comment">// 字体大小</span></span><br><span class="line"><span class="string">"highlight_line"</span>      : <span class="literal">true</span>,                                                 <span class="comment">// 当前行标亮</span></span><br><span class="line"><span class="string">"ignored_packages"</span>    :[<span class="string">"Toggle Css Format"</span>],                                <span class="comment">// 开启vim模式</span></span><br><span class="line"><span class="string">"save_on_focus_lost"</span>  : <span class="literal">true</span>,                                                 <span class="comment">// 失去焦点后保存</span></span><br><span class="line"><span class="string">"auto_complete"</span>       : <span class="literal">false</span>,                                                <span class="comment">// 失去焦点后保存</span></span><br><span class="line"><span class="string">"word_wrap"</span>           : <span class="literal">false</span>,                                                <span class="comment">// 强制不换行</span></span><br><span class="line"><span class="string">"word_separators"</span>     : <span class="string">"./\\()\"':,.;&lt;&gt;~!@#$%^&amp;*|+=[]&#123;&#125;`~?"</span>,                 <span class="comment">// 双击选中中划线</span></span><br><span class="line"><span class="string">"update_check"</span>        : <span class="literal">false</span>                                                 <span class="comment">// 关闭自动更新</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><pre><code>- 全屏设置 Preferences -&gt; Settings - More -&gt; Distraction Free - User    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="string">"line_numbers"</span>     : <span class="literal">true</span>,        <span class="comment">//是否显示行号</span></span><br><span class="line">       <span class="string">"gutter"</span>           : <span class="literal">true</span>,        <span class="comment">//是否显示边列</span></span><br><span class="line">       <span class="string">"draw_centered"</span>    : <span class="literal">true</span>,        <span class="comment">//是否居中显示</span></span><br><span class="line">       <span class="string">"wrap_width"</span>       : <span class="number">80</span>,          <span class="comment">//换行宽度(单位：字符)</span></span><br><span class="line">       <span class="string">"word_wrap"</span>        : <span class="literal">false</span>,       <span class="comment">//是否自动换行</span></span><br><span class="line">       <span class="string">"scroll_past_end"</span>  : <span class="literal">true</span>         <span class="comment">//滚动能否超过结尾</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>- Emmet css冒号后面的空格，在emmet-settings-default    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"preferences"</span>: &#123;</span><br><span class="line">    <span class="string">"css.valueSeparator"</span>: <span class="string">":"</span>,</span><br><span class="line">    <span class="string">"css.propertyEnd"</span>   : <span class="string">";"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- 修改的快捷键，完全向webstorm看齐，两个软件切换无缝。 Preferences -&gt; Key Bindings - User    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"ctrl+shift+c"</span>], <span class="string">"command"</span>: <span class="string">"copy_path"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"ctrl+shift+f"</span>], <span class="string">"command"</span>: <span class="string">"html_tidy"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"alt+f12"</span>], <span class="string">"command"</span>: <span class="string">"open_in_browser"</span> &#125;, <span class="comment">// ie</span></span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"f12"</span>], <span class="string">"command"</span>: <span class="string">"side_bar_files_open_with"</span>, <span class="comment">// firefox</span></span><br><span class="line">        <span class="string">"args"</span>: &#123;</span><br><span class="line">            <span class="string">"paths"</span>: [],</span><br><span class="line">            <span class="string">"application"</span>: <span class="string">"D:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe"</span>,</span><br><span class="line">            <span class="string">"extensions"</span>:<span class="string">".*"</span> <span class="comment">//any file with extension</span></span><br><span class="line">        &#125; &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"ctrl+f12"</span>], <span class="string">"command"</span>: <span class="string">"side_bar_files_open_with"</span>, <span class="comment">// firefox</span></span><br><span class="line">    <span class="string">"args"</span>: &#123;</span><br><span class="line">        <span class="string">"paths"</span>: [],</span><br><span class="line">        <span class="string">"application"</span>: <span class="string">"C:\\Users\\tony\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe"</span>,</span><br><span class="line">        <span class="string">"extensions"</span>:<span class="string">".*"</span> <span class="comment">//any file with extension</span></span><br><span class="line">    &#125; &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"`"</span>], <span class="string">"command"</span>: <span class="string">"toggle_distraction_free"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"alt+c"</span>], <span class="string">"command"</span>: <span class="string">"run_macro_file"</span>, <span class="string">"args"</span>: &#123;<span class="string">"file"</span>: <span class="string">"Packages/Default/Delete Line.sublime-macro"</span>&#125; &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"alt+w"</span>], <span class="string">"command"</span>: <span class="string">"toggle_comment"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"alt+f3"</span>], <span class="string">"command"</span>: <span class="string">"htmlprettify"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"ctrl+d"</span>], <span class="string">"command"</span>: <span class="string">"duplicate_line"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"ctrl+shift+d"</span>], <span class="string">"command"</span>: <span class="string">"find_under_expand"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"ctr+shift+w"</span>], <span class="string">"command"</span>: <span class="string">"close"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"ctrl+w"</span>], <span class="string">"command"</span>: <span class="string">"find_under_expand"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"alt+d"</span>], <span class="string">"command"</span>: <span class="string">"open_dir"</span>, <span class="string">"args"</span>: &#123;<span class="string">"dir"</span>: <span class="string">"$file_path"</span>, <span class="string">"file"</span>: <span class="string">"$file_name"</span>&#125; &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"shift+enter"</span>], <span class="string">"command"</span>: <span class="string">"run_macro_file"</span>, <span class="string">"args"</span>: &#123;<span class="string">"file"</span>: <span class="string">"Packages/Default/Add Line.sublime-macro"</span>&#125; &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"ctrl+enter"</span>], <span class="string">"command"</span>: <span class="string">"run_macro_file"</span>, <span class="string">"args"</span>: &#123;<span class="string">"file"</span>: <span class="string">"Packages/Default/Add Line Before.sublime-macro"</span>&#125; &#125;,</span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"alt+right"</span>], <span class="string">"command"</span>: <span class="string">"next_view"</span> &#125;, <span class="comment">// 下一个标签</span></span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"alt+left"</span>], <span class="string">"command"</span>: <span class="string">"prev_view"</span> &#125;, <span class="comment">// 上一个标签</span></span><br><span class="line">    &#123; <span class="string">"keys"</span>: [<span class="string">"alt+1"</span>], <span class="string">"command"</span>: <span class="string">"toggle_side_bar"</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></code></pre><ol start="4"><li><a href="http://baelabs.duapp.com/Sublime/indentation.html" target="_blank" rel="noopener">定制缩进</a></li><li><a href="http://baelabs.duapp.com/Sublime/spell_checking.html" target="_blank" rel="noopener">拼写检查</a></li><li><a href="http://baelabs.duapp.com/Sublime/distraction_free.html" target="_blank" rel="noopener">全屏模式，自由模式的定制</a></li><li><a href="http://www.cnblogs.com/jikey/archive/2013/03/12/2955230.html" target="_blank" rel="noopener">在sublime-text中设置浏览器预览</a></li><li><a href="http://baelabs.duapp.com/Sublime/settings.html" target="_blank" rel="noopener">其它配置</a></li><li><p>预览设置</p><ul><li><p><a href="http://www.pixelstech.net/article/1445261721-Add-Sublime-Text-to-your-context-menu-on-right-click" target="_blank" rel="noopener">配置sublime右键打开</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">SET sublimeTextPath=C:\Program Files\Sublime Text 3\sublime_text.exe</span><br><span class="line"> </span><br><span class="line">REM ADD REGISTRY KEYS</span><br><span class="line">@reg add "HKEY_CLASSES_ROOT\*\shell\Open with Sublime Text 3"         /t REG_SZ /v "" /d "Open with Sublime Text 3"   /f</span><br><span class="line">@reg add "HKEY_CLASSES_ROOT\*\shell\Open with Sublime Text 3"         /t REG_EXPAND_SZ /v "Icon" /d "%sublimeTextPath%,0" /f</span><br><span class="line">@reg add "HKEY_CLASSES_ROOT\*\shell\Open with Sublime Text 3\command" /t REG_SZ /v "" /d "%sublimeTextPath% \"%%1\"" /f</span><br><span class="line"> </span><br><span class="line">pause</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><a href="http://www.hongkiat.com/blog/preview-in-localhost/" target="_blank" rel="noopener">localhost设置打开</a></li><li><a href="http://jingyan.baidu.com/article/15622f2419ce79fdfcbea5ea.html" target="_blank" rel="noopener">Sublime Text 3 配置浏览器预览路径 localhost</a></li></ul><ol start="10"><li><a href="http://blog.sina.com.cn/s/blog_aef7731b01018cnx.html" target="_blank" rel="noopener">st开启全屏之后的设置</a> </li><li><p>React相关</p><ul><li><a href="http://www.jianshu.com/p/89771e8bcee5" target="_blank" rel="noopener">React-navite 实战系列教程之 （开发工具篇）</a> </li><li><a href="https://gist.github.com/neilcarpenter/8979ea9ed91b10e36af9" target="_blank" rel="noopener">Enable Emmet in .JSX files, using Babel JSX Syntax highlighter</a> </li><li><a href="https://gist.github.com/max-mykhailenko/41d0c3991d92f38dcbc6" target="_blank" rel="noopener">Sublime text 3. Enable Emmet in JSX files</a> </li></ul></li></ol><h2 id="Skill"><a href="#Skill" class="headerlink" title="Skill"></a>Skill</h2><ol><li>按住 <code>ctrl</code> 键，鼠标单击就是多重选择。</li><li><a href="http://baelabs.duapp.com/Sublime/multiple_selection_with_the_keyboard.html" target="_blank" rel="noopener">键盘多重选择</a></li><li>根据选择文本自动添加 ‘, “”,(),[] 匹配。    </li><li>搜索按钮的功能说明 (冷风贡献)：<br> <img src="http://e.hiphotos.baidu.com/album/pic/item/77094b36acaf2edd9ffd46a08c1001e93901936e.jpg">    </li><li><a href="http://www.jianshu.com/p/e92a52770832" target="_blank" rel="noopener">使用 Sublime + PlantUML 高效地画图</a></li></ol><h2 id="Default-Keymap"><a href="#Default-Keymap" class="headerlink" title="Default Keymap"></a>Default Keymap</h2><pre><code>1. Ctrl+L             选择整行（按住-继续选择下行） 2. Ctrl+Shift+K(shhift+del)     删除整行，  ctrl + KK 从光标处删之行尾，Ctrl+K Backspace 从光标处删除至行首3. Ctrl+Shift+D       复制光标所在整行，插入在该行之前  4. Ctrl+D             选词 （按住-继续选择下个相同的字符串，再按，可跳到相应的方法定义处5. Ctrl+Shift+M       选择括号内的内容（按住-继续选择父括号） 6. Ctrl+/             注释整行（如已选择内容，同“Ctrl+Shift+/”效果）7. Ctrl + alt + /     取消注释 8. Ctrl+Shift+UP      与上行互换  ctrl + shift + up: 列模式编辑  9. Ctrl + R           跳转当前页的目标方法10. Ctrl+K + U        大写11. Ctrl+K + L        小写12. 鼠标中间           列模式编辑13. Ctrl+Shift+[]     代码折叠14. ctrl+k ctrl+1:    折叠所有代码 15. Ctrl + K,B        打开侧边栏16. ctrl + 回车：　　   光标后插入行，　Ctrl+Shift+Enter 光标前插入行17. ctrl + m:         匹配括号18. vim mode下        查找上一个下一个的快捷键是 是* #19. ctrl +z, y:       撤销，恢复撤销20. alt + .:          闭合当前标签21. Ctrl+F2:          设置书签22. F2:               下一个书签23. Shift+F2:         上一个书签24. ctrl + p:         即时的文件切换25. ctrl + shift + a: 选择标签内的内容 26. ctrl + 单击：      多行随意位置添加光标27. alt + F3( mac: ctrl + command + g): 选择页面中所有相同的词28. ctrl + F3:        跳转到下一个选中的词    29. Ctrl+Shift+P Set Syntax:html : 设置文件类型30. Shift + 右键:     连续多行光标选中 (by Gary Gauh)</code></pre><h2 id="Emmet-zencoding-Keymap"><a href="#Emmet-zencoding-Keymap" class="headerlink" title="Emmet(zencoding) Keymap"></a>Emmet(zencoding) Keymap</h2><pre><code>1. match_pair_outward: ctrl+,向外匹配2. match_pair_inward: ctrl+alt+,向内匹配3. matching_pair: ctrl+alt+j，快速匹配html标签(phpstorm: ctrl + [])4. split_join_tag: shift+ctrl+`，快速成对修改html标签5. remove_tag: shift+ctrl+;删除包裹的html标签(phpstorm: ctrl + shift + del)6. increment_number_by_1: ctrl+up,数字快速增长,步长为17. decrement_number_by_1: ctrl+down,数字快速递减,步长为18. increment_number_by_01: alt+up,数字快速增长,步长为0.19. decrement_number_by_01: alt+down,数字快速递减,步长为0.110. increment_number_by_10:shift+alt+up,数字快速增长,步长为1011. decrement_number_by_10: shift+alt+down,数字快速递减,步长为1012. select_next_item:shift+ctrl+. 选择下一个属性13. select_previous_item: shift+ctrl+,, 选择上一个属性 14. wrap_as_you_type: shift+ctrl+g,包裹内容</code></pre><h2 id="VIM-Keymap"><a href="#VIM-Keymap" class="headerlink" title="VIM Keymap"></a>VIM Keymap</h2><p>sublime 支持 VIM 80% 左右的快捷键，以实际为准。</p><pre><code>一. 移动：    h,j,k,l: 左，下，上，右。    w: 下一个词的词首。W:下一个单词(不含标点)。    e:下一个词的词尾。E:不含标点。    b:上一个词的词首。B:不含标点。    &lt;&gt;: v 模式选中后进行缩进。    &gt;&gt;&lt;&lt;:向前向后缩进。 二. 跳转：    %: 可以匹配{},&quot;&quot;,(),[]之间跳转。    H、M、L：直接跳转到当前屏幕的顶部、中部、底部。    #H：跳转到当前屏的第#行。    #L：跳转到当前屏的倒数第#行。    zt: 当前编辑行置为屏顶。    zz: 当前编辑行置为屏中。    zb: 当前编辑行置为屏底。    G：直接跳转到文件的底部。    gg: 跳转到文件首。    gd: 跳转到光标所在函数和变量的定义。    ():跳转到当前的行首、行尾。    {}：向上、向下跳转到最近的空行。    [{：跳转到目前区块开头。    ]}：跳转到目前区块结尾。    0: 跳转到行首。    $: 跳转到行尾。    2$: 跳转到下一行的行尾。    #：跳转到该行的第#个位置。    #G: 15G,跳转到15行。    :#：跳转到#行。    f&apos;n&apos;：跳转到下一个&quot;n&quot;字母后。    ctrl+b: 向后翻一页。    ctrl+f：向前翻一页。    ctrl+u: 向后翻半页。    ctrl+d: 向前翻半页。    ctry+e: 下滚一行。三. 选择：    1.v: 开启可视模式。 V: 开启逐行可视模式。    2.^V: 矩形选择。    3.v3w: 选择三个字符。      4.ab：包括括号和()内的区域。    5.aB：包括括号和{}内的区域。    6.ib：括号()内的区域。    7.iB：括号{}内的区域。    8.aw：标记一个单词。四. 编辑：    1. 新增：        i: 光标前插入。        I: 在当前行首插入。        a: 光标后插入。        A: 当前行尾插入。        O: 在当前行之前插入新行。        o: 在当前行之后插入新行。    2. 修改 c(change) 为主：        r: 替换光标所在处的字符。        R：替换光标所到之处的字符。        cw: 更改光标所在处的字到字尾处。        c#w: c3w 修改3个字符。        C：修改到行尾。        ci&apos;：修改配对标点符号中的文本内容。        di&apos;：删除配对标点符号中的文本内容。        yi&apos;：复制配对标点符号中的文本内容。        vi&apos;：选中配对标点符号中的文本内容。        s：替换当前一个光标所处字符。        #S：删除 # 行，并以新文本代替。    3. 删除 d(delete) 为主：        D：删除到行尾。        X: 每按一次，删除光标所在位置的前面一个字符。        x: 每按一次，删除光标所在位置的后面一个字符。        #x: 删除光标所在位置后面6个字符。        d^: 删至行首。        d$: 删至行尾。        dd:(剪切)删除光标所在行。                dw: 删除一个单词/光标之后的单词剩余部分。        d4w: 删除4个word。        #dd: 从光标所在行开始删除#行。        daB: 删除{}及其内的内容。        diB: 删除{}中的内容。        n1,n2 d：将n1,n2行之间的内容删除。    4. 查找：        /： 输入关键字，发现不是要找的，直接在按n，向后查找直到找到为止。        ?： 输入关键字，发现不是要找的，直接在按n，向前查找直到找到为止。        *: 在当前页向后查找同一字。        #: 在当前页向前查找同一字。    5. 复制 y(yank)为主：        yw: 将光标所在之处到字尾的字符复制到缓冲区中。        #yw: 复制#个字到缓冲区。        Y：相当于yy, 复制整行。        #yy:表示复制从光标所在的该行往下数#行文字。        p: 粘贴。所有与y相关的操作必用p来结合粘贴。        ]p：粘贴到合适的缩进处。        n1,n2 co n3：复制第n1行到第n2行之间的内容到第n3行后面。    6. 大小写转换：        gUU: 将当前行的字母改为大写。        guu: 将当前行的字母改为小写。        gUw: 将当前光标下的单词改为大写。        guw: 将当前光标下的单词改为小写。        a. 整篇大写:        ggguG        gg: 光标到文件第一个字符。        gu: 把选择范围全部小写。        G: 到文件结束。        b. 整篇小写：gggUG    7.  其它：        J：当前行和下一行合并成一行。    8.  移动：        n1,n2 m n3：将n1行到n2行之间的内容移至n3行下。五.退出：     1. w filename: 保存正在编辑的文件filename     2. wq filename: 保存后退出正在编辑的文件filename     3. q：退出不保存。六.窗口操作：     1. ctrl+w p: 在两个分割窗口之间来回切换。     2. ctrl+w j: 跳到下面的分割窗     3. ctrl+w h: 跳到左边的分割窗。     4. ctrl+w k: 跳到上面的分割窗。     5. ctrl+w l: 跳到右边的分割窗。七.折叠：    zo 將游標所在處的折疊打開。open。    zc 將游標所在處已打開的內容再度折疊起來。close。    zr 將全文的所有折疊依層次通通打開。reduce。    zm 將全文已打開的折疊依層次通通再折疊起來。more。    zR 作用和 zr 同，但會打開含巢狀折疊（折疊中又還有折疊）的所有折疊。    zM 作用和 zm 同，但對於巢狀折疊亦有作用。    zi 這是個切換，是折疊與不折疊指令間的切換。    zn 打開全文的所有折疊。fold none。    zN 這是 zn 的相對指令，回復所有的折疊。</code></pre><h2 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h2><ul><li>非官方文档：<a href="https://sublime-text-unofficial-documentation.readthedocs.org/en/latest/" target="_blank" rel="noopener">Unofficial Document英文版</a></li><li><a href="http://sublime-undocs-zh.readthedocs.org/en/latest/index.html" target="_blank" rel="noopener">Unofficial Document中文版</a></li><li>sublime <a href="http://www.feelcss.com/sublime-text-2-settings.html" target="_blank" rel="noopener">配置详解</a></li><li>sublime <a href="http://baelabs.duapp.com/Sublime/" target="_blank" rel="noopener">其它文档</a></li></ul><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ul><li><p>如何安装插件？</p><ol><li>直接安装<br>可以去github下载安装包解压缩到Packages目录（菜单-&gt;preferences-&gt;packages）。</li><li>利用package，在安装插件之前先安装package <a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">packagecontrol 安装</a><br>如果在Perferences-&gt;package settings中看到package control这一项，则安装成功。</li><li>用Package Control安装插件的方法：<br>按下Ctrl+Shift+P调出命令面板，输入install，出现Install Package 选项并回车，然后在列表中选中要安装的插件或者直接输入需要安装插件的名称，比如Emmet。</li></ol></li><li><p>如何删除安装的插件？</p><ol><li>ctr+shift+P,输入package</li><li>查找remove package</li><li>输入你要删除的package</li><li>回车，OK</li></ol></li><li><p>百度输入造成sublime闪退(感谢<a href="https://github.com/leohxj" target="_blank" rel="noopener">leohxj</a>提供)<br>如果同时安装这两个软件，会造成sublime闪退，原因不详。但是测试过，是百度输入法的原因。希望能把这条信息加入到Wiki中，让更多人知道。</p></li><li><p>Emmet tab失效问题</p><ul><li><a href="http://jingyan.baidu.com/article/aa6a2c14d5177f0d4d19c45f.html" target="_blank" rel="noopener">Sublime报please wait a bit while pyV8 binary</a></li><li><a href="http://www.jianshu.com/p/0862e754cf15" target="_blank" rel="noopener">Sublime Text 3 解决Emmet失效的问题</a></li><li><a href="http://www.csdn123.com/html/itweb/20130915/119877_119876_119883.htm" target="_blank" rel="noopener">关于Sublime text 2中Emmet的安装 _html:xt无效</a></li></ul></li></ul><h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><ul><li><a href="http://www.zhihu.com/topic/19668076" target="_blank" rel="noopener">sublime text zhihu专题</a></li><li><a href="https://github.com/martomo/SublimeTextXdebug" target="_blank" rel="noopener">xdebug调试</a></li><li><a href="http://baelabs.duapp.com/Sublime%20text3" target="_blank" rel="noopener">sublimetext 3.0文档</a></li><li><a href="http://www.cnblogs.com/bananaplan/p/Sublime-Text-3-Powerful.html" target="_blank" rel="noopener">Sublime Text 3 绝对神器</a></li><li><a href="http://docs.sublimetext.tw/" target="_blank" rel="noopener">SublimeText手册-tw</a></li><li><a href="http://code-tech.diandian.com/post/2012-11-10/40041273125" target="_blank" rel="noopener">怎样从直接Github的repository安装Sublime Text插件</a></li><li><a href="http://code-tech.diandian.com/post/2012-11-14/40041132753" target="_blank" rel="noopener">Sublime text2的ThinkPHP插件</a></li><li><a href="http://code-tech.diandian.com/post/2012-11-14/40042622351" target="_blank" rel="noopener">Ubuntu 下Sublime Text 2 输入中文解决方法</a></li><li><a href="http://code-tech.diandian.com/post/2012-11-16/40042306130" target="_blank" rel="noopener">如何开发Sublime Text2插件_衍生篇</a></li><li><a href="http://code-tech.diandian.com/post/2012-11-16/40042845471" target="_blank" rel="noopener">用sublime构建phonegap项目</a></li><li><a href="http://code-tech.diandian.com/post/2012-11-16/40041334087" target="_blank" rel="noopener">超级牛B编码王（二）：Sublime2之Zencoding快速上手</a></li><li><a href="http://code-tech.diandian.com/post/2012-11-21/40042403501" target="_blank" rel="noopener">sublime text 左侧菜单美化1</a></li><li><a href="http://code-tech.diandian.com/post/2012-11-29/40043724758" target="_blank" rel="noopener">在 Ubuntu 12 下安装 Sublime Text 2</a></li><li><a href="http://zh.lucida.me/blog/sublime-text-complete-guide/" target="_blank" rel="noopener">Sublime Text 全程指南</a></li><li><a href="http://www.cnblogs.com/figure9/p/sublime-text-complete-guide.html" target="_blank" rel="noopener">Sublime Text 全程指引 by Lucida</a></li><li><a href="http://www.zhihu.com/question/24896283" target="_blank" rel="noopener">sublime 有哪些使用技巧</a></li><li><a href="http://www.html-js.com/article/The-frontend-tool-Megamix" target="_blank" rel="noopener">前端工程师手中的Sublime Text</a></li><li><a href="http://blog.saymagic.cn/2015/06/20/write-blog-by-sublime.html" target="_blank" rel="noopener">Sublime 进阶使用</a></li><li><a href="http://info.9iphp.com/essential-sublime-text-javascript-plugins/" target="_blank" rel="noopener">JavaScript 开发者必备的10款 Sublime Text 插件</a></li><li><a href="https://github.com/HereChen/LogList/blob/master/sublimeLog.md" target="_blank" rel="noopener"> Sublime Text 学习日志</a></li><li><a href="http://www.52cik.com/2015/10/21/sublime-text-run-es6.html" target="_blank" rel="noopener">Sublime Text 之运行 ES6 (基于babel)</a></li><li><a href="http://code.tutsplus.com/" target="_blank" rel="noopener">sublime 英文教程</a></li><li><a href="https://github.com/liveNo/Sublime-Tutorial" target="_blank" rel="noopener">Sublime-Tutorial</a></li><li><a href="http://blog.csdn.net/chszs/article/details/8232051" target="_blank" rel="noopener">Sublime Text 2搭建Java开发环境</a></li><li><a href="http://yalishizhude.github.io/2015/10/20/sublime/" target="_blank" rel="noopener">高端唯有定制，把sublime打造成专属的IDE</a></li><li><a href="http://blog.jobbole.com/95933/" target="_blank" rel="noopener">如何优雅地使用 Sublime Text</a></li><li><a href="http://guowenfh.github.io/2015/12/26/SublimeText/" target="_blank" rel="noopener">一个前端程序猿的Sublime Text3的自我修养</a></li><li><a href="https://github.com/zhiqiang21/MyToolsConfig/blob/master/sublimeconfig/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%20sublime%20text%20%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%92%8C%E9%85%8D%E7%BD%AE.md" target="_blank" rel="noopener">前端开发sublimeconfig</a></li></ul><h2 id="SublimeText3"><a href="#SublimeText3" class="headerlink" title="SublimeText3"></a>SublimeText3</h2><ul><li><a href="http://vinta.ws/code/must-have-sublime-text-packages.html" target="_blank" rel="noopener">推荐给 Web Developer 的 Sublime Text 3 插件</a></li><li><a href="https://github.com/JasonMortonNZ/bs3-sublime-plugin" target="_blank" rel="noopener">Bootstrap 3 Snippets Plugin for Sublime Text 2/3</a></li><li><a href="http://frontenddev.org/article/sublime-does-text-3-plug-in-custom-emmet-grammatical-rules-in-order-to-quickly-bootstrap-output-component.html" target="_blank" rel="noopener">自定义Emmet语法规则以快速输出bootstrap组件</a></li><li><a href="http://www.zhihu.com/question/24029280/answer/30256243" target="_blank" rel="noopener">Sublime text 3 中文文件名显示方框怎么解决？</a></li><li><a href="https://cnodejs.org/topic/51ee453af4963ade0ebde85e" target="_blank" rel="noopener">win下Sublime Text 3开发 Nodejs</a></li><li><a href="http://blog.csdn.net/wolinxuebin/article/details/41049551" target="_blank" rel="noopener">使用sublime Text 3进行java编程的一些总结</a></li><li><a href="http://dengo.org/archives/923" target="_blank" rel="noopener">Sublime Text 3能用支持的插件推荐</a></li><li><a href="http://blog.csdn.net/wolinxuebin/article/details/41049551" target="_blank" rel="noopener">使用sublime Text 3进行java编程的一些总结</a></li><li><a href="https://scotch.io/bar-talk/best-of-sublime-text-3-features-plugins-and-settings" target="_blank" rel="noopener">sublime text3 设置专题</a></li><li><a href="http://gold.xitu.io/entry/56c40cacdf0eea0053199335" target="_blank" rel="noopener">Sublime Text 3 最好的功能、插件和设置</a></li><li><a href="http://www.cnblogs.com/manfredHu/p/4941307.html" target="_blank" rel="noopener">SublimeText3常用快捷键和优秀插件（亲测）</a></li></ul><h2 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h2><ul><li><code>jikeytang#gmail.com</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/editor/subline_text/sublime-settings/"/>
      <url>/blog/2019/06/12/editor/subline_text/sublime-settings/</url>
      
        <content type="html"><![CDATA[<p> // While you can edit this file, it’s best to put your changes in<br> // “User/Preferences.sublime-settings”, which overrides the settings in here.<br> // Settings may also be placed in file type specific options files, for<br> // example, in Packages/Python/Python.sublime-settings for python files.<br> {<br>   // Sets the colors used within the text area </p><p>   主题文件的路径</p><pre><code>&quot;color_scheme&quot;: &quot;Packages/Color Scheme - Default/Monokai.tmTheme&quot;,  </code></pre><p>   // Note that the font_face and font_size are overriden in the platform<br>   // specific settings file, for example, “Preferences (Linux).sublime-settings”.<br>   // Because of this, setting them here will have no effect: you must set them<br>   // in your User File Preferences.  </p><p>   设置字体和大小，必须在Settings-User里重写，这里设置没有任何效果   </p><pre><code>&quot;font_face&quot;: &quot;Consolas&quot;,&quot;font_size&quot;: 12,</code></pre><p>   // Valid options are “no_bold”, “no_italic”,     “no_antialias”, “gray_antialias”,<br>   // “subpixel_antialias” and “no_round” (OS X only)<br>   // 字体选项：no_bold不显示粗体字，no_italic不显示斜体字，no_antialias和no_antialias关闭反锯齿<br>   // subpixel_antialias和no_round是OS X系统独有的     </p><pre><code>&quot;font_options&quot;: [],</code></pre><p>  在文字上双击会全选当前的内容，如果里面出现以下字符，就会被截断</p><pre><code>&quot;word_separators”: “./()\”‘-:,.;~!@#$%^&amp;*|+=[]{}`~?&quot;,</code></pre><p>   是否显示行号</p><pre><code>&quot;line_numbers&quot;: true,</code></pre><p>   是否显示行号边栏</p><pre><code>&quot;gutter&quot;: true,</code></pre><p>   行号边栏和文字的间距</p><pre><code>&quot;margin&quot;: 4,</code></pre><p>   是否显示代码折叠按钮</p><pre><code>&quot;fold_buttons&quot;: true,</code></pre><p>   不管鼠标在不在行号边栏，代码折叠按钮一直显示</p><pre><code>&quot;fade_fold_buttons&quot;: true,</code></pre><p>   列显示垂直标尺，在中括号里填入数字，宽度按字符计算</p><pre><code>&quot;rulers&quot;: [],</code></pre><p>   是否打开拼写检查</p><pre><code>&quot;spell_check&quot;: false,</code></pre><p>   Tab键制表符宽度</p><pre><code>&quot;tab_size&quot;: 4,</code></pre><p>   设为true时，缩进和遇到Tab键时使用空格替代</p><pre><code>&quot;translate_tabs_to_spaces&quot;: false,</code></pre><p>  translate_tabs_to_spaces设置为true，Tab和Backspace的删除/插入作用于制表符宽度<br>  否则作用于单个空格</p><pre><code>&quot;use_tab_stops&quot;: true,</code></pre><p>   false时禁止在载入的时候检测制表符和空格</p><pre><code>&quot;detect_indentation&quot;: true,</code></pre><p>   按回车时，自动与制表位对齐</p><pre><code>&quot;auto_indent&quot;: true,</code></pre><p>   // Makes auto indent a little smarter, e.g., by indenting the next line<br>   // after an if statement in C. Requires auto_indent to be enabled.</p><p>   针对C语言的</p><pre><code>&quot;smart_indent&quot;: false,</code></pre><p>   需要启用auto_indent，第一次打开括号缩进时插入空格？（没测试出来效果…）</p><pre><code>&quot;indent_to_bracket&quot;: true,</code></pre><p>   显示对齐的白线是否根据回车、tab等操作自动填补</p><pre><code>&quot;trim_automatic_white_space&quot;: true,</code></pre><p>   是否自动换行，如果选auto，需要加双引号</p><pre><code>&quot;word_wrap&quot;: false,</code></pre><p>   设置窗口内文字区域的宽度</p><pre><code>&quot;wrap_width&quot;: 0,</code></pre><p>   防止被缩进到同一级的字换行</p><pre><code>&quot;indent_subsequent_lines&quot;: true,</code></pre><p>   如果没有定义过，则文件居中显示（比如新建的文件）</p><pre><code>&quot;draw_centered&quot;: false,</code></pre><p>   自动匹配引号，括号等</p><pre><code>&quot;auto_match_enabled&quot;: true,</code></pre><p>   拼写检查的单词列表路径</p><pre><code>&quot;dictionary&quot;: &quot;Packages/Language - English/en_US.dic&quot;,</code></pre><p>   代码地图的可视区域部分是否加上边框，边框的颜色可在配色方案上加入minimapBorder键</p><pre><code>&quot;draw_minimap_border&quot;: false,</code></pre><p>   突出显示当前光标所在的行</p><pre><code>&quot;highlight_line&quot;: false,</code></pre><p>   设置光标闪动方式<code>&quot;smooth&quot;, &quot;phase&quot;, &quot;blink&quot;, &quot;wide&quot; and &quot;solid&quot;</code>.</p><pre><code>&quot;caret_style&quot;: &quot;smooth&quot;,</code></pre><p>   是否特殊显示当前光标所在的括号、代码头尾闭合标记</p><pre><code>&quot;match_brackets&quot;: true,</code></pre><p>   设为false时，只有光标在括号或头尾闭合标记的两端时，match_brackets才生效</p><pre><code>&quot;match_brackets_content&quot;: true,</code></pre><p>   是否突出显示圆括号，match_brackets为true生效</p><pre><code>&quot;match_brackets_square&quot;: false,</code></pre><p>   是否突出显示大括号，match_brackets为true生效</p><pre><code>&quot;match_brackets_braces&quot;: false,</code></pre><p>   是否突出显示尖括号，match_brackets为true生效</p><pre><code>&quot;match_brackets_angle&quot;: false,</code></pre><p>   html和xml下突出显示光标所在标签的两端，影响HTML、XML、CSS等</p><pre><code>&quot;match_tags&quot;: true,</code></pre><p>   全文突出显示和当前选中字符相同的字符</p><pre><code>&quot;match_selection&quot;: true,</code></pre><p>   设置每一行到顶部，以像素为单位的间距，效果相当于行距</p><pre><code>&quot;line_padding_top&quot;: 1,</code></pre><p>   设置每一行到底部，以像素为单位的间距，效果相当于行距</p><pre><code>&quot;line_padding_bottom&quot;: 1,</code></pre><p>   // Set to false to disable scrolling past the end of the buffer.<br>   // On OS X, this value is overridden in the platform specific settings, so<br>   // you’ll need to place this line in your user settings to override it.</p><p>   设置为false时，滚动到文本的最下方时，没有缓冲区</p><pre><code>&quot;scroll_past_end&quot;: true,</code></pre><p>   // This controls what happens when pressing up or down when on the first<br>   // or last line.<br>   // On OS X, this value is overridden in the platform specific settings, so<br>   // you’ll need to place this line in your user settings to override it.</p><p>   设置成true，当光标已经在第一行时，再Up则到行首，如果光标已经在最后一行，再Down则跳到行尾</p><pre><code>&quot;move_to_limit_on_up_down&quot;: false,</code></pre><p>   按space或tab时，实际会产生白色的点（一个空格一个点）或白色的横线（tab_size设置的制表符的宽度），中状态下才能看到<br>   设置为none时，什么情况下都不显示这些点和线<br>   设置为selection时，只显示选中状态下的点和线<br>   设置为all时，则一直显示 </p><pre><code>&quot;draw_white_space&quot;: &quot;selection&quot;,</code></pre><p>   制表位的对齐白线是否显示，颜色可在主题文件里设置（guide，activeGuide，stackGuide）</p><pre><code>&quot;draw_indent_guides&quot;: true,</code></pre><p>   制表位的对齐白线，draw_normal为一直显示，draw_active为只显示当前光标所在的代码控制域</p><pre><code>&quot;indent_guide_options&quot;: [&quot;draw_normal&quot;],</code></pre><p>   为true时，保存文件时会删除每行结束后多余的空格</p><pre><code>&quot;trim_trailing_white_space_on_save&quot;: false,</code></pre><p>   为true时，保存文件时光标会在文件的最后向下换一行</p><pre><code>&quot;ensure_newline_at_eof_on_save&quot;: false,</code></pre><p>   切换到其它文件标签或点击其它非本软件区域，文件自动保存</p><pre><code>&quot;save_on_focus_lost&quot;: false,</code></pre><p>   编码时不能自动检测编码时，将自动检测ASCII, UTF-8 和 UTF-16</p><pre><code>&quot;fallback_encoding&quot;: &quot;Western (Windows 1252)&quot;,</code></pre><p>   默认编码格式</p><pre><code>&quot;default_encoding&quot;: &quot;UTF-8&quot;,</code></pre><p>   包含空字节的文件被打开默认为十六进制</p><pre><code>&quot;enable_hexadecimal_encoding&quot;: true,</code></pre><p>   // Determines what character(s) are used to terminate each line in new files.<br>   // Valid values are ‘system’ (whatever the OS uses), ‘windows’ (CRLF) and<br>   // ‘unix’ (LF only).     </p><p>   每一行结束的时候用什么字符做终止符</p><pre><code>&quot;default_line_ending&quot;: &quot;system&quot;,</code></pre><p>   设置为enabled时，在一个字符串间按Tab将插入一个制表符<br>   设置为true时，按Tab会根据前后环境进行代码自动匹配填补   </p><pre><code>&quot;tab_completion&quot;: true,</code></pre><p>   代码提示</p><pre><code>&quot;auto_complete&quot;: true,</code></pre><p>   代码提示的大小限制</p><pre><code>&quot;auto_complete_size_limit&quot;: 4194304,</code></pre><p>   代码提示延迟显示</p><pre><code>&quot;auto_complete_delay&quot;: 50,</code></pre><p>   代码提示的控制范围</p><pre><code>&quot;auto_complete_selector&quot;: &quot;source - comment&quot;,</code></pre><p>   触发代码提示的其他情况</p><pre><code>&quot;auto_complete_triggers&quot;: [       {&quot;selector&quot;: &quot;text.html&quot;, &quot;characters&quot;: &quot;&lt;&quot;} ],</code></pre><p>   设为false时，选择提示的代码按回车或点击可以输出出来，但选择true时不会输出而是直接换行</p><pre><code>&quot;auto_complete_commit_on_tab&quot;: false,</code></pre><p>   auto_complete_commit_on_tab必须为true，控制代码提示的活跃度</p><pre><code>&quot;auto_complete_with_fields&quot;: false,</code></pre><p>   设置为false，使用Shift + tab总是插入制表符</p><pre><code>&quot;shift_tab_unindent&quot;: true,</code></pre><p>   选中的文本按Ctrl + f时，自动复制到查找面板的文本框里</p><pre><code>&quot;find_selected_text&quot;: true,</code></pre><p>   DataPackagesTheme - DefaultDefault.sublime-theme控制软件的主题</p><pre><code>&quot;theme&quot;: &quot;Default.sublime-theme&quot;,</code></pre><p>   滚动的速度</p><pre><code>&quot;scroll_speed&quot;: 1.0,</code></pre><p>   左边边栏文件夹动画</p><pre><code>&quot;tree_animation_enabled&quot;: true,</code></pre><p>   标签页的关闭按钮<br>      “show_tab_close_buttons”: true,</p><p>   // OS X 10.7 only: Set to true to disable Lion style full screen support.<br>   // Sublime Text must be restarted for this to take effect.<br>   针对OS X</p><pre><code>&quot;use_simple_full_screen&quot;: false,</code></pre><p>   水平垂直滚动条：system和disabled为默认显示方式，enabled为自动隐藏显示 </p><pre><code>&quot;overlay_scroll_bars&quot;: &quot;system&quot;,</code></pre><p>   热推出功能！退出时不会提示是否保存文件，而是直接退出<br>   下次打开软件时，文件保持退出前的状态，没来得及保存的内容都在，但并没有真实的写在原文件里</p><pre><code>&quot;hot_exit&quot;: true,</code></pre><p>   软件使用最后的设定打开文件，hot_exit为true时没有效果</p><pre><code>&quot;remember_open_files&quot;: true,</code></pre><p>   // OS X only: When files are opened from finder, or by dragging onto the<br>   // dock icon, this controls if a new window is created or not.<br>   针对OS X</p><pre><code>&quot;open_files_in_new_window&quot;: true,</code></pre><p>   // there’s a folder open within the window. This is always enabled on OS X,<br>   // changing it here won’t modify the behavior.<br>   针对OS X</p><pre><code>&quot;close_windows_when_empty&quot;: true,</code></pre><p>   哪些文件会被显示到边栏上<br>   // project basis.</p><pre><code>&quot;folder_exclude_patterns&quot;: [&quot;.svn&quot;, &quot;.git&quot;, &quot;.hg&quot;, &quot;CVS&quot;],&quot;file_exclude_patterns&quot;: [&quot;*.pyc&quot;, &quot;*.pyo&quot;, &quot;*.exe&quot;, &quot;*.dll&quot;, &quot;*.obj&quot;,&quot;*.o&quot;, &quot;*.a&quot;, &quot;*.lib&quot;, &quot;*.so&quot;, &quot;*.dylib&quot;, &quot;*.ncb&quot;, &quot;*.sdf&quot;, &quot;*.suo&quot;, &quot;*.pdb&quot;, &quot;*.idb&quot;, &quot;.DS_Store&quot;, &quot;*.class&quot;, &quot;*.psd&quot;, &quot;*.db&quot;],</code></pre><p>   // Goto Anything or Find in Files</p><pre><code>&quot;binary_file_patterns&quot;: [&quot;*.jpg&quot;, &quot;*.jpeg&quot;, &quot;*.png&quot;, &quot;*.gif&quot;, &quot;*.ttf&quot;, &quot;*.tga&quot;, &quot;*.dds&quot;, &quot;*.ico&quot;, &quot;*.eot&quot;, &quot;*.pdf&quot;, &quot;*.swf&quot;, &quot;*.jar&quot;, &quot;*.zip&quot;],</code></pre><p>   删除你想要忽略的插件，需要重启</p><pre><code>&quot;ignored_packages&quot;: [&quot;Vintage&quot;]</code></pre><p> }</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/editor/subline_text/my-subline/"/>
      <url>/blog/2019/06/12/editor/subline_text/my-subline/</url>
      
        <content type="html"><![CDATA[<h3 id="My-subline-setting"><a href="#My-subline-setting" class="headerlink" title="====================== My subline setting ======================="></a>====================== My subline setting =======================</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">    <span class="attr">"font_size"</span>: <span class="number">12</span>,</span><br><span class="line">    // 不管鼠标在不在行号边栏，代码折叠按钮一直显示</span><br><span class="line">    "fade_fold_buttons": false,</span><br><span class="line">    // 突出显示当前光标所在的行</span><br><span class="line">    "highlight_line": true,</span><br><span class="line">    // 使标签与修改文件更可见(文件有变动时，tab处高亮显示)</span><br><span class="line">    "highlight_modified_tabs": true,</span><br><span class="line">    // 为true时，保存文件时会删除每行结束后多余的空格</span><br><span class="line">    "trim_trailing_white_space_on_save": true,</span><br><span class="line">    // 按回车时，自动与制表位对齐</span><br><span class="line">    "auto_indent": true,</span><br><span class="line">    // 制表位的对齐白线，draw_normal为一直显示，draw_active为只显示当前光标所在的代码控制域</span><br><span class="line">    "indent_guide_options": ["draw_active"],</span><br><span class="line">    // 为空字符串时，可以启动vi模式</span><br><span class="line">    "ignored_packages":[""],</span><br><span class="line">    // 切换到其它文件标签或点击其它非本软件区域，文件自动保存</span><br><span class="line">    "save_on_focus_lost": true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打开jade文件-–-gt-preerences-–-gt-setting-Syntax"><a href="#打开jade文件-–-gt-preerences-–-gt-setting-Syntax" class="headerlink" title="打开jade文件 –&gt; preerences –&gt; setting-Syntax"></a>打开jade文件 –&gt; preerences –&gt; setting-Syntax</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"tab_size"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">"translate_tabs_to_spaces"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="安装的插件"><a href="#安装的插件" class="headerlink" title="安装的插件"></a>安装的插件</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"bootstrapped"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"in_process_packages"</span>:[],</span><br><span class="line"><span class="attr">"installed_packages"</span>:</span><br><span class="line">[</span><br><span class="line">// 快速编辑HTML，css插件</span><br><span class="line"><span class="string">"Emmet"</span>,</span><br><span class="line">// HTML-CSS-JS格式化</span><br><span class="line"><span class="string">"HTML-CSS-JS Prettify"</span>,</span><br><span class="line"><span class="string">"LESS"</span>,</span><br><span class="line">// markdown文本实时预览插件(用法：Ctrl+Alt+o )</span><br><span class="line"><span class="string">"OmniMarkupPreviewer"</span>,</span><br><span class="line">// 皮肤</span><br><span class="line"><span class="string">"OneDarkMaterial"</span>,</span><br><span class="line"><span class="string">"Package Control"</span>,</span><br><span class="line">// vue 插件</span><br><span class="line"><span class="string">"Vuejs Complete Package"</span>,</span><br><span class="line">// 代码注释插件</span><br><span class="line"><span class="string">"DocBlockr"</span>,</span><br><span class="line">// 可以记住折叠状态和位置的插件</span><br><span class="line"><span class="string">"BufferScroll"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="subline代码片段"><a href="#subline代码片段" class="headerlink" title="subline代码片段"></a>subline代码片段</h4><p>步骤：Tools –&gt; Developer –&gt; New snippent 文件中写入下面片段:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">snippet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">content</span>&gt;</span>&lt;![CDATA[</span><br><span class="line">按下tab键出现的代码片段</span><br><span class="line">$&#123;number&#125; : 鼠标停留的位置</span><br><span class="line">]]&gt;<span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tabTrigger</span>&gt;</span>`!`唤醒代码片段的关键字 <span class="tag">&lt;/<span class="name">tabTrigger</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>`source.python` 在什么文件类型下<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snippet</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Emmet配置让单标签闭合"><a href="#Emmet配置让单标签闭合" class="headerlink" title="Emmet配置让单标签闭合"></a>Emmet配置让单标签闭合</h4><p>步骤：preferences –&gt; package Seeting –&gt; emeet –&gt; Setting-User配置文件中写入下面片段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"syntaxProfiles"</span>:&#123;</span><br><span class="line"><span class="attr">"html"</span>:<span class="string">"xhtml"</span>,</span><br><span class="line"><span class="attr">"vue"</span>:<span class="string">"xhtml"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HTML-CSS-JS-Prettify格式化-vue文件"><a href="#HTML-CSS-JS-Prettify格式化-vue文件" class="headerlink" title="HTML-CSS-JS Prettify格式化.vue文件"></a>HTML-CSS-JS Prettify格式化.vue文件</h4><p>步骤：preferences –&gt; package Seeting –&gt; HTML/CSS/JS Prettify –&gt; Plugin Options-Default  配置文件中：</p><p>将下面代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"html": &#123;</span><br><span class="line">        "allowed_file_extensions": ["htm", "html", "xhtml", "shtml", "xml", "svg"],</span><br><span class="line">        "allowed_file_syntaxes": ["html", "xml"],</span><br><span class="line">        "disallowed_file_patterns": []</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><p>改为：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"html": &#123;</span><br><span class="line">        "allowed_file_extensions": ["htm", "html", "xhtml", "shtml", "xml", "svg", "vue"],</span><br><span class="line">        "allowed_file_syntaxes": ["html", "xml"],</span><br><span class="line">        "disallowed_file_patterns": []</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><h3 id="markdowm-文件单独配置"><a href="#markdowm-文件单独配置" class="headerlink" title="markdowm 文件单独配置"></a>markdowm 文件单独配置</h3><p>步骤：preferences –&gt; Browse Packages 打开 <code>Data\Packages\User\</code>目录下一个名字叫 <code>Markdown.sublime-settings</code> 的配置文件中：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 配置不自动清除空格</span><br><span class="line">  "trim_trailing_white_space_on_save": false</span><br></pre></td></tr></table></figure><h3 id="主题背景（会提示下载文件图标）"><a href="#主题背景（会提示下载文件图标）" class="headerlink" title="主题背景（会提示下载文件图标）"></a>主题背景（会提示下载文件图标）</h3><pre><code>Material Theme配置&quot;color_scheme&quot;: &quot;Packages/Material Theme/schemes/Material-Theme.tmTheme&quot;,&quot;theme&quot;: &quot;Material-Theme.sublime-theme&quot;,</code></pre><p>这行加在底部，可以让浏览器不停的刷新<br><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0.1&quot;&gt;</code></p><p>sublime_txt3注册码：</p><pre><code>—– BEGIN LICENSE —–TwitterInc200 User LicenseEA7E-8900071D77F72E 390CDD93 4DCBA022 FAF6079061AA12C0 A37081C5 D0316412 4584D13694D7F7D4 95BC8C1C 527DA828 560BB037D1EDDD8C AE7B379F 50C9D69D B35179EF2FE898C4 8E4277A8 555CE714 E1FB0E43D5D52613 C3D12E98 BC49967F 7652EED29D2D2E61 67610860 6D338B72 5CF95C69E36B85CC 84991F19 7575D828 470A92AB—— END LICENSE ——</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/ubunto/install-ubuntu-system/"/>
      <url>/blog/2019/06/12/Linux/ubunto/install-ubuntu-system/</url>
      
        <content type="html"><![CDATA[<h1 id="在windows上安裝-ubuntu16-04"><a href="#在windows上安裝-ubuntu16-04" class="headerlink" title="在windows上安裝 ubuntu16.04"></a>在windows上安裝 ubuntu16.04</h1><p><a href="README.md">目录</a></p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p><img src="./images/win-exe.png" alt="win程序设置"></p><p><img src="./images/win-code.png" alt="win开发人员设置"></p><p>重启电脑</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><ol><li>打开命令行工具（cmd or powerShell）</li></ol><p>安装ubuntu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lxrun /install /y  <span class="comment"># 或者输入 bash</span></span><br></pre></td></tr></table></figure><p>卸载ubuntu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lxrun /uninstall /full</span><br></pre></td></tr></table></figure><p><a href="change-ubuntu-sources.md" style="float: right;">&lt;—— ubuntu 换源</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/ubunto/install-zsh/"/>
      <url>/blog/2019/06/12/Linux/ubunto/install-zsh/</url>
      
        <content type="html"><![CDATA[<h1 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h1><p><a href="README.md">目录</a></p><blockquote><p>查看本机安装了那些shell <code>cat /etc/shells</code></p></blockquote><ol><li>先将ubuntu可能自带的<code>oh-my-zsh</code>删除</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r ~/.oh-my-zsh</span><br></pre></td></tr></table></figure><ol start="2"><li>然后安装zsh和git</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh git</span><br></pre></td></tr></table></figure><p>手动安装zsh是用于Ubuntu的 <code>sh</code> 比较诡异，不识别 <code>source</code> 这个指令。装好zsh后仿OS X</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh</span><br></pre></td></tr></table></figure><ol start="3"><li>最后把shell切换成 <code>zsh</code> ，并重启计算机。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chsh -s `<span class="built_in">which</span> zsh`</span><br><span class="line">sudo shutdown -r 0</span><br></pre></td></tr></table></figure><p>如果上面命令无效，修改 <code>~/.bashrc</code> 在开头输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -t 1 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exec</span> zsh</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>3、 配置oh my zsh</p><pre><code>vim ~/.zshrc</code></pre><p>3-1、 修改主题</p><p><code>~/.oh-my-zsh/themes</code> 文件夹下有主题的列表</p><p>样式参考 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</a></p><p>推荐</p><pre><code>ZSH_THEME=&apos;ys&apos;ZSH_THEME=&apos;agnoster&apos;</code></pre><p>3-2、 配置别名</p><p>配置命令的别名方法是： <code>alias ll=&#39;ls -l&#39;</code></p><p>3-3、 修改插件</p><p><code>~/.oh-my-zsh/plugins</code>文件夹下有可用的插件列表</p><p>更换Plugin</p><pre><code>plugins=(git z extract)</code></pre><ul><li>git 显示git信息</li><li>z 可以用来快速跳转</li><li>extract 解压文件插件，所有的文件直接 x filename 即可，不用再记忆各类参数</li></ul><p>修改完后，如果需要在当前<code>shell</code>中生效，需要执行</p><pre><code>source ~/.zshrc</code></pre><p>还可以自己下载插件</p><p>安装<code>zsh-syntax-highlighting</code>插件<br>同样地，我们要先下载它的源码，但在这里，我们可以利用一下oh-my-zsh的插件管理功能：</p><pre><code>cd ~/.oh-my-zsh/custom/pluginsgit clone git://github.com/zsh-users/zsh-syntax-highlighting.git</code></pre><p>然后，我们打开 <code>~/.zshrc</code> 文件，找到以下段落；</p><pre><code># Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/# Example format: plugins=(rails git textmate ruby lighthouse)# Add wisely, as too many plugins slow down shell startup.plugins=(git)</code></pre><p>按照注释中的提示改成 <code>plugins=(git zsh-syntax-highlighting)</code> 即可。</p><p><a href="install-nodejs.md" style="float: right;">&lt;—— ubuntu 安装 nodejs</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/ubunto/install-nodejs/"/>
      <url>/blog/2019/06/12/Linux/ubunto/install-nodejs/</url>
      
        <content type="html"><![CDATA[<h1 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h1><p><a href="README.md">目录</a></p><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><pre><code>curl -sL https://deb.nodesource.com/setup_8.8.0 | sudo -E bash -sudo apt-get install -y nodejs</code></pre><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>1、 先在系统上安装好nodejs和npm</p><pre><code>sudo apt-get install nodejs-legacysudo apt-get install npm</code></pre><p>2、 升级npm为最新版本</p><pre><code>sudo npm install npm@latest -g</code></pre><p>3、 安装用于安装nodejs的模块n</p><pre><code>sudo npm install -g n</code></pre><p>4、 通过n模块安装指定的nodejs</p><pre><code>sudo n latestsudo n stablesudo n lts</code></pre><p>5、 查看版本</p><pre><code>sudo node -vsudo npm -v</code></pre><h3 id="方法三（亲测可行）："><a href="#方法三（亲测可行）：" class="headerlink" title="方法三（亲测可行）："></a>方法三（亲测可行）：</h3><p>1、 下载nodejs压缩文件</p><pre><code>wget https://nodejs.org/dist/v8.8.0/node-v8.8.0-linux-x64.tar.xz</code></pre><p>2、 解压</p><pre><code>tar -xvf node-v8.8.0-linux-x64.tar.xz</code></pre><p>3、 切换并查看当前node所在路径</p><pre><code>cd node-v8.8.0-linux-x64/binpwd</code></pre><p>4、 查看node版本</p><pre><code>./node -v</code></pre><p>5、 将node和npm设置为全局</p><pre><code>sudo ln /usr/src/node-v8.8.0-linux-x64/bin/node /usr/local/bin/nodesudo ln /usr/src/node-v8.8.0-linux-x64/bin/npm /usr/local/bin/npmpwd</code></pre><p><a href="install-google-chrome-stable.md" style="float: right;">&lt;—— ubuntu 安装 Chrome浏览器</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/ubunto/install-google-chrome-stable/"/>
      <url>/blog/2019/06/12/Linux/ubunto/install-google-chrome-stable/</url>
      
        <content type="html"><![CDATA[<h1 id="安装-google-chrome-stable"><a href="#安装-google-chrome-stable" class="headerlink" title="安装 google-chrome-stable"></a>安装 google-chrome-stable</h1><p><a href="README.md">目录</a></p><ol><li>下载</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure><ol start="2"><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure><p><em>提示：如果安装时出现：正在处理用于 man-db (2.7.5-1) 的触发器…在处理时有错误发生：google-chrome-stable”这样的错误，运行下面命令行</em></p><pre><code>sudo apt-get -f install</code></pre><p><a href="install-zsh.md" style="float: right;">&lt;—— ubuntu 安装zsh</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/README/"/>
      <url>/blog/2019/06/12/README/</url>
      
        <content type="html"><![CDATA[<h1 id="log"><a href="#log" class="headerlink" title="log"></a>log</h1><blockquote><p>记录工作和学习中积累的一些东西</p></blockquote><ul><li><a href="./Linux">Linux</a><ul><li><a href="./Linux/ubunto">ubunto</a></li><li><a href="./Linux/centOS">centOS</a></li></ul></li><li><a href="./DB">数据库</a><ul><li><a href="./DB/mysql">mysql</a></li><li><a href="./DB/mongodb">mongodb</a></li><li><a href="./DB/redis">redis</a></li></ul></li><li><a href="./editor">编辑器</a><ul><li><a href="./editor/subline_text">sublime text</a></li><li><a href="./editor/vsCode">vsCode</a></li><li><a href="./editor/vim">vim</a></li></ul></li><li><p><a href="./learn-c++">C++ 学习笔记</a></p></li><li><p><a href="./emoji">表情</a></p></li><li><a href="./git-bash-make">git使用心得</a></li><li><a href="./Automatic_task">windows定时命令</a></li><li><a href="./Installation_package">收集的一些安装包</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/ubunto/init/"/>
      <url>/blog/2019/06/12/Linux/ubunto/init/</url>
      
        <content type="html"><![CDATA[<h1 id="title"><a href="#title" class="headerlink" title="title"></a>title</h1><p><a href="README.md">目录</a></p><pre><code class="bash"></code></pre><p><a href="change-ubunto-sources.md" style="float: right;">&lt;—— ubunto 换源</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/ubunto/install-sougoupinyin/"/>
      <url>/blog/2019/06/12/Linux/ubunto/install-sougoupinyin/</url>
      
        <content type="html"><![CDATA[<h1 id="安装-搜狗拼音"><a href="#安装-搜狗拼音" class="headerlink" title="安装 搜狗拼音"></a>安装 搜狗拼音</h1><p><a href="README.md">目录</a></p><p>1.下载</p><p>到<a href="https://pinyin.sogou.com/linux/" target="_blank" rel="noopener">搜狗输入法官网</a>下载<code>deb格式</code>的包文件</p><p>2.安装 fcitx</p><ul><li>通过 Ubuntu software 搜索 <strong>fcitx</strong>，将所有图标为小企鹅的全部下载安装</li></ul><p>3.安装搜狗输入法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>  ~/Downloads</span><br><span class="line">sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb</span><br></pre></td></tr></table></figure><p><em>具体文件名自行查看</em></p><p>4.删除默认输入法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo su - <span class="comment"># 切换到root，输入密码</span></span><br><span class="line">sudo apt remove ibus*</span><br></pre></td></tr></table></figure><p>5.设置</p><ul><li><p>打开设置 -&gt; 区域和语言 -&gt; 管理已安装的语言 -&gt; 键盘输入法系统：fcitx -&gt; 应用到整个系统</p></li><li><p>重启电脑</p></li><li><p>登陆后在右上角出现一个键盘标志 -&gt; Configure Current Input Method -&gt; 点击 <strong>+</strong> 号 -&gt;<br>Only Show Current Language前面的钩去掉 -&gt; 输入<strong>sougo</strong>，选中，点击ok</p></li></ul><p><a href="install-google-chrome-stable.md" style="float: right;">&lt;—— ubuntu 安装 Chrome</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/other/network/"/>
      <url>/blog/2019/06/12/Linux/other/network/</url>
      
        <content type="html"><![CDATA[<h1 id="network"><a href="#network" class="headerlink" title="network"></a>network</h1><p><code>ifconfig</code>：查看网络配置</p><p><code>ip addr</code>：查看网络地址</p><p><code>service network restart</code>：重启网络服务</p><p><code>netstat -an</code>：查看网络中运行的……</p><p><code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code>：ip配置文件所在位置</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/other/shell/README/"/>
      <url>/blog/2019/06/12/Linux/other/shell/README/</url>
      
        <content type="html"><![CDATA[<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a><a href="./variable.md">变量</a></h3><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a><a href="./date.md">时间</a></h3><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a><a href="./crontab.md">定时任务</a></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/other/shell/crontab/"/>
      <url>/blog/2019/06/12/Linux/other/shell/crontab/</url>
      
        <content type="html"><![CDATA[<h2 id="crontab-定时任务"><a href="#crontab-定时任务" class="headerlink" title="crontab(定时任务)"></a>crontab(定时任务)</h2><ol><li><p>确认crontab是否安装：</p><p> 执行 <code>crontab</code> 命令如果报 <code>command not found，</code>就表明没有安装</p></li><li><p>安装 crontab</p><p> 执行 <code>yum install -y vixie-cron</code></p></li><li><p>确认是否安装成功:</p><p> 执行 <code>crontab -l</code></p></li><li><p>看是否设置了开机自动启动</p><p> <code>chkconfig --list crond</code></p></li><li><p>启动crontab</p><p> <code>service crond start</code></p></li></ol><h3 id="2-、语法使用"><a href="#2-、语法使用" class="headerlink" title="2 、语法使用"></a>2 、语法使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">使用权限:</span><br><span class="line">　　root用户和crontab文件的所有者</span><br><span class="line">语法:</span><br><span class="line">　　crontab [-e [UserName]|-l [UserName]|-r [UserName]|-v [UserName]|File ]</span><br><span class="line">说明:</span><br><span class="line">　　crontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。</span><br><span class="line">-u user 是指设定指定 user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。</span><br><span class="line">如果不使用 -u user 的话，就是表示设定自己的时程表。</span><br><span class="line"></span><br><span class="line">参数:</span><br><span class="line">-e [UserName]: 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，</span><br><span class="line">-r [UserName]: 删除目前的时程表</span><br><span class="line">-l [UserName]: 列出目前的时程表</span><br><span class="line">-v [UserName]: 列出用户cron作业的状态</span><br></pre></td></tr></table></figure><blockquote><p>查看当前用户的时程表</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><h3 id="3、将shell脚本放到crontab中定时运行"><a href="#3、将shell脚本放到crontab中定时运行" class="headerlink" title="3、将shell脚本放到crontab中定时运行"></a>3、将shell脚本放到crontab中定时运行</h3><p><strong>时程表的格式如下:</strong></p><pre><code>minute（分）   hour（时）   day（日）   month（月）   week（周）   command（要执行的命令）</code></pre><p><em>其中：</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">minute # 表示分钟，可以是从0到59之间的任何整数。</span><br><span class="line">hour # 表示小时，可以是从0到23之间的任何整数。</span><br><span class="line">day # 表示日期，可以是从1到31之间的任何整数。</span><br><span class="line">month # 表示月份，可以是从1到12之间的任何整数。</span><br><span class="line">week # 表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。</span><br><span class="line">command # 要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。</span><br></pre></td></tr></table></figure><p><em>在以上各个字段中，还可以使用以下特殊字符：</em></p><ul><li><p><strong>星号</strong> <code>*</code> 代表所有可能的值，例如<code>month</code>字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</p></li><li><p><strong>逗号</strong> <code>,</code> 可以用逗号隔开的值指定一个列表范围，例如，<code>1,2,5,7,8,9</code></p></li><li><p><strong>中杠</strong> <code>-</code> 可以用整数之间的中杠表示一个整数范围，例如<code>2-6</code>表示<code>2,3,4,5,6</code></p></li><li><p><strong>正斜线</strong> <code>/</code> 可以用正斜线指定时间的间隔频率，例如<code>0-23/2</code>  表示每两小时执行一次。同时正斜线可以和星号一起使用，例如<code>*/10</code>，如果用在<code>minute</code>字段，表示每十分钟执行一次。</p></li></ul><blockquote><p>通过执行下面的语句，即可进入类似于vi的文本编辑器界面，我们可以通过在上面誊写上面那种时程表定时调用某个脚本。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>eg：每个5分钟执行一次脚本</strong></p><blockquote><p>第一种写法是*/5，这种写法有的系统会不支持</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/5 * * * * /xxx/task.sh</span><br></pre></td></tr></table></figure><blockquote><p>第二种写法比较繁琐，但所有系统都支持：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0,5,10,15,20,25,30,35,40,45,50,55 * * * * /xx/task.sh</span><br></pre></td></tr></table></figure><p><strong>系统配置</strong></p><blockquote><p>系统配置文件所在的位置：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/crontab</span><br></pre></td></tr></table></figure><blockquote><p>系统用户 <code>crontab</code> 配置文件保存的目录 (reontab -e)：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/var/spool/cron</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> root用户: /var/spool/cron</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> user01用户: /var/spool/cron/user01</span></span><br></pre></td></tr></table></figure><blockquote><p><code>crontab</code> 在系统上的日志目录 <code>/var/log/cron</code>：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -n 2 /var/log/cron # 查看最近两条日志状态</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/other/shell/date/"/>
      <url>/blog/2019/06/12/Linux/other/shell/date/</url>
      
        <content type="html"><![CDATA[<h1 id="时间-date"><a href="#时间-date" class="headerlink" title="时间(date)"></a>时间(date)</h1><p>时间格式化：</p><pre><code>echo  `date &quot;+%Y/%m/%d %H:%M:%S&quot;`  # 输出格式化当前时间</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/other/shell/variable/"/>
      <url>/blog/2019/06/12/Linux/other/shell/variable/</url>
      
        <content type="html"><![CDATA[<h1 id="变量（variable）"><a href="#变量（variable）" class="headerlink" title="变量（variable）"></a>变量（variable）</h1><p>变量赋值：</p><pre><code>var=&quot;这里放变量&quot;变量使用${var}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/ubunto/change-ubuntu-sources/"/>
      <url>/blog/2019/06/12/Linux/ubunto/change-ubuntu-sources/</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu-换源"><a href="#ubuntu-换源" class="headerlink" title="ubuntu 换源"></a>ubuntu 换源</h1><p><a href="README.md">目录</a></p><blockquote><p>因为Ubuntu默认的太慢了，一般裝完ubuntu系統都要先换成国内最快的阿里云源</p></blockquote><h3 id="第一步：-备份原来的源文件"><a href="#第一步：-备份原来的源文件" class="headerlink" title="第一步： 备份原来的源文件"></a>第一步： 备份原来的源文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt/</span><br></pre></td></tr></table></figure><p>然后会显示下面的源文件 <code>sources.list</code></p><p>输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp sources.list sources.list.bak</span><br></pre></td></tr></table></figure><p>就是将<code>sources.list</code> 备份到 <code>sources.list.bak</code></p><h3 id="第二步-替换源"><a href="#第二步-替换源" class="headerlink" title="第二步: 替换源"></a>第二步: 替换源</h3><p>阿里云源的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi sources.list</span><br></pre></td></tr></table></figure><details><br>  <summary>阿里源(ubuntu 16.04)</summary><br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"><span class="comment">##测试版源</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line"><span class="comment"># 源码</span></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"><span class="comment">##测试版源</span></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line"><span class="comment"># Canonical 合作伙伴和附加</span></span><br><span class="line">deb http://archive.canonical.com/ubuntu/ xenial partner</span><br><span class="line">deb http://extras.ubuntu.com/ubuntu/ xenial main</span><br></pre></td></tr></table></figure><br><br></details><details><br>  <summary>中科大源(ubuntu 18.04)</summary><br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><br><br></details><details><br>  <summary><b>阿里源(ubuntu 18.04)</b></summary><br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><br><br></details><details><br>  <summary>163源(ubuntu 18.04)</summary><br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><br><br></details><details><br>  <summary>清华源(ubuntu 18.04)</summary><br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><br><br></details><h3 id="第三步：更新源和软件"><a href="#第三步：更新源和软件" class="headerlink" title="第三步：更新源和软件"></a>第三步：更新源和软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update <span class="comment"># 更新源</span></span><br><span class="line">sudo apt-get upgrade <span class="comment"># 更新软件</span></span><br></pre></td></tr></table></figure><p><a href="install-sougoupinyin.md" style="float: right;">&lt;—— 安装 搜狗输入法</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/ubunto/README/"/>
      <url>/blog/2019/06/12/Linux/ubunto/README/</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h1><blockquote><p>参考： <a href="https://www.jianshu.com/p/bc38ed12da1d" target="_blank" rel="noopener">https://www.jianshu.com/p/bc38ed12da1d</a></p></blockquote><ul><li><a href="./install-ubuntu-system.md">1. 在windows上安裝 ubuntu16.04</a></li><li><a href="./change-ubuntu-sources.md">2. ubuntu换源 </a></li><li><a href="./install-sougoupinyin.md">3. 安装 搜狗输入法</a></li><li><a href="./install-google-chrome-stable.md">4. 安装 Chrome</a></li><li><a href="./install-zsh.md">5. 安装 zsh</a></li><li><a href="./install-nodejs.md">6. 安装 nodejs</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/other/user/"/>
      <url>/blog/2019/06/12/Linux/other/user/</url>
      
        <content type="html"><![CDATA[<h1 id="用户（user）"><a href="#用户（user）" class="headerlink" title="用户（user）"></a>用户（user）</h1><p>1、创建用户</p><pre><code>useradd testuser     # 创建用户testuser</code></pre><p>2、设置密码</p><pre><code>passwd testuser     # 给已创建的用户testuser设置密码</code></pre><blockquote><p>说明：新创建的用户会在/home下创建一个用户目录testuser</p></blockquote><p>3、删除用户</p><pre><code>userdel testuser     # 删除用户testuserrm -rf testuser     # 删除用户testuser所在目录</code></pre><blockquote><p>上面的几个命令只有root账号才可以使用，如果你不知道自己的系统上面的命令在什么位置可以使用如下命令查找其路径：<br>    locate useradd</p></blockquote><p>4、切换用户</p><pre><code>su 用户名            # su是switch user的缩写，表示用户切换</code></pre><p>5、用户组的添加和删除：</p><pre><code>groupadd testgroup     # 组的添加groupdel testgroup     # 组的删除</code></pre><blockquote><p>说明：组的增加和删除信息会在etc目录的group文件中体现出来。</p></blockquote><h3 id="给用户加权限"><a href="#给用户加权限" class="headerlink" title="给用户加权限"></a>给用户加权限</h3><blockquote><ol><li>切换到root用户下</li></ol></blockquote><pre><code>su - </code></pre><blockquote><p>2.添加sudo文件的写权限,命令是:</p></blockquote><pre><code>chmod u+w /etc/sudoers</code></pre><blockquote><p>3.编辑sudoers文件</p></blockquote><pre><code>vi /etc/sudoers</code></pre><blockquote><p>找到这行 <code>root ALL=(ALL) ALL</code>,在他下面添加xxx ALL=(ALL) ALL (这里的xxx是用户名)</p></blockquote><p>可以sudoers添加下面四行中任意一条</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">youuser            ALL=(ALL)                ALL</span><br><span class="line">%youuser           ALL=(ALL)                ALL</span><br><span class="line">youuser            ALL=(ALL)                NOPASSWD: ALL</span><br><span class="line">%youuser           ALL=(ALL)                NOPASSWD: ALL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一行:允许用户youuser执行sudo命令(需要输入密码).</span></span><br><span class="line"><span class="comment"># 第二行:允许用户组youuser里面的用户执行sudo命令(需要输入密码).</span></span><br><span class="line"><span class="comment"># 第三行:允许用户youuser执行sudo命令,并且在执行的时候不输入密码.</span></span><br><span class="line"><span class="comment"># 第四行:允许用户组youuser里面的用户执行sudo命令,并且在执行的时候不输入密码.</span></span><br></pre></td></tr></table></figure><blockquote><p>4.撤销sudoers文件写权限,命令:</p></blockquote><p>chmod u-w /etc/sudoers</p><p><em>这样普通用户就可以使用sudo了.</em></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/yum/README/"/>
      <url>/blog/2019/06/12/Linux/centOS/yum/README/</url>
      
        <content type="html"><![CDATA[<h1 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h1><p>1、备份</p><pre><code>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</code></pre><p>2、下载新的 <code>CentOS-Base.repo</code> 到 <code>/etc/yum.repos.d/</code></p><pre><code># CentOS 5wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo# CentOS 6wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo# CentOS 7wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</code></pre><p>3、 生成缓存</p><pre><code>yum makecache</code></pre><ul><li><p>用YUM安装软件包：<code>yum install &lt;package_name&gt;</code></p></li><li><p>用YUM删除软件包：<code>yum remove &lt;package_name&gt;</code></p></li><li><p>yum 设置安装路径：<code>yum install --installroot=/usr/src/ vim</code></p></li><li><p>yum 清除缓存：<code>yum clean all</code></p></li><li><p>yum升级：<br>  <code>yum -y upgrade</code>(升级所有包，不改变软件设置和系统设置，系统版本升级，内核不改变),<br>  <code>yum -y update</code>(升级所有包，改变软件设置和系统设置,系统版本内核都升级)</p></li></ul><ul><li><p>查看软件安装路径：<code>whereis &lt;package_name&gt;</code></p></li><li><p>查看运行的进程：<code>ps(linux)    tasklist(windows)</code></p></li><li><p>查看物理CPU个数 ：<code>cat /proc/cpuinfo| grep &quot;physical id&quot; | sort| uniq | wc -l</code></p></li><li><p>查看每个物理CPU中core的个数(即核数) ：<code>cat /proc/cpuinfo| grep &quot;cpu cores&quot;| uniq</code></p></li><li><p>查看逻辑CPU的个数 ：<code>cat /proc/cpuinfo| grep &quot;processor&quot;| wc -l</code></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/other/VMware/"/>
      <url>/blog/2019/06/12/Linux/other/VMware/</url>
      
        <content type="html"><![CDATA[<h1 id="VMware"><a href="#VMware" class="headerlink" title="VMware"></a>VMware</h1><h3 id="VMware网络适配器"><a href="#VMware网络适配器" class="headerlink" title="VMware网络适配器"></a>VMware网络适配器</h3><ol><li>桥接模式：直接连接懂啊物理网路<blockquote><p>占用真实网络的IP段<br>可以连接到网络<br>可以与网络中的其他电脑通信</p></blockquote></li><li><p>NET模式：用于共享主机的IP地址</p><blockquote><p>通过VMnet8连接网络<br>可以连接到网络<br>不可以与网络中的其他电脑通信</p></blockquote></li><li><p>仅主机模式：与主机共享专用网络</p><blockquote><p>通过VMnet1连接网络<br>不可以连接到网络<br>不可以与网络中的其他电脑通信</p></blockquote></li></ol><p><img src="/blog/.io//Linux_VMware_network.png" alt="虚拟机网络通信方式"></p><ol><li>进入BIOS</li></ol><p>开机时按F2</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/other/hardwareInfo/README/"/>
      <url>/blog/2019/06/12/Linux/other/hardwareInfo/README/</url>
      
        <content type="html"><![CDATA[<h2 id="centOS-硬件信息"><a href="#centOS-硬件信息" class="headerlink" title="centOS 硬件信息"></a>centOS 硬件信息</h2><ul><li><a href="cpu.md">CPU</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/other/hardwareInfo/cpu/"/>
      <url>/blog/2019/06/12/Linux/other/hardwareInfo/cpu/</url>
      
        <content type="html"><![CDATA[<h1 id="centOS-CPU信息"><a href="#centOS-CPU信息" class="headerlink" title="centOS CPU信息"></a>centOS CPU信息</h1><ol><li>cpu查看</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo | grep "physical id" | uniq | wc -l # cpu个数</span><br><span class="line">cat /proc/cpuinfo | grep "cpu cores" | uniq # cpu核数</span><br><span class="line">cat /proc/cpuinfo | grep 'model name' |uniq # cpu型号</span><br></pre></td></tr></table></figure><ol start="2"><li><p>内存查看：</p><p> cat /proc/meminfo | grep MemTotal</p></li><li><p>硬盘查看：</p><p> fdisk -l | grep Disk</p></li><li><p>其他：</p></li></ol><table><thead><tr><th>命令</th><th>注释</th></tr></thead><tbody><tr><td>uname -a</td><td>查看内核/操作系统/CPU信息的linux系统信息</td></tr><tr><td>head -n l /etc/issue</td><td>查看操作系统版本</td></tr><tr><td>cat /proc/cpuinfo</td><td>查看CPU信息</td></tr><tr><td>hostname</td><td>查看计算机名的linux系统信息命令</td></tr><tr><td>lspci -tv</td><td>列出所有PCI设备</td></tr><tr><td>lsusb -tv</td><td>列出所有USB设备的linux系统信息命令</td></tr><tr><td>lsmod</td><td>列出加载的内核模块</td></tr><tr><td>env</td><td>查看环境变量资源</td></tr><tr><td>free -m</td><td>查看内存使用量和交换区使用量</td></tr><tr><td>df -h</td><td>查看各分区使用情况</td></tr><tr><td>du -sh</td><td>查看指定目录的大小</td></tr><tr><td>grep MemTotal /proc/meminfo</td><td>查看内存总量</td></tr><tr><td>grep MemFree /proc/meminfo</td><td>查看空闲内存量</td></tr><tr><td>uptime</td><td>查看系统运行时间、用户数、负载</td></tr><tr><td>cat /proc/loadavg</td><td>查看系统负载磁盘和分区</td></tr><tr><td>mount</td><td>column -t</td><td>查看挂接的分区状态</td></tr><tr><td>fdisk -l</td><td>查看所有分区</td></tr><tr><td>swapon -s</td><td>查看所有交换分区</td></tr><tr><td>hdparm -i /dev/hda</td><td>查看磁盘参数(仅适用于IDE设备)</td></tr><tr><td>dmesg</td><td>grep IDE</td><td>查看启动时IDE设备检测状况网络</td></tr><tr><td>ifconfig</td><td>查看所有网络接口的属性</td></tr><tr><td>iptables -L</td><td>查看防火墙设置</td></tr><tr><td>route -n</td><td>查看路由表</td></tr><tr><td>netstat -lntp</td><td>查看所有监听端口</td></tr><tr><td>netstat -antp</td><td>查看所有已经建立的连接</td></tr><tr><td>netstat -s</td><td>查看网络统计信息进程</td></tr><tr><td>ps -ef</td><td>查看所有进程</td></tr><tr><td>top</td><td>实时显示进程状态用户</td></tr><tr><td>w</td><td>查看活动用户</td></tr><tr><td>id</td><td>查看指定用户信息</td></tr><tr><td>last</td><td>查看用户登录日志</td></tr><tr><td>cut -d: -f1 /etc/passwd</td><td>查看系统所有用户</td></tr><tr><td>cut -d: -f1 /etc/group</td><td>查看系统所有组</td></tr><tr><td>crontab -l</td><td>查看当前用户的计划任务服务</td></tr><tr><td>chkconfig –list</td><td>列出所有系统服务</td></tr><tr><td>chkconfig –list</td><td>grep on</td><td>列出所有启动的系统服务程序</td></tr><tr><td>rpm -qa</td><td>查看所有安装的软件包</td></tr><tr><td>cat /proc/cpuinfo</td><td>查看CPU相关参数的linux系统命令</td></tr><tr><td>cat /proc/partitions</td><td>查看linux硬盘和分区信息的系统信息命令</td></tr><tr><td>cat /proc/meminfo</td><td>查看linux系统内存信息的linux系统命令</td></tr><tr><td>cat /proc/version</td><td>查看版本，类似uname -r</td></tr><tr><td>cat /proc/ioports</td><td>查看设备io端口</td></tr><tr><td>cat /proc/interrupts</td><td>查看中断</td></tr><tr><td>cat /proc/pci</td><td>查看pci设备的信息</td></tr><tr><td>cat /proc/swaps</td><td>查看所有swap分区的信息</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/scp/README/"/>
      <url>/blog/2019/06/12/Linux/centOS/scp/README/</url>
      
        <content type="html"><![CDATA[<h1 id="scp-上传-amp-amp-下载"><a href="#scp-上传-amp-amp-下载" class="headerlink" title="scp 上传&amp;&amp;下载"></a>scp 上传&amp;&amp;下载</h1><p>1、上传本地文件到服务器</p><pre><code>scp /path/filename username@servername:/path/</code></pre><p>例如<code>scp /var/www/test.php root@192.168.0.101:/var/www/ 把本机/var/www/</code>目录下的<code>test.php</code>文件上传到<code>192.168.0.101</code>这台服务器上的<code>/var/www/</code>目录中</p><p>2、从服务器上下载文件</p><p>下载文件我们经常使用wget，但是如果没有http服务，如何从服务器上下载文件呢？</p><pre><code>scp username@servername:/path/filename /var/www/local_dir（本地目录）</code></pre><p>例如<code>scp root@192.168.0.101:/var/www/test.txt 把192.168.0.101上的/var/www/test.txt</code> 的文件下载到<code>/var/www/local_dir</code>（本地目录）</p><p>3、从服务器下载整个目录</p><pre><code>scp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）</code></pre><p>例如:<code>scp -r root@192.168.0.101:/var/www/test /var/www/</code></p><p>4、上传目录到服务器</p><pre><code>scp -r local_dir username@servername:remote_dir</code></pre><p>例如：<code>scp -r test root@192.168.0.101:/var/www/</code> 把当前目录下的<code>test</code>目录上传到服务器的<code>/var/www/</code> 目录</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>scp 本地用户名 @IP 地址 : 文件名 1 远程用户名 @IP 地址 : 文件名 2</p><p>[ 本地用户名 @IP 地址 :] 可以不输入 , 可能需要输入远程用户名所对应的密码 。</p><p>可能有用的几个参数 :</p><p><code>-v</code> 和大多数 linux 命令中的 <code>-v</code> 意思一样 , 用来显示进度 。 可以用来查看连接 , 认证 , 或是配置错误 。</p><p><code>-C</code> 使能压缩选项 。</p><p><code>-r</code> 上传下载文件夹(默认是文件) 。</p><p><code>-P</code> 选择端口 。 注意 <code>-p</code> 已经被 <code>rcp</code> 使用 。</p><p><code>-4</code> 强行使用 IPV4 地址 。</p><p><code>-6</code> 强行使用 IPV6 地址 。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/nginx/config/"/>
      <url>/blog/2019/06/12/Linux/centOS/nginx/config/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx配置说明"><a href="#nginx配置说明" class="headerlink" title="nginx配置说明"></a>nginx配置说明</h1><details><br>    <summary>默认的 config</summary><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"># user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"># error_log  logs/error.log;</span><br><span class="line"># error_log  logs/error.log  notice;</span><br><span class="line"># error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line"># pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                   &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                   &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    # access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    # tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    # keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    # gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        # charset koi8-r;</span><br><span class="line"></span><br><span class="line">        # access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        #  redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #  proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        # location ~ \.php$ &#123;</span><br><span class="line">        #     proxy_pass   http://127.0.0.1;</span><br><span class="line">        # &#125;</span><br><span class="line"></span><br><span class="line">        #  pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        # location ~ \.php$ &#123;</span><br><span class="line">        #     root           html;</span><br><span class="line">        #     fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #     fastcgi_index  index.php;</span><br><span class="line">        #     fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #     include        fastcgi_params;</span><br><span class="line">        # &#125;</span><br><span class="line"></span><br><span class="line">        #  deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        #  concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        # location ~ /\.ht &#123;</span><br><span class="line">        #     deny  all;</span><br><span class="line">        # &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #  another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    # server &#123;</span><br><span class="line">    #     listen       8000;</span><br><span class="line">    #     listen       somename:8080;</span><br><span class="line">    #     server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #     location / &#123;</span><br><span class="line">    #         root   html;</span><br><span class="line">    #         index  index.html index.htm;</span><br><span class="line">    #     &#125;</span><br><span class="line">    # &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #  HTTPS server</span><br><span class="line">    #</span><br><span class="line">    # server &#123;</span><br><span class="line">    #     listen       443 ssl;</span><br><span class="line">    #     server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #     ssl_certificate      cert.pem;</span><br><span class="line">    #     ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #     ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #     ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #     ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #     ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #     location / &#123;</span><br><span class="line">    #         root   html;</span><br><span class="line">    #         index  index.html index.htm;</span><br><span class="line">    #     &#125;</span><br><span class="line">    # &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details><details><br>    <summary>nginx 配置文件结构</summary><br>1、全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。<br><br>2、events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。<br><br>3、http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。<br><br>4、server块：配置虚拟主机的相关参数，一个http中可以有多个server。<br><br>5、location块：配置请求的路由，以及各种页面的处理情况。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...              # 全局块</span><br><span class="line"></span><br><span class="line">events &#123;         # events块</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http      # http块</span><br><span class="line">&#123;</span><br><span class="line">    ...   # http全局块</span><br><span class="line">    server        # server块</span><br><span class="line">    &#123;</span><br><span class="line">        ...       # server全局块</span><br><span class="line">        location [PATTERN]   # location块</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        location [PATTERN]</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...     # http全局块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details><details><br>    <summary>示例</summary><br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###########  每个指令必须有分号结束。#################</span></span><br><span class="line"><span class="comment"># 配置用户或者组，默认为nobody nobody。</span></span><br><span class="line"><span class="comment"># user root root;</span></span><br><span class="line"><span class="comment"># 允许生成的进程数，默认为1</span></span><br><span class="line"><span class="comment"># worker_processes 2;</span></span><br><span class="line"><span class="comment"># 指定nginx进程运行文件存放地址</span></span><br><span class="line"><span class="comment"># pid /nginx/pid/nginx.pid;</span></span><br><span class="line"><span class="comment"># 制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span></span><br><span class="line">error_log <span class="built_in">log</span>/error.log debug;</span><br><span class="line">events &#123;</span><br><span class="line">    <span class="comment"># 设置网路连接序列化，防止惊群现象发生，默认为on</span></span><br><span class="line">    accept_mutex on;</span><br><span class="line">    <span class="comment"># 设置一个进程是否同时接受多个网络连接，默认为off</span></span><br><span class="line">    multi_accept on;</span><br><span class="line">    <span class="comment"># 事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span></span><br><span class="line">    <span class="comment"># use epoll;</span></span><br><span class="line">    <span class="comment"># 最大连接数，默认为512</span></span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    <span class="comment"># 文件扩展名与文件类型映射表</span></span><br><span class="line">    include       mime.types;</span><br><span class="line">    <span class="comment"># 默认文件类型，默认为text/plain</span></span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    <span class="comment"># 取消服务日志</span></span><br><span class="line">    <span class="comment"># access_log off;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义格式</span></span><br><span class="line">    log_format myFormat <span class="string">'$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'</span>;</span><br><span class="line">    <span class="comment"># combined为日志格式的默认值</span></span><br><span class="line">    access_log <span class="built_in">log</span>/access.log myFormat;</span><br><span class="line">    <span class="comment"># 允许 sendfile 方式传输文件，默认为off，可以在http块，server块，location块。</span></span><br><span class="line">    sendfile on;</span><br><span class="line">    <span class="comment"># 每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span></span><br><span class="line">    sendfile_max_chunk 100k;</span><br><span class="line">    <span class="comment"># 连接超时时间，默认为75s，可以在http，server，location块。</span></span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line"><span class="comment"># 开启gzip压缩</span></span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable <span class="string">"MSIE [1-6]."</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定请求缓冲</span></span><br><span class="line">    client_header_buffer_size    128k;</span><br><span class="line">    large_client_header_buffers  4 128k;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 限制同一客户端ip地址("zone=" 给它一个名字，可以随便叫，这个名字要跟下面的 limit_conn 一致,$binary_remote_addr = 用二进制来储存客户端的地址，1m 可以储存 32000 个并发会话)</span></span><br><span class="line">    limit_conn_zone <span class="variable">$binary_remote_addr</span> zone=perip:3m;</span><br><span class="line">    <span class="comment"># 限制同一server最大并发数</span></span><br><span class="line">limit_conn_zone <span class="variable">$server_name</span> zone=perserver:3m;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制并发连接数(一个IP允许两个并发连接，那么这个IP就是限速limit_rate * 2)</span></span><br><span class="line">    limit_conn perip 2;</span><br><span class="line">    limit_conn perserver 20;</span><br><span class="line">    <span class="comment"># 限制下载速度（是对每个连接限速100k。这里是对连接限速，而不是对IP限速！）</span></span><br><span class="line">    limit_rate 500k;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设定负载均衡的服务器列表</span></span><br><span class="line"><span class="comment"># weigth 参数表示权值，权值越高被分配到的几率越大</span></span><br><span class="line">    upstream mysvr &#123;</span><br><span class="line">      server 127.0.0.1:7878;</span><br><span class="line">      <span class="comment"># 热备</span></span><br><span class="line">      server 192.168.10.121:3333 backup;</span><br><span class="line">      server 192.168.68.45:8080 weight=1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 错误页</span></span><br><span class="line">    error_page 404 https://www.baidu.com;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="comment"># 单连接请求上限次数。</span></span><br><span class="line">        keepalive_requests 120;</span><br><span class="line">        <span class="comment"># 监听端口</span></span><br><span class="line">        listen       4545;</span><br><span class="line">    <span class="comment">#定义使用 www.movie.cn访问</span></span><br><span class="line">        server_name  mysvr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#设定本虚拟主机的访问日志</span></span><br><span class="line">       access_log  logs/movie.access.log  myFormat;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#默认请求</span></span><br><span class="line">        location / &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#定义首页索引文件的名称</span></span><br><span class="line">            index index.php index.html index.htm;</span><br><span class="line">            <span class="comment"># 反向代理，和upstream的名字一样</span></span><br><span class="line">            proxy_pass http://mysvr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义错误提示页面</span></span><br><span class="line">        error_page   500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#静态文件，nginx自己处理</span></span><br><span class="line">        location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">#过期30天，静态文件不怎么更新，过期可以设大一点，</span></span><br><span class="line">            <span class="comment">#如果频繁更新，则可以设置得小一点。</span></span><br><span class="line">            expires 30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.(gif|png|css|js|icon)$ &#123;</span><br><span class="line">           proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">           proxy_set_header X-Real_IP <span class="variable">$remote_addr</span>;</span><br><span class="line">           proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 图片</span></span><br><span class="line">        location ~* .*\.(jpeg|jpg|JPG)$ &#123;</span><br><span class="line">            proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">            proxy_set_header X-Real_IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="comment"># image_filter resize 480 -;</span></span><br><span class="line">        <span class="comment"># image_filter_jpeg_quality 50;</span></span><br><span class="line">        <span class="comment"># image_filter_sharpen 10;</span></span><br><span class="line">        <span class="comment"># image_filter_buffer 4M;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span></span><br><span class="line">        location  ~*^.+$ &#123;</span><br><span class="line">           <span class="comment"># 根目录</span></span><br><span class="line">           <span class="comment"># root path;</span></span><br><span class="line"></span><br><span class="line">           <span class="comment"># 设置默认页</span></span><br><span class="line">           <span class="comment"># index vv.txt;</span></span><br><span class="line"></span><br><span class="line">           <span class="comment"># 请求转向 mysvr 定义的服务器列表</span></span><br><span class="line">           proxy_pass  http://mysvr;</span><br><span class="line">           <span class="comment"># 拒绝的ip</span></span><br><span class="line">           deny 127.0.0.1;</span><br><span class="line">           <span class="comment"># 允许的ip</span></span><br><span class="line">           allow 172.18.5.54;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details><ul><li><code>$remote_addr</code> 与 <code>$http_x_forwarded_for</code> 用以记录客户端的ip地址；</li><li><code>$remote_user</code>用来记录客户端用户名称；</li><li><code>$time_local</code> 用来记录访问时间与时区；</li><li><code>$request</code> 用来记录请求的url与http协议；</li><li><code>$status</code> 用来记录请求状态；成功是200，</li><li><code>$body_bytes_sent</code> 记录发送给客户端文件主体内容大小；</li><li><code>$http_referer</code> 用来记录从那个页面链接访问过来的；</li><li><code>$http_user_agent</code> 记录客户端浏览器的相关信息；</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/nginx/install/"/>
      <url>/blog/2019/06/12/Linux/centOS/nginx/install/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h1><p>安装依赖包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ openssl-devel pcre-devel httpd-tools</span><br></pre></td></tr></table></figure></p><h3 id="首先要安装-PCRE"><a href="#首先要安装-PCRE" class="headerlink" title="首先要安装 PCRE"></a>首先要安装 PCRE</h3><p>下载<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压安装包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf pcre-8.35.tar.gz</span><br></pre></td></tr></table></figure></p><p>进入安装包目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> pcre-8.35</span><br></pre></td></tr></table></figure></p><p>编译安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>查看pcre版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcre-config --version</span><br></pre></td></tr></table></figure></p><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><p>下载<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.15.3.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf nginx-1.15.3.tar.gz</span><br></pre></td></tr></table></figure></p><p>编译安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx-1.15.3</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --user=nginx --with-http_stub_status_module --group=nginx --with-http_ssl_module --with-http_mp4_module --with-http_flv_module --with-pcre=/usr/<span class="built_in">local</span>/src/pcre-8.35</span><br><span class="line">make&amp;make install</span><br></pre></td></tr></table></figure></p><p>运行nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/sbin  <span class="comment"># 软连接</span></span><br><span class="line">nginx <span class="comment"># 运行成功后可以通过浏览器访问了</span></span><br></pre></td></tr></table></figure></p><p>查看nginx运行的端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anptu |grep nginx</span><br></pre></td></tr></table></figure></p><p>检查配置文件nginx.conf的正确性命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">nginx: the configuration file /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure></p><p>常用的几个命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload            <span class="comment"># 重新载入配置文件</span></span><br><span class="line">nginx -s reopen            <span class="comment"># 重启 Nginx</span></span><br><span class="line">nginx -s stop              <span class="comment"># 停止 Nginx</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/conf/nginx.conf <span class="comment"># Nginx配置文件所在位置</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/nginx/README/"/>
      <url>/blog/2019/06/12/Linux/centOS/nginx/README/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx-用法-http-www-nginx-org"><a href="#nginx-用法-http-www-nginx-org" class="headerlink" title="nginx 用法 http://www.nginx.org/"></a>nginx 用法 <a href="http://www.nginx.org/" target="_blank" rel="noopener">http://www.nginx.org/</a></h1><ul><li><a href="./install.md">nginx安装</a></li><li><a href="./config.md">nginx配置说明</a></li></ul><p>运行nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/sbin  <span class="comment"># 软连接</span></span><br><span class="line">nginx <span class="comment"># 运行成功后可以通过浏览器访问了</span></span><br></pre></td></tr></table></figure></p><p>查看nginx运行的端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -anptu |grep nginx</span><br></pre></td></tr></table></figure></p><p>检查配置文件nginx.conf的正确性命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">nginx: the configuration file /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure></p><p>常用的几个命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload            <span class="comment"># 重新载入配置文件</span></span><br><span class="line">nginx -s reopen            <span class="comment"># 重启 Nginx</span></span><br><span class="line">nginx -s stop              <span class="comment"># 停止 Nginx</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/conf/nginx.conf <span class="comment"># Nginx配置文件所在位置</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/install/zsh/"/>
      <url>/blog/2019/06/12/Linux/centOS/install/zsh/</url>
      
        <content type="html"><![CDATA[<h1 id="centos6-5-安装zsh"><a href="#centos6-5-安装zsh" class="headerlink" title="centos6.5 安装zsh"></a>centos6.5 安装zsh</h1><p>1、 查看centos的bin下是否有zsh包</p><pre><code>cat /etc/shells</code></pre><p>2、 安装zsh包</p><pre><code>sudo yum install zsh</code></pre><p>3、 使用命令 chsh -s /bin/zsh更换成SHELL</p><pre><code>echo $SHELLchsh -s /bin/zshecho $SHELL</code></pre><p>4、 重启</p><pre><code>reboot</code></pre><h3 id="Oh-my-zsh"><a href="#Oh-my-zsh" class="headerlink" title="Oh my zsh"></a>Oh my zsh</h3><p>1、 先安装git环境</p><pre><code>sudo yum install git</code></pre><p>2、 安装oh my zsh</p><pre><code>wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh##########################   如果看的下面的画面表示你成功了   ######################\033[0;34mLooking for an existing zsh config...\033[0m\033[0;34mUsing the Oh My Zsh template file and adding it to ~/.zshrc\033[0m\033[0;34mCopying your current PATH and adding it to the end of ~/.zshrc for you.\033[0m\033[0;32m         __                                     __   \033[0m\033[0;32m  ____  / /_     ____ ___  __  __   ____  _____/ /_  \033[0m\033[0;32m / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \ \033[0m\033[0;32m/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / / \033[0m\033[0;32m\____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/  \033[0m\033[0;32m                        /____/                       ....is now installed!\033[0m</code></pre><p><em>如果出現<code>SSL connect error</code>,请升级网络安全服务 <code>yum update nss</code></em></p><p>3、 配置oh my zsh</p><pre><code>vim ~/.zshrc</code></pre><p>3-1、 修改主题</p><p><code>~/.oh-my-zsh/themes</code> 文件夹下有主题的列表</p><p>样式参考 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</a></p><p>推荐</p><pre><code>ZSH_THEME=&apos;ys&apos;ZSH_THEME=&apos;agnoster&apos;</code></pre><p>3-2、 配置别名</p><p>配置命令的别名方法是： <code>alias ll=&#39;ls -l&#39;</code></p><p>3-3、 修改插件</p><p><code>~/.oh-my-zsh/plugins</code>文件夹下有可用的插件列表</p><p>更换Plugin</p><pre><code>plugins=(git z extract)</code></pre><ul><li>git 显示git信息</li><li>z 可以用来快速跳转</li><li>extract 解压文件插件，所有的文件直接 x filename 即可，不用再记忆各类参数</li></ul><p>修改完后，如果需要在当前<code>shell</code>中生效，需要执行</p><pre><code>source ~/.zshrc</code></pre><p>还可以自己下载插件</p><p>安装<code>zsh-syntax-highlighting</code>插件<br>同样地，我们要先下载它的源码，但在这里，我们可以利用一下oh-my-zsh的插件管理功能：</p><pre><code>cd ~/.oh-my-zsh/custom/pluginsgit clone git://github.com/zsh-users/zsh-syntax-highlighting.git</code></pre><p>然后，我们打开 <code>~/.zshrc</code> 文件，找到以下段落；</p><pre><code># Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/# Example format: plugins=(rails git textmate ruby lighthouse)# Add wisely, as too many plugins slow down shell startup.plugins=(git)</code></pre><p>按照注释中的提示改成 <code>plugins=(git zsh-syntax-highlighting)</code> 即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/install/python/"/>
      <url>/blog/2019/06/12/Linux/centOS/install/python/</url>
      
        <content type="html"><![CDATA[<p>1、CentOS6.5 安装Python 的依赖包</p><pre><code>yum groupinstall &quot;Development tools&quot;yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</code></pre><p>2、下载Python3.6的源码包并编译</p><pre><code>wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgztar xf Python-3.6.0.tgzcd Python-3.6.0./configure --prefix=/usr/local --enable-sharedmakemake installln –s /usr/local/bin/python3 /usr/bin/python3</code></pre><p>3、在运行Python之前需要配置库：</p><pre><code>echo /usr/local/lib &gt;&gt; /etc/ld.so.conf.d/local.confldconfig</code></pre><p>4、运行演示：</p><pre><code>python3 --versionPython 3.6.0</code></pre><p>5、删除编译Python时所需要的库(如果报错，可以不加–remove-leaveas)</p><pre><code>yum groupremove &quot;Development tools&quot; --remove-leaveasyum remove zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel --remove-leaves</code></pre><p>6、设置别名方便使用</p><pre><code>alias py=python3</code></pre><p>7、CentOS 安装easy_install、pip的方法</p><p>CentOS 安装easy_install的方法：</p><pre><code>wget -q http://peak.telecommunity.com/dist/ez_setup.pypython ez_setup.py</code></pre><p>8、CentOS安装python包管理安装工具pip的方法如下：</p><pre><code>wget --no-check-certificate https://github.com/pypa/pip/archive/1.5.5.tar.gz</code></pre><p>注意：wget获取https的时候要加上：–no-check-certificate</p><pre><code>tar zvxf 1.5.5.tar.gz    #解压文件cd pip-1.5.5/python3 setup.py install</code></pre><p>OK，这样就安装好pip了，</p><p>下面来安装 requests吧。</p><pre><code>pip3 install requests</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/install/nodejs/"/>
      <url>/blog/2019/06/12/Linux/centOS/install/nodejs/</url>
      
        <content type="html"><![CDATA[<h2 id="方法一（直接下载编译好的）"><a href="#方法一（直接下载编译好的）" class="headerlink" title="方法一（直接下载编译好的）"></a>方法一（直接下载编译好的）</h2><p>第一步：</p><pre><code>wget https://nodejs.org/dist/v8.8.0/node-v8.8.0-linux-x86.tar.xz</code></pre><p>第二步  解压缩文件包</p><pre><code>tar xvf node-v8.8.0-linux-x86.tar.gz</code></pre><p>第三步  NODE 环境配置<br>    这样可以使得在任何目录下，都可以使用<code>/usr/local/src/node-v8.8.0-linux-x86/bin</code> 下得node命令，<br>    步骤如下：</p><pre><code>a、切换到 root 用户b、vi /etc/profilec、在最下面加入   # node （注释作用）   export NODE_HOME=/usr/local/src/node-v8.8.0-linux-x86   export PATH=$PATH:$NODE_HOME/bin   export NODE_PATH=$NODE_HOME/lib/node_modulesd、:wq （保存并退出）e、source /etc/profile （使配置文件生效,重启后失效）e、source /etc/bashrc （使配置文件生效,重启后有效）</code></pre><p>第四步 大功告成<br>    你就可以用 <code>node -v</code> 看自己的成果了！</p><h2 id="方法二：（自己编译）"><a href="#方法二：（自己编译）" class="headerlink" title="方法二：（自己编译）"></a>方法二：（自己编译）</h2><p>准备：</p><p>先查看gcc版本（必须是4.8.2以上）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://people.centos.org/tru/devtools-2/devtools-2.repo</span><br><span class="line">mv devtools-2.repo /etc/yum.repos.d</span><br><span class="line">yum install devtoolset-2-gcc devtoolset-2-binutils devtoolset-2-gcc-c++</span><br></pre></td></tr></table></figure></p><p>三个安装包会被装在 <code>/opt/rh/devtoolset-2/root/</code> 中</p><p>更新软连接：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/bin/gcc /usr/bin/gcc-4.4.7</span><br><span class="line">mv /usr/bin/g++ /usr/bin/g++-4.4.7</span><br><span class="line">mv /usr/bin/c++ /usr/bin/c++-4.4.7</span><br><span class="line">ln -s /opt/rh/devtoolset-2/root/usr/bin/gcc /usr/bin/gcc</span><br><span class="line">ln -s /opt/rh/devtoolset-2/root/usr/bin/c++ /usr/bin/c++</span><br><span class="line">ln -s /opt/rh/devtoolset-2/root/usr/bin/g++ /usr/bin/g++</span><br><span class="line">gcc --version</span><br></pre></td></tr></table></figure></p><p>第一步：下载</p><pre><code>cd /usr/srcwget https://github.com/nodejs/node/archive/v8.8.0.tar.gz  # 源码（会有一些坑，而且还需要编译，不推荐使用）</code></pre><p>第二步： 解压缩文件包</p><pre><code>tar -zvxf v8.8.0.tar.gz</code></pre><p>第三步： 编译</p><pre><code>mv ./node-8.8.0 /usr/local/src/node-8.8.0cd /usr/local/src/node-8.8.0sudo make &amp;&amp; sudo make install或者sudo ./configure</code></pre><p>第四步：配置环境变量</p><pre><code>a、切换到 root 用户b、vi /etc/profilec、在最下面加入   # node （注释作用）   export NODE_HOME=/usr/local/src/node-8.8.0   export PATH=$PATH:$NODE_HOME/bin   export NODE_PATH=$NODE_HOME/lib/node_modulesd、:wq （保存并退出）e、source /etc/profile （使配置文件生效）</code></pre><h2 id="方法三（通过yum下载）"><a href="#方法三（通过yum下载）" class="headerlink" title="方法三（通过yum下载）"></a>方法三（通过yum下载）</h2><p>另一个有效且简单的方法来安装Node.js就是从官方库。这同样确保您可以访问到EPEL库，你可以通过运行以下命令。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install epel-release</span><br></pre></td></tr></table></figure></p><p>现在可以使用yum命令安装Node.js了。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nodejs</span><br></pre></td></tr></table></figure></p><p>因为在开发过程中我需要管理节点包，我还要安装新公共管理的软件包管理器，使用以下命令。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install npm</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/install/mysql/"/>
      <url>/blog/2019/06/12/Linux/centOS/install/mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>MYSQL相关的包：</p><ul><li><code>MySQL</code>： MySQL服务器。你需要该选项，除非你只想连接运行在另一台机器上的<code>MySQL</code>服务器。</li><li><code>MySQL-client</code>： MySQL 客户端程序，用于连接并操作<code>Mysql</code>服务器。</li><li><code>MySQL-devel</code>： 库和包含文件，如果你想要编译其它<code>MySQL</code>客户端，例如Perl模块，则需要安装该<code>RPM</code>包。</li><li><code>MySQL-shared</code>： 该软件包包含某些语言和应用程序需要动态装载的共享库<code>(libmysqlclient.so*)</code>，使用MySQL。</li><li><code>MySQL-bench</code>： MySQL数据库服务器的基准和性能测试工具</li></ul><p>检测卸载mysql：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep mysql # 检测系统是否自带安装 mysql</span><br><span class="line"></span><br><span class="line">rpm -e mysql　　# 普通删除模式</span><br><span class="line">rpm -e --nodeps mysql　 # 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除</span><br></pre></td></tr></table></figure><p>安装 mysql(CentOS 7以下)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql</span><br><span class="line">yum install mysql-server</span><br><span class="line">yum install mysql-devel</span><br></pre></td></tr></table></figure><p>启动 mysql：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure></p><p><em>注意：如果我们是第一次启动 mysql 服务，mysql 服务器首先会进行初始化的配置。</em></p><p>如果是 <strong>CentOS 7 以上版本</strong>，由于 MySQL数据库已从默认的程序列表中移除，可以使用 mariadb 代替：</p><pre><code>yum install mariadb-server mariadb</code></pre><p>mariadb数据库的相关命令是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb  # 启动MariaDB</span><br><span class="line">systemctl stop mariadb  # 停止MariaDB</span><br><span class="line">systemctl restart mariadb  # 重启MariaDB</span><br><span class="line">systemctl enable mariadb  # 设置开机启动</span><br></pre></td></tr></table></figure><p>验证Mysql安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[root@host]#</span><span class="bash"> mysqladmin --version</span></span><br><span class="line">mysqladmin  Ver 8.42 Distrib 5.6.39, for Linux on x86_64  # 此结果是mysql基于Linux系统信息</span><br></pre></td></tr></table></figure><p><em>如果以上命令执行后未输入任何信息，说明你的Mysql未安装成功。</em></p><p>使用 MySQL Client(Mysql客户端) 执行简单的SQL命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[root@host]#</span><span class="bash"> mysql <span class="comment"># 连接服务器（密码为空）</span></span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW DATABASES; <span class="comment"># 显示数据库</span></span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Mysql安装成功后，默认的root用户密码为空，也可以通过下面命令创建root用户的密码</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[root@host]#</span><span class="bash"> mysqladmin -u root password <span class="string">"lq_toor"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用户名密码连接</span></span><br><span class="line"><span class="meta">[root@host]#</span><span class="bash"> mysql -u root -p</span></span><br><span class="line">Enter password:*******</span><br></pre></td></tr></table></figure><p><em>注意：在输入密码时，密码是不会显示了，你正确输入即可。</em></p><p>MySQL安装后涉及的目录如下：</p><table><thead><tr><th>目录</th><th>目录中的内容</th></tr></thead><tbody><tr><td>/usr/bin</td><td>客户端程序和脚本</td></tr><tr><td>/usr/sbin</td><td>Mysqld服务器</td></tr><tr><td>/var/lib/mysql</td><td>数据库的日志文件</td></tr><tr><td>/usr/share/info</td><td>信息格式手册</td></tr><tr><td>/usr/share/man</td><td>Unix 手册页</td></tr><tr><td>/usr/include/mysql</td><td>包括 （标题） 的文件</td></tr><tr><td>/usr/lib/mysql</td><td>mysql的lib包</td></tr><tr><td>/usr/share/mysql</td><td>杂项的支持文件，包括错误消息） 字符设置的文件，示例配置文件，SQL 数据库安装</td></tr><tr><td>/usr/share/sql-bench</td><td>基准</td></tr></tbody></table><p>Window 上安装Mysql：</p><p>Window上安装Mysql相对来说会较为简单，你只需要在 MySQL 下载中下载window版本的mysql安装包，并解压安装包。</p><p>双击 setup.exe 文件，接下来你只需要安装默认的配置点击”next”即可，默认情况下安装信息会在C:\mysql目录中。</p><p>接下来你可以通过”开始” =》在搜索框中输入 “ cmd” 命令 =》 在命令提示符上切换到 C:\mysql\bin 目录，并输入一下命令：</p><pre><code>mysqld.exe --console</code></pre><p>如果安装成功以上命令将输出一些mysql启动及InnoDB信息。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/install/mongodb/"/>
      <url>/blog/2019/06/12/Linux/centOS/install/mongodb/</url>
      
        <content type="html"><![CDATA[<h2 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h2><p>下载地址：<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center#community</a></p><p>下载完安装包，并解压 <code>tgz</code>（以下演示的是 64 位 Linux上的安装） 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz    <span class="comment"># 下载</span></span><br><span class="line">tar -zxvf mongodb-linux-x86_64-3.0.6.tgz                                   <span class="comment"># 解压</span></span><br><span class="line"></span><br><span class="line">mv  mongodb-linux-x86_64-3.0.6/ /usr/<span class="built_in">local</span>/mongodb                         <span class="comment"># 将解压包拷贝到指定目录</span></span><br></pre></td></tr></table></figure></p><p>MongoDB 的可执行文件位于 bin 目录下，所以可以将其添加到 PATH 路径中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=&lt;mongodb-install-directory&gt;/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p><p><strong><mongodb-install-directory></mongodb-install-directory></strong>  为你 MongoDB 的安装路径。如本文的 /usr/local/mongodb 。</p><h4 id="创建数据库目录"><a href="#创建数据库目录" class="headerlink" title="创建数据库目录"></a>创建数据库目录</h4><ul><li><code>MongoDB</code>的数据存储在<code>data</code>目录的<code>db</code>目录下，但是这个目录在安装过程不会自动创建，所以你需要手动创建<code>data</code>目录，并在<code>data</code>目录中创建<code>db</code>目录。</li><li>以下实例中我们将data目录创建于根目录下(/)。</li></ul><p><em>注意：<code>/data/db</code> 是 <code>MongoDB</code> 默认的启动的数据库路径<code>(--dbpath)</code>。</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/db</span><br></pre></td></tr></table></figure><h4 id="命令行中运行-MongoDB-服务"><a href="#命令行中运行-MongoDB-服务" class="headerlink" title="命令行中运行 MongoDB 服务"></a>命令行中运行 MongoDB 服务</h4><p>可以再命令行中执行<code>mongo</code>安装目录中的<code>bin</code>目录执行<code>mongod</code>命令来启动<code>mongdb</code>服务。</p><p><em>注意：如果你的数据库目录不是/data/db，可以通过 –dbpath 来指定。</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./mongod</span><br><span class="line">2015-09-25T16:39:50.549+0800 I JOURNAL  [initandlisten] journal dir=/data/db/journal</span><br><span class="line">2015-09-25T16:39:50.550+0800 I JOURNAL  [initandlisten] recover : no journal files present, no recovery needed</span><br><span class="line">2015-09-25T16:39:50.869+0800 I JOURNAL  [initandlisten] preallocateIsFaster=true 3.16</span><br><span class="line">2015-09-25T16:39:51.206+0800 I JOURNAL  [initandlisten] preallocateIsFaster=true 3.52</span><br><span class="line">2015-09-25T16:39:52.775+0800 I JOURNAL  [initandlisten] preallocateIsFaster=true 7.7</span><br></pre></td></tr></table></figure><h4 id="MongoDB后台管理-Shell"><a href="#MongoDB后台管理-Shell" class="headerlink" title="MongoDB后台管理 Shell"></a>MongoDB后台管理 Shell</h4><p>如果你需要进入MongoDB后台管理，你需要先打开mongodb装目录的下的bin目录，然后执行mongo命令文件。</p><p>MongoDB Shell是MongoDB自带的交互式Javascript shell,用来对MongoDB进行操作和管理的交互式环境。</p><p>当你进入mongoDB后台后，它默认会链接到 test 文档（数据库）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mongodb/bin</span><br><span class="line">$ ./mongo</span><br><span class="line">MongoDB shell version: 3.0.6</span><br><span class="line">connecting to: <span class="built_in">test</span></span><br><span class="line">Welcome to the MongoDB shell.</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>由于它是一个<code>JavaScript shell</code>，您可以运行一些简单的算术运算:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2+2</span><br><span class="line">4</span><br><span class="line">&gt; 3+6</span><br><span class="line">9</span><br></pre></td></tr></table></figure></p><p>现在让我们插入一些简单的数据，并对插入的数据进行检索：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.test.insert(&#123;x:10&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt; db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5604ff74a274a611b0c990aa&quot;), &quot;x&quot; : 10 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>第一个命令将数字 10 插入到 test 集合的 x 字段中。</p><h4 id="MongoDb-web-用户界面"><a href="#MongoDb-web-用户界面" class="headerlink" title="MongoDb web 用户界面"></a>MongoDb web 用户界面</h4><p>MongoDB 提供了简单的 HTTP 用户界面。 如果你想启用该功能，需要在启动的时候指定参数 <code>--rest</code> 。</p><p><em>注意：该功能只适用于 MongoDB 3.2 及之前的早期版本。</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./mongod --dbpath=/data/db --rest</span><br></pre></td></tr></table></figure><p><code>MongoDB</code> 的 <code>Web</code> 界面访问端口比服务的端口多<code>1000</code>。</p><p>如果你的<code>MongoDB</code>运行端口使用默认的<code>27017</code>，你可以在端口号为<code>28017</code>访问<code>web</code>用户界面，即地址为：<a href="http://localhost:28017" target="_blank" rel="noopener">http://localhost:28017</a>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/install/java/"/>
      <url>/blog/2019/06/12/Linux/centOS/install/java/</url>
      
        <content type="html"><![CDATA[<p>1、查看CentOS自带JDK是否已安装。</p><pre><code>yum list installed |grep java</code></pre><p>2、若有自带安装的JDK，如何卸载CentOS系统自带Java环境？</p><pre><code>卸载JDK相关文件输入：yum -y remove java-1.7.0-openjdk*。卸载tzdata-java输入：yum -y remove tzdata-java.noarch。</code></pre><p>  当结果显示为Complete！即卸载完毕。</p><p>注：<code>*</code>表示卸载掉java 1.7.0的所有openjdk相关文件。</p><p>3、检查CentOS系统网络连接是否正常。</p><blockquote><p>使用yum方式安装需要连接网络下载Java相应安装文件，故此需要使用ping命令测试网络；如：ping 百度URL即可。</p></blockquote><p>4、查看yum库中的Java安装包。</p><pre><code>输入：yum -y list java*</code></pre><p>5、使用yum安装Java环境。</p><pre><code>输入：yum -y install java-1.7.0-openjdk* ，以yum库中java-1.7.0为例。</code></pre><p>  当结果显示为Complete！即安装完毕。</p><p>注：<code>*</code>表示将java-1.7.0的所有相关Java程序都安装上。</p><p>6、查看刚安装的Java版本信息。</p><pre><code>输入：java -version 可查看Java版本；输入：javac 可查看Java的编译器命令用法（可略）</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/install/git/"/>
      <url>/blog/2019/06/12/Linux/centOS/install/git/</url>
      
        <content type="html"><![CDATA[<p> centos6.5 安装git</p><p>1、安装编译git时需要的包</p><pre><code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-develyum install  gcc perl-ExtUtils-MakeMaker</code></pre><p>2、删除已有的git</p><pre><code>yum remove git</code></pre><p>3、下载git源码，我自己下载的是2.5.6版本的下载地址：<a href="https://github.com/git/git/releases" target="_blank" rel="noopener">https://github.com/git/git/releases</a></p><pre><code>cd /usr/srcwget https://github.com/git/git/archive/v2.5.6.tar.gztar xzf v2.5.6.tar.gz</code></pre><p>4、编译安装</p><pre><code>cd git-2.5.6make prefix=/usr/local/git allmake prefix=/usr/local/git installecho &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; /etc/bashrcsource /etc/bashrc</code></pre><p>5、检查一下版本号</p><pre><code>git --version</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/install/docker/"/>
      <url>/blog/2019/06/12/Linux/centOS/install/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="centos7-5-安装docker"><a href="#centos7-5-安装docker" class="headerlink" title="centos7.5 安装docker"></a>centos7.5 安装docker</h1><blockquote><p>Docker支持以下的CentOS版本：</p></blockquote><ul><li>CentOS 7 (64-bit)</li><li>CentOS 6.5 (64-bit) 或更高的版本</li></ul><blockquote><p>目前，CentOS 仅发行版本中的内核支持 Docker。</p></blockquote><ul><li>Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。</li><li>Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。</li><li>通过 <code>uname -r</code> 命令查看你当前的内核版本 </li></ul><p>1、 移除旧的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><p>2、 安装一些必要的系统工具：</p><pre><code>sudo yum install -y yum-utils device-mapper-persistent-data lvm2</code></pre><p>3、 添加软件源信息：</p><pre><code>sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></pre><p>4、 更新 yum 缓存：</p><pre><code>sudo yum makecache fast</code></pre><p>5、 安装 Docker-ce：</p><blockquote><p>从 2017 年 3 月开始 docker 在原来的基础上分为两个分支版本: Docker CE 和 Docker EE。Docker CE 即社区免费版，Docker EE 即企业版，强调安全，但需付费使用。</p></blockquote><pre><code>sudo yum -y install docker-ce</code></pre><p>6、 启动 Docker 后台服务</p><pre><code>sudo systemctl start docker</code></pre><p>7、 测试运行 hello-world</p><blockquote><p>如果本地没有hello-world这个镜像，会自动下载一个hello-world的镜像，并在容器内运行。</p></blockquote><pre><code>docker run hello-world</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/docker/install/"/>
      <url>/blog/2019/06/12/Linux/centOS/docker/install/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-安装工具"><a href="#docker-安装工具" class="headerlink" title="docker 安装工具"></a>docker 安装工具</h1><ul><li><a href="./command.md">相关命令</a></li><li><a href="./install.md">安装使用（nginx，tomcat，mysql，oracle 11g）</a></li><li><a href="./container-usage.md">容器使用</a></li><li><a href="./image-usage.md">镜像使用</a></li><li><a href="./container-connection.md">容器链接</a></li></ul><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><blockquote><p>拉取 nginx 镜像</p></blockquote><pre><code>docker pull nginx</code></pre><blockquote><p>运行 nginx</p></blockquote><pre><code>docker run -d -p 3006:80 --name wechat-sell-nginx -v /home/dev/web/wechat-sell:/usr/share/nginx/html nginx</code></pre><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><blockquote><p>拉取 tomcat 镜像</p></blockquote><pre><code>docker pull tomcat</code></pre><blockquote><p>运行 tomcat 镜像</p></blockquote><pre><code>docker run -d -p 80:8080 --name sell-server -v /home/sell/webapps:/usr/local/tomcat/webapps/ tomcat  </code></pre><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><blockquote><p>1、 拉取 redis 镜像</p></blockquote><pre><code>docker pull redis</code></pre><blockquote><p>2、 运行 mysql</p></blockquote><pre><code>docker run -p 6379:6379 --name myRedis -v $PWD/data:/myRedis/data -v $PWD/conf/redis.conf:/myRedis/redis.conf -d redis redis-server --appendonly yes</code></pre><p>命令说明：</p><ul><li><strong>-p 6379:6379</strong> : 将容器的6379端口映射到主机的6379端口</li><li><strong>-v $PWD/data:/data</strong> : 将主机中当前目录下的data挂载到容器的/data</li><li><strong>redis-server –appendonly yes</strong> : 在容器执行redis-server启动命令，并打开redis持久化配置</li></ul><blockquote><p>3、 连接、查看容器</p></blockquote><pre><code>docker exec -it myRedis redis-cliinfo</code></pre><h3 id="mysql-8"><a href="#mysql-8" class="headerlink" title="mysql 8"></a>mysql 8</h3><blockquote><p>1、 拉取 mysql 镜像</p></blockquote><pre><code>docker pull mysql</code></pre><blockquote><p>2、 运行 mysql</p></blockquote><pre><code>docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=toor123 -d mysql</code></pre><ul><li><code>-e MYSQL_ROOT_PASSWORD=123456：初始化root用户的密码</code></li></ul><blockquote><p>3、 进入容器</p></blockquote><pre><code>docker exec -it mysql bash</code></pre><blockquote><p>4、 创建新用户(用户名：dev 密码 dev123!)</p></blockquote><pre><code>mysql -u root -pCREATE USER &apos;dev&apos;@&apos;%&apos; IDENTIFIED WITH mysql_native_password BY &apos;dev123!&apos;;</code></pre><blockquote><p>5、 给dev用户添加远程登录权限</p></blockquote><pre><code>GRANT ALL PRIVILEGES ON *.* TO &apos;dev&apos;@&apos;%&apos;;</code></pre><h3 id="oracle-11g-原文"><a href="#oracle-11g-原文" class="headerlink" title="oracle 11g 原文"></a>oracle 11g <a href="https://blog.csdn.net/qq_38380025/article/details/80647620" target="_blank" rel="noopener">原文</a></h3><blockquote><p>1、 拉取 oracle 11g 镜像（6.8G）</p></blockquote><pre><code>docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</code></pre><blockquote><p>2、 创建容器 </p></blockquote><pre><code>docker run -d -p 1521:1521 --name oracle11g registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</code></pre><p><em>如果创建成功能会返回容器id</em></p><blockquote><p>3、 运行容器 </p></blockquote><pre><code>docker start oracle11g</code></pre><blockquote><p>4、 进入镜像进行配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 进入 oracle11g bash</span></span><br><span class="line">docker <span class="built_in">exec</span> -it oracle11g bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行软连接(新版的镜像没有这个命令，用不了。没关系，继续下一步)</span></span><br><span class="line">sqlplus /nolog </span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到root 用户下 （密码：helowin）</span></span><br><span class="line">su root </span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 profile 文件配置 ORACLE 环境变量</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2</span><br><span class="line"><span class="built_in">export</span> ORACLE_SID=helowin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ORACLE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建软连接</span></span><br><span class="line">ln -s <span class="variable">$ORACLE_HOME</span>/bin/sqlplus /usr/bin </span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 oracle 用户</span></span><br><span class="line">su - oracle</span><br></pre></td></tr></table></figure><blockquote><p>5、 登录sqlplus并修改sys、system用户密码</p></blockquote><pre><code># 登录sqlplus /nolog# 连接conn /as sysdba</code></pre><p><img src="/blog/.io//imgs/docker-install-oracle11g.png" alt></p><pre><code>创建用户 systemalter user system identified by system;创建用户 sysalter user sys identified by sys;也可以创建用户  create user test identified by test;并给 test 用户赋予权限grant connect,resource,dba to test;</code></pre><p><strong>注意了</strong>当执行修改密码的时候出现： <code>database not open</code>  提示数据库没有打开，不急按如下操作</p><pre><code>alter database open;</code></pre><p><img src="/blog/.io//imgs/docker-install-oracle11g-1.png" alt></p><p><strong>注意了</strong>这里也许还会提示：<code>ORA-01507: database not mounted</code></p><blockquote><p>解决方法</p></blockquote><pre><code>database mount;alter database open;</code></pre><p><img src="/blog/.io//imgs/docker-install-oracle11g-2.png" alt></p><blockquote><p>然后就可执行 修改数据库密码的命令了</p></blockquote><pre><code>改完之后输入：ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;</code></pre><p><img src="/blog/.io//imgs/docker-install-oracle11g-3.png" alt></p><blockquote><p>6、使用  进行连接</p></blockquote><p>打开 <strong>navcat 或者 pl/sql</strong> 进行登录： <strong>提示 <code>ORA-12514: TNS: 监听程序当前无法识别连接描述符中请求的服务</code></strong></p><p>这时我们需要去看一下 oracle 的 <code>lsnrctl</code> 服务</p><p><img src="/blog/.io//imgs/docker-install-oracle11g-4.png" alt></p><p>看到这两个了么，任选其一，修改 <code>tnsnames.ora</code> 的 <code>service_name=helowinXDB</code></p><p><strong>之前我们把端口映射到了1521上，所以我们需要进行配置 tnsnames.ora</strong></p><pre><code>tnsnames.ora 文件地址是 /home/oracle/app/oracle/product/11.2.0/dbhome_2/network/admin/tnsnames.ora</code></pre><p>将原始 tnsnames.ora：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker_oracle11 =</span><br><span class="line"> (DESCRIPTION =</span><br><span class="line">   (ADDRESS_LIST =</span><br><span class="line">     (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT =1521))</span><br><span class="line">   )</span><br><span class="line">   (CONNECT_DATA =</span><br><span class="line">     (SERVICE_NAME = orcl)</span><br><span class="line">   )</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>tnsnames.ora 改为 如下 ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker_oracle11 =</span><br><span class="line"> (DESCRIPTION =</span><br><span class="line">   (ADDRESS_LIST =</span><br><span class="line">     (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.211.135)(PORT =1521))</span><br><span class="line">   )</span><br><span class="line">   (CONNECT_DATA =</span><br><span class="line">     (SERVICE_NAME = helowinXDB)</span><br><span class="line">   )</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/docker/image-usage/"/>
      <url>/blog/2019/06/12/Linux/centOS/docker/image-usage/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-镜像使用"><a href="#docker-镜像使用" class="headerlink" title="docker 镜像使用"></a>docker 镜像使用</h1><ul><li><a href="./command.md">相关命令</a></li><li><a href="./install.md">安装使用（nginx，tomcat，mysql，oracle 11g）</a></li><li><a href="./container-usage.md">容器使用</a></li><li><a href="./image-usage.md">镜像使用</a></li><li><a href="./container-connection.md">容器链接</a></li></ul><h3 id="Docker-镜像使用"><a href="#Docker-镜像使用" class="headerlink" title="Docker 镜像使用"></a>Docker 镜像使用</h3><p>当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。</p><blockquote><p>主要学习点：</p></blockquote><pre><code>1、管理和使用本地 Docker 主机镜像2、创建镜像</code></pre><p>列出镜像列表</p><p>我们可以使用 <code>docker images</code> 来列出本地主机上的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">~$ docker images           </span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              14.04               90d5884b1ee0        5 days ago          188 MB</span><br><span class="line">php                 5.6                 f40e9e0f10c8        9 days ago          444.8 MB</span><br><span class="line">nginx               latest              6f8d099c3adc        12 days ago         182.7 MB</span><br><span class="line">mysql               5.6                 f2e8d6c772c0        3 weeks ago         324.6 MB</span><br><span class="line">httpd               latest              02ef73cf1bc0        3 weeks ago         194.4 MB</span><br><span class="line">ubuntu              15.10               4e3b13c8a266        4 weeks ago         136.3 MB</span><br><span class="line">hello-world         latest              690ed74de00f        6 months ago        960 B</span><br><span class="line">training/webapp     latest              6fae60ef3446        11 months ago       348.8 MB</span><br></pre></td></tr></table></figure><p>各个选项说明:</p><ul><li><strong>REPOSITORY</strong> ：表示镜像的仓库源</li><li><strong>TAG</strong> ：镜像的标签</li><li><strong>IMAGE ID</strong> ：镜像ID</li><li><strong>CREATED</strong> ：镜像创建时间</li><li><strong>SIZE</strong> ：镜像大小</li></ul><p>同一仓库源可以有多个 <code>TAG</code> ，代表这个仓库源的不同个版本，如ubuntu仓库源里，有 <code>15.10、14.04</code> 等多个不同的版本，我们使用 <code>REPOSITORY:TAG</code><br> 来定义不同的镜像。</p><blockquote><p>如果要使用版本为15.10的ubuntu系统镜像来运行容器时，命令如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ docker run -t -i ubuntu:15.10 /bin/bash </span><br><span class="line">root@d77ccb2e5cca:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><blockquote><p>如果要使用版本为14.04的ubuntu系统镜像来运行容器时，命令如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ docker run -t -i ubuntu:14.04 /bin/bash </span><br><span class="line">root@39e968165990:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>如果不指定一个镜像的版本标签，例如只使用 <code>ubuntu，docker</code> 将默认使用 <code>ubuntu:latest</code> 镜像。</p><h5 id="获取一个新的镜像"><a href="#获取一个新的镜像" class="headerlink" title="获取一个新的镜像"></a>获取一个新的镜像</h5><blockquote><p>当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~$ docker pull ubuntu:13.10</span><br><span class="line">13.10: Pulling from library/ubuntu</span><br><span class="line">6599cadaf950: Pull complete </span><br><span class="line">23eda618d451: Pull complete </span><br><span class="line">f0be3084efe9: Pull complete </span><br><span class="line">52de432f084b: Pull complete </span><br><span class="line">a3ed95caeb02: Pull complete </span><br><span class="line">Digest: sha256:15b79a6654811c8d992ebacdfbd5152fcf3d165e374e264076aa435214a947a3</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> ubuntu:13.10</span><br></pre></td></tr></table></figure><p>下载完成后，我们可以直接使用这个镜像来运行容器。</p><h5 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h5><blockquote><p>Docker Hub 网址为： <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p></blockquote><p>可以使用 <code>docker search</code> 命令来搜索镜像。比如我们需要一个 <code>httpd</code> 的镜像来作为我们的 web 服务。我们可以通过 <code>docker search</code> 命令搜索 httpd 来寻找适合我们的镜像。</p><pre><code>~$  docker search httpd</code></pre><ul><li><strong>NAME</strong> :镜像仓库源的名称</li><li><strong>DESCRIPTION</strong> :镜像的描述</li><li><strong>OFFICIAL</strong> :是否docker官方发布</li></ul><h5 id="拖取镜像"><a href="#拖取镜像" class="headerlink" title="拖取镜像"></a>拖取镜像</h5><blockquote><p>使用命令 docker pull 来下载镜像。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~$ docker pull httpd</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/httpd</span><br><span class="line">8b87079b7a06: Pulling fs layer </span><br><span class="line">a3ed95caeb02: Download complete </span><br><span class="line">0d62ec9c6a76: Download complete </span><br><span class="line">a329d50397b9: Download complete </span><br><span class="line">ea7c1f032b5c: Waiting </span><br><span class="line">be44112b72c7: Waiting</span><br></pre></td></tr></table></figure><p>下载完成后，就可以使用这个镜像了。</p><pre><code>~$ docker run httpd</code></pre><h5 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h5><p>从docker镜像仓库中下载的镜像不能满足需求时，可以通过以下两种方式对镜像进行更改。</p><ol><li>从已经创建的容器中更新镜像，并且提交这个镜像</li><li>使用 Dockerfile 指令来创建一个新的镜像</li></ol><h5 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h5><blockquote><p>更新镜像之前，需要使用镜像来创建一个容器。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ docker run -t -i ubuntu:15.10 /bin/bash</span><br><span class="line">root@e218edb10161:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>在运行的容器内使用 <code>apt-get update</code> 命令进行更新。</p><p>在完成操作之后，输入 <code>exit</code> 命令来退出这个容器。</p><p>此时ID为e218edb10161的容器，根据更改的容器。通过命令 <code>docker commit</code> 来提交容器副本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ docker commit -m=<span class="string">"has update"</span> -a=<span class="string">"firstDocker"</span> e218edb10161 firstDocker/ubuntu:v2</span><br><span class="line">sha256:70bf1840fd7c0d2d8ef0a42a817eb29f854c1af8f7c59fc03ac7bdee9545aff8</span><br></pre></td></tr></table></figure><p>各个参数说明：</p><ul><li><strong>-m</strong> :提交的描述信息</li><li><strong>-a</strong> :指定镜像作者</li><li><strong>e218edb10161</strong> : 容器ID</li><li><strong>firstDocker/ubuntu:v2</strong> :指定要创建的目标镜像名</li></ul><p>我们可以使用 docker images 命令来查看我们的新镜像 <code>firstDocker/ubuntu:v2</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">firstDocker/ubuntu       v2                  70bf1840fd7c        15 seconds ago      158.5 MB</span><br><span class="line">ubuntu              14.04               90d5884b1ee0        5 days ago          188 MB</span><br><span class="line">php                 5.6                 f40e9e0f10c8        9 days ago          444.8 MB</span><br><span class="line">nginx               latest              6f8d099c3adc        12 days ago         182.7 MB</span><br><span class="line">mysql               5.6                 f2e8d6c772c0        3 weeks ago         324.6 MB</span><br><span class="line">httpd               latest              02ef73cf1bc0        3 weeks ago         194.4 MB</span><br><span class="line">ubuntu              15.10               4e3b13c8a266        4 weeks ago         136.3 MB</span><br><span class="line">hello-world         latest              690ed74de00f        6 months ago        960 B</span><br><span class="line">training/webapp     latest              6fae60ef3446        12 months ago       348.8 MB</span><br></pre></td></tr></table></figure><p>使用新镜像 <code>firstDocker/ubuntu</code> 来启动一个容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ docker run -t -i firstDocker/ubuntu:v2 /bin/bash                            </span><br><span class="line">root@1a9fbdeb5da3:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><h5 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h5><p>使用命令 <code>docker build</code> ， 从零开始来创建一个新的镜像。需要创建一个 <strong>Dockerfile</strong> 文件，其中包含一组指令来告诉 Docker 如何构建镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">~$ cat Dockerfile </span><br><span class="line">FROM    centos:6.7</span><br><span class="line">MAINTAINER      Fisher <span class="string">"fisher@sudops.com"</span></span><br><span class="line">RUN     /bin/<span class="built_in">echo</span> <span class="string">'root:123456'</span> |chpasswd</span><br><span class="line">RUN     useradd firstDocker</span><br><span class="line">RUN     /bin/<span class="built_in">echo</span> <span class="string">'firstDocker:123456'</span> |chpasswd</span><br><span class="line">RUN     /bin/<span class="built_in">echo</span> -e <span class="string">"LANG=\"en_US.UTF-8\""</span> &gt;/etc/default/<span class="built_in">local</span></span><br><span class="line">EXPOSE  22</span><br><span class="line">EXPOSE  80</span><br><span class="line">CMD     /usr/sbin/sshd -D</span><br></pre></td></tr></table></figure><p><em>每一个指令都会在镜像上创建一个新的层，每一个指令的前缀都必须是大写的。</em><br><em>第一条FROM，指定使用哪个镜像源</em><br><em>RUN 指令告诉docker 在镜像内执行命令，安装了什么。。。</em><br><em>然后，使用 Dockerfile 文件，通过 docker build 命令来构建一个镜像。</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">~$ docker build -t firstDocker/centos:6.7 .</span><br><span class="line">Sending build context to Docker daemon 17.92 kB</span><br><span class="line">Step 1 : FROM centos:6.7</span><br><span class="line"> ---&amp;gt; d95b5ca17cc3</span><br><span class="line">Step 2 : MAINTAINER Fisher <span class="string">"fisher@sudops.com"</span></span><br><span class="line"> ---&amp;gt; Using cache</span><br><span class="line"> ---&amp;gt; 0c92299c6f03</span><br><span class="line">Step 3 : RUN /bin/<span class="built_in">echo</span> <span class="string">'root:123456'</span> |chpasswd</span><br><span class="line"> ---&amp;gt; Using cache</span><br><span class="line"> ---&amp;gt; 0397ce2fbd0a</span><br><span class="line">Step 4 : RUN useradd firstDocker</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>-t</strong> ：指定要创建的目标镜像名</li><li><strong>.</strong> ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径</li></ul><p>使用 <code>docker images</code> 查看创建的镜像已经在列表中存在,镜像ID为 <code>860c279d2fec</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">~$ docker images </span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE</span><br><span class="line">firstDocker/centos       6.7                 860c279d2fec        About a minute ago   190.6 MB</span><br><span class="line">firstDocker/ubuntu       v2                  70bf1840fd7c        17 hours ago         158.5 MB</span><br><span class="line">ubuntu              14.04               90d5884b1ee0        6 days ago           188 MB</span><br><span class="line">php                 5.6                 f40e9e0f10c8        10 days ago          444.8 MB</span><br><span class="line">nginx               latest              6f8d099c3adc        12 days ago          182.7 MB</span><br><span class="line">mysql               5.6                 f2e8d6c772c0        3 weeks ago          324.6 MB</span><br><span class="line">httpd               latest              02ef73cf1bc0        3 weeks ago          194.4 MB</span><br><span class="line">ubuntu              15.10               4e3b13c8a266        5 weeks ago          136.3 MB</span><br><span class="line">hello-world         latest              690ed74de00f        6 months ago         960 B</span><br><span class="line">centos              6.7                 d95b5ca17cc3        6 months ago         190.6 MB</span><br><span class="line">training/webapp     latest              6fae60ef3446        12 months ago        348.8 MB</span><br></pre></td></tr></table></figure><p>使用新的镜像来创建容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~$ docker run -t -i firstDocker/centos:6.7  /bin/bash</span><br><span class="line">[root@41c28d18b5fb /]<span class="comment"># id firstDocker</span></span><br><span class="line">uid=500(firstDocker) gid=500(firstDocker) groups=500(firstDocker)</span><br></pre></td></tr></table></figure><h5 id="设置镜像标签"><a href="#设置镜像标签" class="headerlink" title="设置镜像标签"></a>设置镜像标签</h5><p>使用 <code>docker tag</code> 命令，为镜像添加一个新的标签。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$ docker tag 860c279d2fec firstDocker/centos:dev</span><br></pre></td></tr></table></figure><p><code>docker tag</code> 镜像ID，这里是 <code>860c279d2fec</code> ,用户名称、镜像源名(repository name)和新的标签名(tag)。</p><p>使用 <code>docker images</code> 命令可以看到，ID为860c279d2fec的镜像多一个标签。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">~$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">firstDocker/centos       6.7                 860c279d2fec        5 hours ago         190.6 MB</span><br><span class="line">firstDocker/centos       dev                 860c279d2fec        5 hours ago         190.6 MB</span><br><span class="line">firstDocker/ubuntu       v2                  70bf1840fd7c        22 hours ago        158.5 MB</span><br><span class="line">ubuntu              14.04               90d5884b1ee0        6 days ago          188 MB</span><br><span class="line">php                 5.6                 f40e9e0f10c8        10 days ago         444.8 MB</span><br><span class="line">nginx               latest              6f8d099c3adc        13 days ago         182.7 MB</span><br><span class="line">mysql               5.6                 f2e8d6c772c0        3 weeks ago         324.6 MB</span><br><span class="line">httpd               latest              02ef73cf1bc0        3 weeks ago         194.4 MB</span><br><span class="line">ubuntu              15.10               4e3b13c8a266        5 weeks ago         136.3 MB</span><br><span class="line">hello-world         latest              690ed74de00f        6 months ago        960 B</span><br><span class="line">centos              6.7                 d95b5ca17cc3        6 months ago        190.6 MB</span><br><span class="line">training/webapp     latest              6fae60ef3446        12 months ago       348.8 MB</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/docker/container-usage/"/>
      <url>/blog/2019/06/12/Linux/centOS/docker/container-usage/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-容器使用"><a href="#docker-容器使用" class="headerlink" title="docker 容器使用"></a>docker 容器使用</h1><ul><li><a href="./command.md">相关命令</a></li><li><a href="./install.md">安装使用（nginx，tomcat，mysql，oracle 11g）</a></li><li><a href="./container-usage.md">容器使用</a></li><li><a href="./image-usage.md">镜像使用</a></li><li><a href="./container-connection.md">容器链接</a></li></ul><h3 id="Docker-容器使用"><a href="#Docker-容器使用" class="headerlink" title="Docker 容器使用"></a>Docker 容器使用</h3><h5 id="运行一个web应用"><a href="#运行一个web应用" class="headerlink" title="运行一个web应用"></a>运行一个web应用</h5><blockquote><p>docker容器中运行一个 Python Flask 应用来运行一个web应用。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~<span class="comment"># docker pull training/webapp  # 载入镜像</span></span><br><span class="line">~<span class="comment"># docker run -d -P training/webapp python app.py</span></span><br></pre></td></tr></table></figure><p>参数说明:</p><ul><li><p><strong>-d</strong> :让容器在后台运行。</p></li><li><p><strong>-P</strong> :将容器内部使用的网络端口映射到我们使用的主机上。</p></li></ul><h5 id="查看-WEB-应用容器"><a href="#查看-WEB-应用容器" class="headerlink" title="查看 WEB 应用容器"></a>查看 WEB 应用容器</h5><blockquote><p>使用 docker ps 来查看我们正在运行的容器：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~<span class="comment">#  docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             ...        PORTS                 </span><br><span class="line">d3d5e39ed9d3        training/webapp     <span class="string">"python app.py"</span>     ...        0.0.0.0:32769-&gt;5000/tcp</span><br></pre></td></tr></table></figure><p>Docker 开放了 5000 端口（默认 Python Flask 端口）映射到主机端口 32769 上。<br>最后，可以通过浏览器访问WEB应用</p><p>也可以通过 <code>-p</code> 参数来设置不一样的端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~$ docker run -d -p 5000:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure><blockquote><p><code>docker ps</code>查看正在运行的容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~<span class="comment">#  docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE                             PORTS                     NAMES</span><br><span class="line">bcd87f08bf29        training/webapp     ...        0.0.0.0:5000-&gt;5000/tcp    wizardly_chandrasekhar</span><br><span class="line">d3d5e39ed9d3        training/webapp     ...        0.0.0.0:32769-&gt;5000/tcp   xenodochial_hoov</span><br></pre></td></tr></table></figure><p>容器内部的 5000 端口映射到我们本地主机的 5000 端口上。</p><h5 id="网络端口的快捷方式"><a href="#网络端口的快捷方式" class="headerlink" title="网络端口的快捷方式"></a>网络端口的快捷方式</h5><p>通过 <code>docker ps</code> 命令可以查看到容器的端口映射，docker 还提供了另一个快捷方式 <code>docker port</code>，使用 <code>docker port</code> 可以查看指定 （ID 或者名字）容器的某个确定端口映射到宿主机的端口号。</p><p>上面创建的 web 应用容器 ID 为 bcd87f08bf29 名字为 wizardly_chandrasekhar。</p><p>使用 <code>docker port bcd87f08bf29</code> 或 <code>docker port wizardly_chandrasekhar</code> 来查看容器端口的映射情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~$ docker port bcd87f08bf29</span><br><span class="line">5000/tcp -&gt; 0.0.0.0:5000</span><br><span class="line"></span><br><span class="line">~$ docker port wizardly_chandrasekhar</span><br><span class="line">5000/tcp -&gt; 0.0.0.0:5000</span><br></pre></td></tr></table></figure><h5 id="查看-WEB-应用程序日志"><a href="#查看-WEB-应用程序日志" class="headerlink" title="查看 WEB 应用程序日志"></a>查看 WEB 应用程序日志</h5><blockquote><p><code>docker logs [ID或者名字]</code>可以查看容器内部的标准输出。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~$ docker logs -f bcd87f08bf29</span><br><span class="line"> * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)</span><br><span class="line">192.168.239.1 - - [09/May/2016 16:30:37] <span class="string">"GET / HTTP/1.1"</span> 200 -</span><br><span class="line">192.168.239.1 - - [09/May/2016 16:30:37] <span class="string">"GET /favicon.ico HTTP/1.1"</span> 404 -</span><br><span class="line"></span><br><span class="line">-f: 让 docker logs 像使用 tail -f 一样来输出容器内部的标准输出。</span><br></pre></td></tr></table></figure><p>从上面，我们可以看到应用程序使用的是 5000 端口并且能够查看到应用程序的访问日志。</p><h5 id="查看WEB应用程序容器的进程"><a href="#查看WEB应用程序容器的进程" class="headerlink" title="查看WEB应用程序容器的进程"></a>查看WEB应用程序容器的进程</h5><blockquote><p><code>docker top</code> 来查看容器内部运行的进程</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~$ docker top wizardly_chandrasekhar</span><br><span class="line">UID     PID         PPID          ...       TIME                CMD</span><br><span class="line">root    23245       23228         ...       00:00:00            python app.py</span><br></pre></td></tr></table></figure><p>使用 <code>docker inspect</code> 来查看 Docker 的底层信息。它会返回一个 JSON 文件记录着 Docker 容器的配置和状态信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">~$ docker inspect wizardly_chandrasekhar</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"bcd87f08bf297b5964943134aa6d373e355c286db9b9885b1f60b6e8f82b2b85"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2018-09-17T01:41:26.174228707Z"</span>,</span><br><span class="line">        <span class="string">"Path"</span>: <span class="string">"python"</span>,</span><br><span class="line">        <span class="string">"Args"</span>: [</span><br><span class="line">            <span class="string">"app.py"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"State"</span>: &#123;</span><br><span class="line">            <span class="string">"Status"</span>: <span class="string">"running"</span>,</span><br><span class="line">            <span class="string">"Running"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"Paused"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Restarting"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"OOMKilled"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Dead"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Pid"</span>: 23245,</span><br><span class="line">            <span class="string">"ExitCode"</span>: 0,</span><br><span class="line">            <span class="string">"Error"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"StartedAt"</span>: <span class="string">"2018-09-17T01:41:26.494185806Z"</span>,</span><br><span class="line">            <span class="string">"FinishedAt"</span>: <span class="string">"0001-01-01T00:00:00Z"</span></span><br><span class="line">        &#125;,</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h5 id="停止-WEB-应用容器"><a href="#停止-WEB-应用容器" class="headerlink" title="停止 WEB 应用容器"></a>停止 WEB 应用容器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ docker stop wizardly_chandrasekhar   </span><br><span class="line">wizardly_chandrasekhar</span><br></pre></td></tr></table></figure><h5 id="重启WEB应用容器"><a href="#重启WEB应用容器" class="headerlink" title="重启WEB应用容器"></a>重启WEB应用容器</h5><blockquote><p>已经停止的容器，我们可以使用命令 <code>docker start</code> 来启动。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ docker start wizardly_chandrasekhar</span><br><span class="line">wizardly_chandrasekhar</span><br></pre></td></tr></table></figure><blockquote><p>docker ps -l 查询最后一次创建的容器：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker ps -l </span></span><br><span class="line">CONTAINER ID        IMAGE                             PORTS                     NAMES</span><br><span class="line">bcd87f08bf29        training/webapp     ...        0.0.0.0:5000-&gt;5000/tcp    wizardly_chandrasekhar</span><br></pre></td></tr></table></figure><p>正在运行的容器，我们可以使用 <code>docker restart</code> 命令来重启</p><h5 id="移除WEB应用容器"><a href="#移除WEB应用容器" class="headerlink" title="移除WEB应用容器"></a>移除WEB应用容器</h5><blockquote><p>我们可以使用 <code>docker rm</code> 命令来删除不需要的容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ docker rm wizardly_chandrasekhar  </span><br><span class="line">wizardly_chandrasekhar</span><br></pre></td></tr></table></figure><p>删除容器时，容器必须是停止状态，否则会报如下错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ docker rm wizardly_chandrasekhar</span><br><span class="line">Error response from daemon: You cannot remove a running container bcd87f08bf297b5964943134aa6d373e355c286db9b9885b1f60b6e8f82b2b85. Stop the container before attempting removal or force remove</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/README/"/>
      <url>/blog/2019/06/12/Linux/centOS/README/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="http://vault.centos.org/" target="_blank" rel="noopener">centOS下载地址</a></li><li><a href="dir.md">centOS目录结构</a></li></ul><table><thead><tr><th>软件</th><th>安装</th><th>配置</th><th>使用方法</th></tr></thead><tbody><tr><td>zsh</td><td><a href="./install/zsh.md">安装</a></td><td>/</td><td>/</td></tr><tr><td>git</td><td><a href="./install/git.md">安装</a></td><td>/</td><td>/</td></tr><tr><td>nginx</td><td><a href="./nginx/install.md">安装</a></td><td><a href="./nginx/config.md">配置</a></td><td><a href="./nginx">用法</a></td></tr><tr><td>yum</td><td>/</td><td>/</td><td><a href="./yum">用法</a></td></tr><tr><td>scp</td><td>/</td><td>/</td><td><a href="./scp">用法</a></td></tr><tr><td>MySQl</td><td><a href="./install/MySQl.md">安装</a></td><td>/</td><td>/</td></tr><tr><td>MongoDB</td><td><a href="./install/MongoDB.md">安装</a></td><td>/</td><td>/</td></tr><tr><td>nodejs</td><td><a href="./install/nodejs.md">安装</a></td><td>/</td><td>/</td></tr><tr><td>python</td><td><a href="./install/python.md">安装</a></td><td>/</td><td>/</td></tr><tr><td>java</td><td><a href="./install/java.md">安装</a></td><td>/</td><td>/</td></tr><tr><td>docker</td><td><a href="./install/docker.md">安装</a></td><td>/</td><td><a href="./docker">用法</a></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/dir/"/>
      <url>/blog/2019/06/12/Linux/centOS/dir/</url>
      
        <content type="html"><![CDATA[<h1 id="centOS目录结构"><a href="#centOS目录结构" class="headerlink" title="centOS目录结构"></a>centOS目录结构</h1><blockquote><p>CentOS的目录大体上可分为四类：管理类、用户类、应用程序类、信息类文件目录。</p></blockquote><p>管理类目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/boot <span class="comment"># linux 的内核及引导系统程序所需要的文件目录</span></span><br><span class="line">/bin <span class="comment"># 存放标准 linux 的工具，在终端里输入ls，系统就系统将会到该目录查看是否存在该命令程序。</span></span><br><span class="line">/sbin <span class="comment"># 大多是涉及系统管理的命令的存放，是超级权限用户root的可执行命令存放地，普通用户无权限执行这个目录下的命令</span></span><br><span class="line">/var <span class="comment"># 这个目录的内容是经常变动的，用来存储经常被修改的文件，如日志、数据文件、邮箱等</span></span><br><span class="line">/etc <span class="comment"># 主要存放系统配置方面的文件</span></span><br><span class="line">/dev <span class="comment"># 主要存放与设备有关的文件</span></span><br><span class="line">/mnt <span class="comment"># 这个目录一般是用于存放挂载储存设备的挂载目录的，比如有cdrom 等目录。可以参看/etc/fstab的定义</span></span><br></pre></td></tr></table></figure><p>用户类目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/root <span class="comment"># 系统管理员目录</span></span><br><span class="line">/home <span class="comment"># 主要存放个人数据</span></span><br></pre></td></tr></table></figure><p>应用程序类目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/lib <span class="comment"># 该目录用来存放系统动态链接共享库，几乎所有的应用程序都会用到该目录下的共享库</span></span><br><span class="line">/tmp <span class="comment"># 临时目录，有些linux会定期清理</span></span><br><span class="line">/usr <span class="comment"># 存放一些不适合放在/bin 或 /etc 目录下的额外工具，如个人安装的程序或工具</span></span><br><span class="line">       /usr/<span class="built_in">local</span>    <span class="comment"># 主要存放那些手动安装的软件，</span></span><br><span class="line">       /usr/bin      <span class="comment"># 用于存放程序</span></span><br><span class="line">       /usr/share    <span class="comment"># 用于存放一些共享数据</span></span><br><span class="line">       /usr/lib      <span class="comment"># 存放一些不能不能直接运行，但却是许多程序运行所必需的一些函数库文件</span></span><br><span class="line">/opt <span class="comment"># 主要存放可选程序，直接删除程序不影响系统其设置。安装到/opt目录下的程序，它所有的数据、库文件等等都是放在同个目录下面</span></span><br></pre></td></tr></table></figure><p>信息类目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/lost+found <span class="comment"># 在ext2或ext3文件系统中，当系统意外崩溃或机器意外关机，而产生一些文件碎片放在这里。但当突然停电、或者非正常关机后，有些文件就临时存放在这里。</span></span><br><span class="line">/proc <span class="comment"># 操作系统运行时，进程信息及内核信息（比如cpu、硬盘分区、内存信息等）存放在这里</span></span><br></pre></td></tr></table></figure><p>其他重要目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/etc/rc.d          <span class="comment"># 放置开机和关机的脚本。</span></span><br><span class="line">/etc/rc.d/init.d   <span class="comment"># 放置启动脚本</span></span><br><span class="line">/etc/xinetd.d      <span class="comment"># 配置xinetd.conf可以配置启动其他额外服务。</span></span><br><span class="line">/usr/include       <span class="comment"># 一些distribution套件的头文件放置目录，安装程序时可能会用到。</span></span><br><span class="line">/usr/lib           <span class="comment"># 套件的程序库</span></span><br><span class="line">/usr/<span class="built_in">local</span>         <span class="comment"># 默认的软件安装目录。</span></span><br><span class="line">/usr/share/doc     <span class="comment"># 系统说明文件的放置目录</span></span><br><span class="line">/usr/share/man     <span class="comment"># 程序说明文件放置目录</span></span><br><span class="line">/usr/src           <span class="comment"># 内核源代码目录</span></span><br><span class="line">/usr/X11R6         <span class="comment"># X的存放目录</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/docker/README/"/>
      <url>/blog/2019/06/12/Linux/centOS/docker/README/</url>
      
        <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a><a href="./command.md">相关命令</a></h2><h2 id="安装使用（nginx，tomcat，mysql，oracle-11g）"><a href="#安装使用（nginx，tomcat，mysql，oracle-11g）" class="headerlink" title="安装使用（nginx，tomcat，mysql，oracle 11g）"></a><a href="./install.md">安装使用（nginx，tomcat，mysql，oracle 11g）</a></h2><h2 id="容器使用"><a href="#容器使用" class="headerlink" title="容器使用"></a><a href="./container-usage.md">容器使用</a></h2><h2 id="镜像使用"><a href="#镜像使用" class="headerlink" title="镜像使用"></a><a href="./image-usage.md">镜像使用</a></h2><h2 id="容器链接"><a href="#容器链接" class="headerlink" title="容器链接"></a><a href="./container-connection.md">容器链接</a></h2><h3 id="hello-word"><a href="#hello-word" class="headerlink" title="hello word"></a>hello word</h3><blockquote><p>使用 <code>docker</code> 在 <code>ubuntu:15.10</code> 下输出 <code>&quot;Hello world&quot;</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ docker run ubuntu:15.10 /bin/<span class="built_in">echo</span> <span class="string">"Hello world"</span></span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure><p>参数解析：</p><ul><li><strong>docker</strong> : Docker 的二进制执行文件。</li><li><strong>run</strong> :与前面的 docker 组合来运行一个容器。</li><li><strong>ubuntu:15.10</strong> 指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。</li><li><strong>/bin/echo “Hello world”</strong> : 在启动的容器里执行的命令</li></ul><p><em>以上命令完整的意思可以解释为： Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 <code>bin/echo &quot;Hello world&quot;</code>，然后输出结果。</em></p><h5 id="运行交互式的容器"><a href="#运行交互式的容器" class="headerlink" title="运行交互式的容器"></a>运行交互式的容器</h5><blockquote><p>通过docker的两个参数 <code>-i -t</code>，让docker运行的容器实现 “对话” 的能力</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ docker run -i -t ubuntu:15.10 /bin/bash</span><br><span class="line">root@dc0050c7942:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>各个参数解析：</p><ul><li><p><strong>-t</strong> :在新容器内指定一个伪终端或终端。</p></li><li><p><strong>-i</strong> :允许你对容器内的标准输入 (STDIN) 进行交互。</p></li></ul><p><em>此时我们已进入一个 ubuntu15.10系统的容器<br>我们尝试在容器中运行命令 <code>cat /proc/version</code> 和ls分别查看当前系统的版本信息和当前目录下的文件列表<br>我们可以通过运行 <code>exit</code> 命令或者使用 <code>CTRL+D</code> 来退出容器。</em></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/docker/container-connection/"/>
      <url>/blog/2019/06/12/Linux/centOS/docker/container-connection/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-容器连接"><a href="#docker-容器连接" class="headerlink" title="docker 容器连接"></a>docker 容器连接</h1><ul><li><a href="./command.md">相关命令</a></li><li><a href="./install.md">安装使用（nginx，tomcat，mysql，oracle 11g）</a></li><li><a href="./container-usage.md">容器使用</a></li><li><a href="./image-usage.md">镜像使用</a></li><li><a href="./container-connection.md">容器链接</a></li></ul><h3 id="Docker-容器连接"><a href="#Docker-容器连接" class="headerlink" title="Docker 容器连接"></a>Docker 容器连接</h3><blockquote><p>实现通过端口连接到一个 docker 容器</p></blockquote><h5 id="网络端口映射"><a href="#网络端口映射" class="headerlink" title="网络端口映射"></a>网络端口映射</h5><blockquote><p>创建了一个 python 应用的容器。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ docker run -d -P training/webapp python app.py</span><br><span class="line">fce072cc88cee71b1cdceb57c2821d054a4a59f67da6b416fceb5593f059fc6d</span><br></pre></td></tr></table></figure><blockquote><p>指定容器绑定的网络地址，比如绑定 127.0.0.1。</p></blockquote><p>使用 <code>-P</code> 参数创建一个容器，使用 <code>docker ps</code> 来看到端口 <code>5000</code> 绑定主机端口 <code>32768</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">fce072cc88ce        training/webapp     <span class="string">"python app.py"</span>     4 minutes ago       Up 4 minutes        0.0.0.0:32768-&gt;5000/tcp   grave_hopper</span><br></pre></td></tr></table></figure><p>使用 <code>-p</code> 标识来指定容器端口绑定到主机端口。</p><p>两种方式的区别是:</p><ul><li><strong>-P</strong> :是容器内部端口随机映射到主机的高端口。</li><li><strong>-p</strong> : 是容器内部端口绑定到指定的主机端口。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~$ docker run -d -p 5000:5000 training/webapp python app.py</span><br><span class="line">33e4523d30aaf0258915c368e66e03b49535de0ef20317d3f639d40222ba6bc0</span><br><span class="line"></span><br><span class="line">~$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS                     NAMES</span><br><span class="line">33e4523d30aa        training/webapp     <span class="string">"python app.py"</span>     About a minute ago   Up About a minute   0.0.0.0:5000-&gt;5000/tcp    berserk_bartik</span><br><span class="line">fce072cc88ce        training/webapp     <span class="string">"python app.py"</span>     8 minutes ago        Up 8 minutes        0.0.0.0:32768-&gt;5000/tcp   grave_hopper</span><br></pre></td></tr></table></figure><p>指定容器绑定的网络地址，比如绑定 <code>127.0.0.1</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~$ docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py</span><br><span class="line">95c6ceef88ca3e71eaf303c2833fd6701d8d1b2572b5613b5a932dfdfe8a857c</span><br><span class="line">~$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                NAMES</span><br><span class="line">95c6ceef88ca        training/webapp     <span class="string">"python app.py"</span>     6 seconds ago       Up 6 seconds        5000/tcp, 127.0.0.1:5001-&gt;5000/tcp   adoring_stonebraker</span><br><span class="line">33e4523d30aa        training/webapp     <span class="string">"python app.py"</span>     3 minutes ago       Up 3 minutes        0.0.0.0:5000-&gt;5000/tcp               berserk_bartik</span><br><span class="line">fce072cc88ce        training/webapp     <span class="string">"python app.py"</span>     10 minutes ago      Up 10 minutes       0.0.0.0:32768-&gt;5000/tcp              grave_hopper</span><br></pre></td></tr></table></figure><blockquote><p>这样就可以通过访问 127.0.0.1:5001 来访问容器的 5000 端口。</p></blockquote><p>上面的例子中，默认都是绑定 <code>tcp</code> 端口，如果要绑定 <code>UDP</code> 端口，可以在端口后面加上 <code>/udp</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~$ docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py</span><br><span class="line">6779686f06f6204579c1d655dd8b2b31e8e809b245a97b2d3a8e35abe9dcd22a</span><br><span class="line">~$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                NAMES</span><br><span class="line">6779686f06f6        training/webapp     <span class="string">"python app.py"</span>     4 seconds ago       Up 2 seconds        5000/tcp, 127.0.0.1:5000-&gt;5000/udp   drunk_visvesvaraya</span><br><span class="line">95c6ceef88ca        training/webapp     <span class="string">"python app.py"</span>     2 minutes ago       Up 2 minutes        5000/tcp, 127.0.0.1:5001-&gt;5000/tcp   adoring_stonebraker</span><br><span class="line">33e4523d30aa        training/webapp     <span class="string">"python app.py"</span>     5 minutes ago       Up 5 minutes        0.0.0.0:5000-&gt;5000/tcp               berserk_bartik</span><br><span class="line">fce072cc88ce        training/webapp     <span class="string">"python app.py"</span>     12 minutes ago      Up 12 minutes       0.0.0.0:32768-&gt;5000/tcp              grave_hopper</span><br></pre></td></tr></table></figure><p><code>docker port</code> 命令可以让我们快捷地查看端口的绑定情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ docker port adoring_stonebraker 5000</span><br><span class="line">127.0.0.1:5001</span><br></pre></td></tr></table></figure><h5 id="Docker容器连接"><a href="#Docker容器连接" class="headerlink" title="Docker容器连接"></a>Docker容器连接</h5><p>端口映射并不是唯一把 <code>docker</code> 连接到另一个容器的方法。<br><code>docker</code> 有一个连接系统允许将多个容器连接在一起，共享连接信息。<br><code>docker</code> 连接会创建一个父子关系，其中父容器可以看到子容器的信息。</p><h5 id="容器命名"><a href="#容器命名" class="headerlink" title="容器命名"></a>容器命名</h5><blockquote><p>创建容器的时候，<code>docker</code> 会自动对它进行命名。另外，我们也可以使用 <code>--name</code> 标识来命名容器，例如：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$  docker run -d -P --name firstApp training/webapp python app.py</span><br><span class="line">43780a6eabaaf14e590b6e849235c75f3012995403f97749775e38436db9a441</span><br></pre></td></tr></table></figure><p>可以使用 <code>docker ps</code> 命令来查看容器名称。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~$ docker ps -l</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">43780a6eabaa        training/webapp     <span class="string">"python app.py"</span>     3 minutes ago       Up 3 minutes        0.0.0.0:32769-&gt;5000/tcp   firstApp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/centOS/docker/command/"/>
      <url>/blog/2019/06/12/Linux/centOS/docker/command/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-相关命令"><a href="#docker-相关命令" class="headerlink" title="docker 相关命令"></a>docker 相关命令</h1><ul><li><a href="./command.md">相关命令</a></li><li><a href="./install.md">安装使用（nginx，tomcat，mysql，oracle 11g）</a></li><li><a href="./container-usage.md">容器使用</a></li><li><a href="./image-usage.md">镜像使用</a></li><li><a href="./container-connection.md">容器链接</a></li></ul><h3 id="run-命令说明："><a href="#run-命令说明：" class="headerlink" title="run 命令说明："></a>run 命令说明：</h3><p>语法</p><pre><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></pre><p>OPTIONS说明：</p><ul><li><code>--name 容器名称</code>: 为容器指定一个名称</li><li><code>-p 主机端口:容器端口</code>: 端口映射，格式为：主机(宿主)端口:容器端口</li><li><code>-d</code>: 后台运行容器，并返回容器ID</li><li><code>-v 本机路径:容器路径</code>：将 主机本机路 径目录挂载到容器的 容器路径（<strong>可以是多个-v</strong>）</li><li><code>-a stdin</code>: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li><li><code>-i</code>: 以交互模式运行容器，通常与 -t 同时使用；</li><li><code>-t</code>: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li><code>--dns 8.8.8.8</code>: 指定容器使用的DNS服务器，默认和宿主一致；</li><li><code>--dns-search example.com</code>: 指定容器DNS搜索域名，默认和宿主一致；</li><li><code>-h &quot;mars&quot;</code>: 指定容器的hostname；</li><li><code>-e username=&quot;ritchie&quot;</code>: 设置环境变量；</li><li><code>--env-file=[]</code>: 从指定文件读入环境变量；</li><li><code>--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;</code>: 绑定容器到指定CPU运行；</li><li><code>-m</code> :设置容器使用内存最大值；</li><li><code>--net=&quot;bridge&quot;</code>: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li><li><code>--link=[]</code>: 添加链接到另一个容器；</li><li><code>--expose=[]</code>: 开放一个端口或一组端口； </li></ul><h3 id="容器-命令说明"><a href="#容器-命令说明" class="headerlink" title="容器 命令说明"></a>容器 命令说明</h3><ul><li><code>docker start</code>: 启动一个或多个已经被停止的容器</li><li><code>docker stop</code>: 停止一个运行中的容器</li><li><code>docker restart</code>: 重启容器</li><li><code>docker kill</code>: 杀死</li><li><code>docker rm</code>: 删除</li><li><code>docker exec</code><ul><li><code>-d</code> :分离模式;在后台运行</li><li><code>-i</code> :即使没有附加也保持 STDIN 打开</li><li><code>-t</code> :分配一个伪终端</li></ul></li><li><code>docker pause</code> :暂停容器中所有的进程</li><li><code>docker unpause</code> :恢复容器中所有的进程</li><li><code>docker create</code> ：创建一个新的容器但不启动它</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/Linux/README/"/>
      <url>/blog/2019/06/12/Linux/README/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="./other/hardwareInfo/">硬件信息</a></li><li><a href="./other/user.md">用户</a></li><li><a href="./other/network.md">network 网络</a></li><li><p><a href="./other/shell/">shell 脚本</a></p><ul><li><a href="./other/shell/variable.md">变量</a></li><li><a href="./other/shell/date.md">时间</a></li><li><a href="./other/shell/crontab.md">定时任务</a></li></ul></li><li><p><a href="./centOS/">centOS 系統</a></p></li><li><p><a href="./ubunto/">ubunto 系統</a></p></li><li><p><a href="VMware.md">VMware</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/redis/README/"/>
      <url>/blog/2019/06/12/DB/redis/README/</url>
      
        <content type="html"><![CDATA[<h1 id="rides随记"><a href="#rides随记" class="headerlink" title="rides随记"></a>rides随记</h1><p>1、开启服务：redis-server.exe redis.windows.conf</p><pre><code>[312] 01 Apr 10:44:27.761 # Warning: 32 bit instance detected but no memory limit set. Setting 3 GB maxmemory limit with &apos;noeviction&apos; policy now.                _._           _.-``__ &apos;&apos;-._      _.-``    `.  `_.  &apos;&apos;-._           Redis 3.0.504 (00000000/0) 32 bit  .-`` .-<figure class="highlight plain"><figcaption><span>```\/    _.,_ ''-._</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br></pre></td><td class="code"><pre><span class="line"> (    &apos;      ,       .-`  | `,    )     Running in standalone mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|&apos;` _.-&apos;|     Port: 6379</span><br><span class="line"> |    `-._   `._    /     _.-&apos;    |     PID: 312</span><br><span class="line">  `-._    `-._  `-./  _.-&apos;    _.-&apos;</span><br><span class="line"> |`-._`-._    `-.__.-&apos;    _.-&apos;_.-&apos;|</span><br><span class="line"> |    `-._`-._        _.-&apos;_.-&apos;    |           http://redis.io</span><br><span class="line">  `-._    `-._`-.__.-&apos;_.-&apos;    _.-&apos;</span><br><span class="line"> |`-._`-._    `-.__.-&apos;    _.-&apos;_.-&apos;|</span><br><span class="line"> |    `-._`-._        _.-&apos;_.-&apos;    |</span><br><span class="line">  `-._    `-._`-.__.-&apos;_.-&apos;    _.-&apos;</span><br><span class="line">      `-._    `-.__.-&apos;    _.-&apos;</span><br><span class="line">          `-._        _.-&apos;</span><br><span class="line">              `-.__.-&apos;</span><br><span class="line"></span><br><span class="line">[312] 01 Apr 10:44:27.765 # Server started, Redis version 3.0.504</span><br><span class="line">[312] 01 Apr 10:44:27.770 * DB loaded from disk: 0.001 seconds</span><br><span class="line">[312] 01 Apr 10:44:27.772 * The server is now ready to accept connections on por</span><br><span class="line">t 6379</span><br><span class="line"></span><br><span class="line">2、监听端口：redis-cli.exe -h 127.0.0.1 -p 6379  -a &quot;mypass&quot;  // 参数：-h 主机，-p 端口，-a 密码</span><br><span class="line"></span><br><span class="line">   默认写法redis-cli</span><br><span class="line"></span><br><span class="line">   设置键值对：ping // 用于检测rides是否启动，回复pong为启动</span><br><span class="line">   设置键值对：set myKey abc // set key值后面必须跟value</span><br><span class="line">   取出键值对：get myKey</span><br><span class="line">   删除键值对：del myKey</span><br><span class="line"></span><br><span class="line">命令执行后输出 (integer) 1，否则将输出 (integer) 0</span><br><span class="line"></span><br><span class="line">### redis key命令</span><br><span class="line"></span><br><span class="line">#### 转储（dump）</span><br><span class="line"> 序列化给定 key ，并返回被序列化的值</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line">dump keyname</span><br><span class="line">实例：</span><br><span class="line">127.0.0.1:6379&gt; set greeting &quot;hello, dumping word!&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; dump greeting</span><br><span class="line">&quot;\x00\x14hello, dumping word!\x06\x00\x8a\xa4\xf1\xff8\xe3e\xb7&quot;</span><br><span class="line"></span><br><span class="line">#### exists</span><br><span class="line"> 检查给定 key 是否存在。</span><br><span class="line"></span><br><span class="line">若 key 存在返回 1 ，否则返回 0 。</span><br><span class="line">语法： </span><br><span class="line">exists keyname</span><br><span class="line">实例：</span><br><span class="line">127.0.0.1:6379&gt; exists greeting</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">#### Expire </span><br><span class="line"> 为给定 key 设置过期时间。设置成功返回 1 。 当 key 不存在或者不能为 key 设置过期时间时(比如在低于 2.1.3 版本的 Redis 中你尝试更新 key 的过期时间)返回 0 。</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line">expire KEY_NAME TIME_IN_SECONDS</span><br><span class="line">实例：</span><br><span class="line">127.0.0.1:6379&gt; expire greeting 60      // 一分钟后该键会自动消失</span><br><span class="line">(integer) 1 </span><br><span class="line">一分钟过去了……</span><br><span class="line">127.0.0.1:6379&gt; get greeting</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line">#### expireat</span><br><span class="line"> EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line">EXPIREAT key timestamp</span><br><span class="line">实例：</span><br><span class="line">127.0.0.1:6379&gt; expireat greeting 1293840000 // 时间戳</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">#### pexpireat </span><br><span class="line"></span><br><span class="line">Redis PEXPIREAT 命令用于设置 key 的过期时间，以毫秒计。key 过期后将不再可用。 </span><br><span class="line">语法：</span><br><span class="line"> PEXPIREAT KEY_NAME TIME_IN_MILLISECONDS_IN_UNIX_TIMESTAMP</span><br><span class="line">实例：</span><br><span class="line">127.0.0.1:6379&gt; pexpireat hell  1555543555  // 毫秒</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">#### keys</span><br><span class="line"> 查询key</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line">127.0.0.1:6379&gt; set test1 redis</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set test2 mysql</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set test3 mongodb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys test*     // 查询所有以test开头的</span><br><span class="line">1) &quot;test3&quot;</span><br><span class="line">2) &quot;test2&quot;</span><br><span class="line">3) &quot;test1&quot;</span><br><span class="line">127.0.0.1:6379&gt; keys *     // 查询所有key</span><br><span class="line">…………此处省略…………</span><br><span class="line"></span><br><span class="line">#### move</span><br><span class="line"> Redis MOVE 命令用于将当前数据库的 key 移动到给定的数据库 db 当中。 </span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"> MOVE KEY_NAME DESTINATION_DATABASE</span><br><span class="line">实例：</span><br><span class="line">127.0.0.1:6379&gt; select 0// redis默认使用数据库 0，为了清晰起见，这里再显式指定一次。</span><br><span class="line">OK </span><br><span class="line">127.0.0.1:6379&gt; set first name // 设置一个key为first</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; move first 1 // 移动first到数据库1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; exists first // exists返回(integer) 0，证明first已经被移走</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; select 1 // 切换到数据库1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; exists first     // 鉴定完毕first存在</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379[1]&gt; get first // 鉴定完毕first的name没有丢 :smill:</span><br><span class="line">&quot;name&quot;</span><br><span class="line"></span><br><span class="line">#### persist  and ttl</span><br><span class="line"> Redis persist 命令用于移除给定 key 的过期时间，使得 key 永不过期。 </span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line">PERSIST KEY_NAME</span><br><span class="line">实例：</span><br><span class="line">127.0.0.1:6379&gt; set test &quot;learning redis&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl test            // key 存在，但没有设置剩余生存时间（-1）</span><br><span class="line">(integer) -1</span><br><span class="line">127.0.0.1:6379&gt; expire test 60 // 为key设置生存时间</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl test            // 查看剩余的生存时间(秒)</span><br><span class="line">(integer) 56</span><br><span class="line">127.0.0.1:6379&gt; ttl test // 查看剩余的生存时间(秒)</span><br><span class="line">(integer) 47</span><br><span class="line">127.0.0.1:6379&gt; persist test // 移除key的生存时间</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl test // 查看剩余的生存时间（-1为到期）</span><br><span class="line">(integer) -1</span><br><span class="line"></span><br><span class="line">#### pttl</span><br><span class="line"> Redis Pttl 命令以毫秒为单位返回 key 的剩余过期时间。 </span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"> PTTL KEY_NAME</span><br><span class="line">实例：</span><br><span class="line">127.0.0.1:6379&gt; set lean &quot;learning redis&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl test            // key 存在，但没有设置剩余生存时间（-1）</span><br><span class="line">(integer) -1</span><br><span class="line">127.0.0.1:6379&gt; expire lean 60 // 为key设置生存时间</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl lean// 查看剩余的生存时间(秒)</span><br><span class="line">(integer) 54</span><br><span class="line">127.0.0.1:6379&gt; pttl lean// 查看剩余的生存时间(毫秒)</span><br><span class="line">(integer) 46574</span><br><span class="line"></span><br><span class="line">#### randomkey </span><br><span class="line"> Redis RANDOMKEY 命令从当前数据库中随机返回一个 key 。</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"> RANDOMKEY </span><br><span class="line">实例：</span><br><span class="line">127.0.0.1:6379&gt; mset first &apos;redis&apos; second &apos;mongodb&apos; third &apos;mysql&apos;  // 设置多个key</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; randomkey// 随机返回一个key</span><br><span class="line">&quot;first&quot;</span><br><span class="line">127.0.0.1:6379&gt; randomkey// 随机返回一个key</span><br><span class="line">&quot;second&quot;</span><br><span class="line">127.0.0.1:6379&gt; randomkey// 随机返回一个key</span><br><span class="line">&quot;first&quot;</span><br><span class="line">127.0.0.1:6379&gt; randomkey// 随机返回一个key</span><br><span class="line">&quot;init&quot;</span><br><span class="line">127.0.0.1:6379&gt; randomkey// 随机返回一个key</span><br><span class="line">&quot;init&quot;</span><br><span class="line">127.0.0.1:6379&gt; randomkey// 随机返回一个key</span><br><span class="line">&quot;init&quot;</span><br><span class="line">127.0.0.1:6379&gt; keys *// 查看所有的key</span><br><span class="line">1) &quot;third&quot;</span><br><span class="line">2) &quot;second&quot;</span><br><span class="line">3) &quot;first&quot;</span><br><span class="line">4) &quot;init&quot;</span><br><span class="line"></span><br><span class="line">#### rename </span><br><span class="line"> Redis Rename 命令用于修改 key 的名称 。 </span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line">RENAME OLD_KEY_NAME NEW_KEY_NAME</span><br><span class="line">实例：</span><br><span class="line">127.0.0.1:6379&gt; mset first &apos;redis&apos; second &apos;mongodb&apos; third &apos;mysql&apos;  // 设置多个key</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; rename first Penultimate // 修改first为Penultimate</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; exists first// 查看first是否存在</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; exists Penultimate// 查看Penultimate是否存在</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; rename first Penultimate// 尝试修改不存在的key值first</span><br><span class="line">(error) ERR no such key</span><br><span class="line">127.0.0.1:6379&gt; set pc &quot;hasee&quot;// 设置pc为hasee</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set pc1 &quot;dell&quot;// 设置pc1为dell</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; rename pc pc1// 改key值，pc为pc1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get pc// 查看pc的value为nil空</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get pc1// 查看pc1为 hasee</span><br><span class="line">&quot;hasee&quot;</span><br><span class="line"></span><br><span class="line">#### renamenx</span><br><span class="line"> Redis Renamenx 命令用于在新的 key 不存在时修改 key 的名称 。</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"> RENAMENX OLD_KEY_NAME NEW_KEY_NAME</span><br><span class="line">实例：</span><br><span class="line">127.0.0.1:6379&gt; set pc &quot;hasee&quot;// 设置pc为hasee</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set pc1 &quot;dell&quot;// 设置pc1为dell</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; renamenx pc pc1// 修改pc为pc1(0_失败)</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; renamenx pc1 pc// 修改pc1为pc(0_失败)</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get pc</span><br><span class="line">&quot;hasee&quot;</span><br><span class="line">127.0.0.1:6379&gt; get pc1</span><br><span class="line">&quot;dell&quot;</span><br><span class="line">127.0.0.1:6379&gt; exists pc3// 查看pc3是否存在</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; renamenx pc pc3// 修改pc为pc3(1_成功)</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get pc          // 查看pc是否还存在</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get pc3 // pc已被改为pc3</span><br><span class="line">&quot;hasee&quot;</span><br><span class="line"></span><br><span class="line">#### type</span><br><span class="line"> Redis Type 命令用于返回 key 所储存的值的类型。</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line">TYPE KEY_NAME </span><br><span class="line">返回值：</span><br><span class="line">  返回 key 的数据类型，数据类型有：</span><br><span class="line">    none (key不存在)</span><br><span class="line">    string (字符串)</span><br><span class="line">    list (列表)</span><br><span class="line">    set (集合)</span><br><span class="line">    zset (有序集)</span><br><span class="line">    hash (哈希表)</span><br><span class="line">实例：</span><br><span class="line">127.0.0.1:6379&gt; hmset user:1 username sx pwd 123 // 创建哈希</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; type user:1// 查看类型</span><br><span class="line">hash</span><br><span class="line">127.0.0.1:6379&gt; lpush Ltest book// 创建列表</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; type Ltest// 查看类型</span><br><span class="line">list</span><br><span class="line">127.0.0.1:6379&gt; set getting confing// 创建集合</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; type pat// 查看集合</span><br><span class="line">set</span><br><span class="line">127.0.0.1:6379&gt; sadd pat &quot;dog&quot;// 创建无序集合</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; type getting// 查看类型</span><br><span class="line">string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### rides数据类型</span><br><span class="line"></span><br><span class="line">Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</span><br><span class="line"></span><br><span class="line">1、hash（哈希） </span><br><span class="line"></span><br><span class="line">Redis hash 是一个键值对集合。</span><br><span class="line">Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</span><br><span class="line"></span><br><span class="line">用法:</span><br><span class="line">127.0.0.1:6379&gt; hmset user:1 username Ltest password 110119// 设置hash</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hgetall user:1 // 获取</span><br><span class="line">1) &quot;username&quot;</span><br><span class="line">2) &quot;Ltest&quot;</span><br><span class="line">3) &quot;password&quot;</span><br><span class="line">4) &quot;110119&quot;</span><br><span class="line"></span><br><span class="line">2、list（列表）</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lpush Ltest vehicle  // push数据到list</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush Ltest room</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; lpush Ltest woman</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange Ltest 0 10   // 查询数据Ltest内的第0到第10条数据</span><br><span class="line">1) &quot;woman&quot;</span><br><span class="line">2) &quot;room&quot;</span><br><span class="line">3) &quot;vehicle&quot;</span><br><span class="line"></span><br><span class="line">3、Set（集合）</span><br><span class="line"></span><br><span class="line">Redis的Set是string类型的无序集合。</span><br><span class="line">集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</span><br><span class="line"></span><br><span class="line">添加一个string元素到,key对应的set集合中，成功返回1,如果元素已经在集合中返回0,key对应的set不存在返回错误。</span><br><span class="line"></span><br><span class="line">sadd 命令</span><br><span class="line"></span><br><span class="line">sadd key member</span><br><span class="line"></span><br><span class="line">用法:</span><br><span class="line">127.0.0.1:6379&gt; sadd setTest vehicle// 添加集合##</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd setTest room</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd setTest woman</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd setTest woman</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; smembers setTest// 查询成员</span><br><span class="line">1) &quot;vehicle&quot;</span><br><span class="line">2) &quot;woman&quot;</span><br><span class="line">3) &quot;room&quot;</span><br><span class="line"></span><br><span class="line">__注意：__ 以上实例中 woman 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、zset(sorted set：有序集合)</span><br><span class="line"></span><br><span class="line">Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</span><br><span class="line">不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</span><br><span class="line">zset的成员是唯一的,但分数(score)却可以重复。</span><br><span class="line"></span><br><span class="line">zadd 命令</span><br><span class="line">添加元素到集合，元素在集合中存在则更新对应score</span><br><span class="line"></span><br><span class="line">zadd key score member </span><br><span class="line"></span><br><span class="line">用法:</span><br><span class="line">127.0.0.1:6379&gt; zadd zTest 0 vehicle   // 添加有序集合</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd zTest 0 room</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd zTest 0 woman</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd zTest 0 woman</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore zTest 0 100  // 通过范围获取有序集合</span><br><span class="line">1) &quot;room&quot;</span><br><span class="line">2) &quot;vehicle&quot;</span><br><span class="line">3) &quot;woman&quot;</span><br><span class="line"></span><br><span class="line">### rides配置(config)</span><br><span class="line"></span><br><span class="line">config get *// 查看全部配置</span><br><span class="line">config get config_setting_name // 查看设置的配置项（格式：名）</span><br><span class="line">config set config_setting_name config_setting_value   // 设置配置项（格式：name，value）</span><br><span class="line"></span><br><span class="line">redis.conf 配置项说明如下：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</span><br><span class="line"></span><br><span class="line">    daemonize no</span><br><span class="line"></span><br><span class="line">2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</span><br><span class="line"></span><br><span class="line">   pidfile /var/run/redis.pid</span><br><span class="line"></span><br><span class="line">3. 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字</span><br><span class="line"></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line">4. 绑定的主机地址</span><br><span class="line"></span><br><span class="line">bind 127.0.0.1</span><br><span class="line"></span><br><span class="line">5. 当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span><br><span class="line"></span><br><span class="line">timeout 300</span><br><span class="line"></span><br><span class="line">6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</span><br><span class="line"></span><br><span class="line">loglevel verbose</span><br><span class="line"></span><br><span class="line">7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null</span><br><span class="line"></span><br><span class="line">    logfile stdout</span><br><span class="line"></span><br><span class="line">8. 设置数据库的数量，默认数据库为0，可以使用SELECT  命令在连接上指定数据库id </span><br><span class="line"></span><br><span class="line">   databases 16</span><br><span class="line"></span><br><span class="line">9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span><br><span class="line"></span><br><span class="line">```save &lt;seconds&gt; &lt;changes&gt;</span><br></pre></td></tr></table></figure>Redis默认配置文件中提供了三个条件：save 900 1save 300 10save 60 10000分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</code></pre><ol start="10"><li><p>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</p><pre><code>rdbcompression yes</code></pre></li><li><p>指定本地数据库文件名，默认值为dump.rdb</p><pre><code>dbfilename dump.rdb</code></pre></li><li><p>指定本地数据库存放目录</p><pre><code>dir ./</code></pre></li><li><p>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</p><pre><code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></pre></li><li><p>当master服务设置了密码保护时，slav服务连接master的密码</p><pre><code>masterauth &lt;master-password&gt;</code></pre></li><li><p>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭</password></p><pre><code>requirepass foobared</code></pre></li><li><p>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</p><pre><code>maxclients 128</code></pre></li><li><p>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区</p><pre><code>maxmemory &lt;bytes&gt;</code></pre></li><li><p>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</p><pre><code>appendonly no</code></pre></li><li><p>指定更新日志文件名，默认为appendonly.aof</p><pre><code>appendfilename appendonly.aof</code></pre></li><li><p>指定更新日志条件，共有3个可选值：</p><pre><code>no：表示等操作系统进行数据缓存同步到磁盘（快）always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）everysec：表示每秒同步一次（折衷，默认值）appendfsync everysec</code></pre></li><li><p>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）</p><pre><code>vm-enabled no</code></pre></li><li><p>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</p><pre><code>vm-swap-file /tmp/redis.swap</code></pre></li><li><p>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0</p><pre><code>vm-max-memory 0</code></pre></li><li><p>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值</p><pre><code>vm-page-size 32</code></pre></li><li><p>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。</p><pre><code>vm-pages 134217728</code></pre></li><li><p>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</p><pre><code>vm-max-threads 4</code></pre></li><li><p>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</p><pre><code>glueoutputbuf yes</code></pre></li><li><p>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</p><pre><code>hash-max-zipmap-entries 64hash-max-zipmap-value 512</code></pre></li><li><p>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）</p><pre><code>activerehashing yes</code></pre></li><li><p>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</p><pre><code>include /path/to/local.conf</code></pre></li></ol><h3 id="查看服务器信息"><a href="#查看服务器信息" class="headerlink" title="查看服务器信息"></a>查看服务器信息</h3><p>  127.0.0.1:6379&gt; info</p><pre><code># Serverredis_version:3.0.504redis_git_sha1:00000000redis_git_dirty:0redis_build_id:a4f7a6e86f2d60b3redis_mode:standaloneos:Windowsarch_bits:32multiplexing_api:WinSock_IOCPprocess_id:5800run_id:4d6afdd49a2039775e20214bb22680b27c0deea5tcp_port:6379uptime_in_seconds:5309uptime_in_days:0hz:10lru_clock:14966534config_file:D:\Program Files\redis\redis.windows.conf# Clientsconnected_clients:1client_longest_output_list:0client_biggest_input_buf:0blocked_clients:0# Memoryused_memory:521064used_memory_human:508.85Kused_memory_rss:483296used_memory_peak:521064used_memory_peak_human:508.85Kused_memory_lua:26624mem_fragmentation_ratio:0.93mem_allocator:jemalloc-3.6.0# Persistenceloading:0rdb_changes_since_last_save:0rdb_bgsave_in_progress:0rdb_last_save_time:1491361241rdb_last_bgsave_status:okrdb_last_bgsave_time_sec:0rdb_current_bgsave_time_sec:-1aof_enabled:0aof_rewrite_in_progress:0aof_rewrite_scheduled:0aof_last_rewrite_time_sec:-1aof_current_rewrite_time_sec:-1aof_last_bgrewrite_status:okaof_last_write_status:ok# Statstotal_connections_received:1total_commands_processed:66instantaneous_ops_per_sec:0total_net_input_bytes:2490total_net_output_bytes:4745instantaneous_input_kbps:0.00instantaneous_output_kbps:0.00rejected_connections:0sync_full:0sync_partial_ok:0sync_partial_err:0expired_keys:1evicted_keys:0keyspace_hits:19keyspace_misses:4pubsub_channels:0pubsub_patterns:0latest_fork_usec:3000migrate_cached_sockets:0# Replicationrole:masterconnected_slaves:0master_repl_offset:0repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0# CPUused_cpu_sys:0.87used_cpu_user:0.27used_cpu_sys_children:0.00used_cpu_user_children:0.00# Clustercluster_enabled:0# Keyspacedb0:keys=5,expires=0,avg_ttl=0127.0.0.1:6379&gt; cpu</code></pre><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><pre><code>https://github.com/MSOpenTech/redis/releases        redis的github下载地址http://files.cnblogs.com/files/cuiwenyuan/Redis-3.2.100-Windows-32.zip  redis的32位地址</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/redis/redis.conf/"/>
      <url>/blog/2019/06/12/DB/redis/redis.conf/</url>
      
        <content type="html"><![CDATA[<h1 id="redis-conf"><a href="#redis-conf" class="headerlink" title="redis.conf"></a>redis.conf</h1><ol><li><p>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</p><p> daemonize no</p></li><li><p>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</p><p> pidfile /var/run/redis.pid</p></li><li><p>指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字</p><p> port 6379</p></li><li><p>绑定的主机地址</p><p> bind 127.0.0.1</p></li></ol><p>5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</p><pre><code>timeout 300</code></pre><ol start="6"><li><p>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</p><p> loglevel verbose</p></li><li><p>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null</p><p> logfile stdout</p></li><li><p>设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id</dbid></p><p> databases 16</p></li><li><p>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</p><p> save <seconds> <changes></changes></seconds></p><p> Redis默认配置文件中提供了三个条件：</p><p> save 900 1</p><p> save 300 10</p><p> save 60 10000</p><p> 分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</p></li></ol><ol start="10"><li><p>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</p><p>rdbcompression yes</p></li><li><p>指定本地数据库文件名，默认值为dump.rdb</p><p>dbfilename dump.rdb</p></li><li><p>指定本地数据库存放目录</p><p>dir ./</p></li><li><p>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</p><p>slaveof <masterip> <masterport></masterport></masterip></p></li><li><p>当master服务设置了密码保护时，slav服务连接master的密码</p><p>masterauth <master-password></master-password></p></li><li><p>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭</password></p><p>requirepass foobared</p></li><li><p>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</p><p>maxclients 128</p></li><li><p>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区</p><p>maxmemory <bytes></bytes></p></li><li><p>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</p><p>appendonly no</p></li><li><p>指定更新日志文件名，默认为appendonly.aof</p><p> appendfilename appendonly.aof</p></li><li><p>指定更新日志条件，共有3个可选值：<br>no：表示等操作系统进行数据缓存同步到磁盘（快）<br>always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）<br>everysec：表示每秒同步一次（折衷，默认值）</p><p>appendfsync everysec</p></li></ol><ol start="21"><li><p>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）</p><p> vm-enabled no</p></li><li><p>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</p><p> vm-swap-file /tmp/redis.swap</p></li><li><p>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0</p><p> vm-max-memory 0</p></li><li><p>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值</p><p> vm-page-size 32</p></li><li><p>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。</p><p> vm-pages 134217728</p></li><li><p>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</p><p> vm-max-threads 4</p></li><li><p>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</p><p>glueoutputbuf yes</p></li><li><p>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</p><p>hash-max-zipmap-entries 64</p><p>hash-max-zipmap-value 512</p></li><li><p>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）</p><p>activerehashing yes</p></li><li><p>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</p><p>include /path/to/local.conf</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/EnglishSong/README/"/>
      <url>/blog/2019/06/12/EnglishSong/README/</url>
      
        <content type="html"><![CDATA[<pre><code>1. because of you(因为你)　　这首歌第1次听的时候震撼特别大,高潮过后突然安静的那一会真的太爽了.而且这首歌还很有气势,真正的百听不厌</code></pre><p>　　2.never had a dream come true(从来没有梦想成真)</p><pre><code>电影《阳光情人》1999,电影《太阳浩劫》2007一直在找一个人,从未梦想成真</code></pre><p>　　个人最喜欢的一首…旋律肯定熟悉，但是不知道歌名，现在知道了吧</p><p>　　3.anyone of us(我们中的任何人)</p><p>　　这首歌可能不是所有人第1次听就喜欢,但我第1次听它就很感冒,gareth gates的声音的确非常好听,节奏和旋律真的没有他的歌声霸道</p><p>　　4.she(她)</p><p>　　这是在我mp3里呆的最久的一首歌.可能有半年了吧,相当好听,不管是节奏,歌词，还是groove coverage的唱功都着实了得 !经常玩劲舞团的对这首歌应该不陌生吧</p><p>　　5.i want it that way(我想要那样)</p><pre><code>后街男孩的;我想要那样;我要用那种方法得到它;我想要这种方式</code></pre><p>　　这首歌是我认为的后街最好听的一首歌</p><p>　　6.hero-mariah carey(英雄玛利亚凯莉)<br>    乔丹退役时 英雄玛利亚凯莉 献唱的歌曲《Hero》<br>    [<br>        Hero 英雄</p><pre><code>    There&apos;s a hero    有一位英雄    If you look inside your heart    如果你往你的内心深处寻觅    You don&apos;t have to be afraid    你无需恐惧    Of what you are    自己是什么    There&apos;s an answer    会有一个答案    If you reach into your soul    如果你往你的灵魂深处探索    And the sorrow that you know    你会了解悲伤    Will melt away    将会消散    And then a hero comes along    然后一位英雄孤独的走来    With the strength to carry on    伴随着力量前进    And you cast your fears aside    把你的恐惧甩到一旁    And you know you can survive    你明白你能活下来    So when you feel like hope is gone    所以当你感觉希望破灭之时    Look inside you and be strong    正视自己要坚强    And you&apos;ll finally see the truth    最后你终将发现这个事实    That a hero lies in you    你是一位英雄    It&apos;s a long road    这是一条漫长的路    When you face the world alone    当你孤独的面对这个世界    No one reaches out a hand    没有人伸手    For you to hold    将你紧握    You can find love    你能够发现爱    If you search within yourself    如果你往自身寻找    And the emptiness you felt    你感觉到的空虚    Will disappear    将会消散    And then a hero comes along    然后有一位英雄孤独走来    With the strength to carry on    伴随着力量前进    And you cast your fears aside    把你的恐惧甩到一旁    And you know you can survive    你明白你能活下来    So when you feel like hope is gone    所以当你感觉希望破灭之时    Look inside you and be strong    正视自己要坚强    And you&apos;ll finally see the truth    最后你终将发现这个事实    That a hero lies in you    你是一位英雄    Lord knows    上帝知道    Dreams are hard to follow    梦想总是很难跟随    But don&apos;t let anyone    但是不要让任何人    Tear them away, hey yeah    将梦想打碎    Hold on    紧握住    There will be tomorrow    明天即将来临    In time You&apos;ll find the way    你终将找到路    And then a hero comes along    然后有一位英雄孤独走来    With the strength to carry on    伴随着力量前进    And you cast your fears aside    把你的恐惧甩到一旁    And you know you can survive    你明白你能活下来    So when you feel like hope is gone    所以当你感觉希望破灭之时    Look inside you and be strong    正视自己要坚强    And you&apos;ll finally see the truth    最后你终将发现这个事实    That a hero lies in you    你是一位英雄]</code></pre><p>　　这首歌不象其他歌一样搞的很大声,但它依然很有气势。我真的有点佩服mariah carey,可以把一首并不快的歌唱成这样,可以说,这首歌很有气质,值得一听</p><p>　　7.my happy ending（我的快乐结局）</p><p>　　不懂avril lavigne(艾薇儿经典歌曲)清纯的外表下怎么会有如此的爆发力?!这是一首需要挑战耳膜强度的歌哦,特别是晚上.如果都开很大声,嘿嘿,有你爽的哈</p><p>　　8.fighter(战士)</p><p>　　这是nba季后赛的主题曲.这首歌带给我的气势和激情就是代表nba的一种精神.</p><p>　　像个勇士一样,永不放弃</p><p>　　这就是nba的魅力,也是这首歌的魅力。</p><pre><code>8.1 lonely (孤独)I am lonely lonely lonely 我是这么孤独，I am lonely lonely in my life 我的生命是这样孤独，I am lonely lonely lonely 我是这么孤独，God help me help me to survive! 上帝呀，请给我活下去的勇气。Remember first time we met day one 还记得我们见面的那天Kids in the garden playin&apos; games havin&apos; fun 孩子们在花园里正玩的开心。Excitin&apos; and amazin&apos; havin&apos; a real friend of mine 很高兴找到自己的知心朋友Feel my heartbeat and for real friend of mine拥有真正的朋友多么开心Face to face and eye to eye 面对面的眼神交流。Usin&apos; our hands to buy and supply 用我们的双手来补偿和交换，Chillin&apos; is cool from January to June 从寒冷的一月到凉爽的六月天，And we still sticked together like the glue 我们还是无法离散。We know the rules 我们知道游戏的规则，Forever you and I believe it was clear 是永远那么清楚明白。If I ever should fall 如果我跌倒，I could count on you with no fear 我并不害怕，还有你可依靠。Runnin&apos; out of time I see who&apos;s fake 日久见人心，Alone without protection from all them snakes 在这险恶的世界里。All for one one for all I was told “人人为我，我为人人”他们这样告诉我Black white yellow if your young or old 不论你的皮肤颜色还是年龄大小。Nana&apos;s in the house to let you know 在这里告诉你，What I see is how I feel and damn 我看见的就是我感觉的。I&apos;m alone 我只有我自己。I am lonely lonely lonely 我是这么孤独，I am lonely lonely in my life 我的生命是这样孤独，I am lonely lonely lonely 我是这么孤独，God help me help me to survive! 上帝呀，请给我活下去的勇气。Everybody&apos;s trippin&apos; on me 所有的人都把我践踏，Oh God come help me please 上帝呀，快来帮助我。I did some bad things in my life 我一定是做错了什么事，Why can&apos;t you rescue me 你为什么就不能拯救我，&apos;Cause you&apos;ve got all I need 因为你能给我想要的一切。I know I got to pay the price 我知道我必须付出代价。That&apos;s why I&apos;m lonely lonely lonely 这就是为什么我这样孤独，I am so lonely lonely 我是这么孤独，That&apos;s why I&apos;m lonely lonely lonely 这就是为什么我这样孤独。Cheepin&apos; thru the streets at night 穿过午夜孤独的大街，After a fuss and fight 身上带着新添的伤痕。Tears in my eyes 眼含泪水，I&apos;m a man lookin&apos; for the light 去寻找光明。Dark is the path 黑暗是必经之路，He will rescue me 上帝会拯救我，The Lord is my shephard 他就是我的领路人。I&apos;m cool despite emergency 虽然急迫但我内心依然冷静，Whom shall I fear exept the god 除了上帝我谁也不怕。Thank you for the blessin&apos; 感谢上帝保佑，And the skills on the mic 赐予我美妙歌喉。Five years we know there&apos;s no dignity 五年了，我活的没有尊严，Free at last see the light in me 我终将获得灵魂的解放。What goes up must come down 生死交替无法避免，I&apos;ll be around while you heading towards deathtown 我会陪你走向死亡之城，Always look forward hardly never look back 永不回头。So many tears and the snakes on my jack 留过多少泪，受过多少磨难，Now I&apos;m riding in my big fat ride 我已踏上寻找光明的旅途，Your ass is late so look for the line 你来晚了就要排队。Nana in the house to let you know 在这里告诉你，What I see is how I feel so leave me alone我看见的就是我感觉的，所以不要打扰我I am lonely lonely lonely 我是这么孤独，I am lonely lonely in my life 我的生命是这样孤独，I am lonely lonely lonely 我是这么孤独，God help me help me to survive! 上帝呀，请给我活下去的勇气。Everybody&apos;s trippin&apos; on me 所有的人都把我践踏，Oh Lord come help me please 上帝呀，快来帮助我。I did some bad things in my life 我一定是做错了什么事，Why can&apos;t you rescue me 你为什么就不能拯救我，&apos;Cause you&apos;ve got all I need 因为你能给我想要的一切。I know I got to pay the price 我知道我必须付出代价。Knock on my door 有人敲我的门，Whom you lookin&apos; for 你想找谁。A dream or reality enemies at my door 找寻梦想还是残酷的现实？Eyes I realize it&apos;s fantasize 我意识到这是幻想，I must be high 我一定是太激动了。So let me live before I die 所以死之前要好好活一次。Once again grab the bottle twist the cap 抓过酒瓶，卷起帽子，To survive your life is yours 你过你自己的生活，My life is mine 我过我自己的生活，No emotions in this world full of lies 在这个充满谎言的世界没有感情可言。Step by step and be versatile 一步一步来，随机应变，Love peace and crash that&apos;s what it&apos;s all about 热爱和平和破坏，这就是一切。Alone by yourself than you lack there&apos;s no doubt about毫无疑问，你只能依靠自己。I&apos;m always into something making moves to improve 我总是专注一件事情，努力改进。What would you do if you where in my shoes 如果你是我你会怎么办？Boom a letter oops another suicide 情绪低沉然后自杀？Meet me for a ride at the boulevard 我会等着你一起去寻找解脱。Nana&apos;s in the house to let you know 在这里告诉你，What I see is how I feel and damn 我看见的就是我感觉的。I am lonely lonely lonely 我是这么孤独，I am lonely lonely in my life 我的生命是这样孤独，I am lonely lonely lonely 我是这么孤独，God help me help me to survive! 上帝呀，请给我活下去的勇气。Everybody&apos;s trippin&apos; on me 所有的人都把我践踏，Oh Lord come help me please 上帝呀，快来帮助我。I did some bad things in my life 我一定是做错了什么事，Why can&apos;t you rescue me 你为什么就不能拯救我，&apos;Cause you&apos;ve got all I need 因为你能给我想要的一切。I know I got to pay the price 我知道我必须付出代价。I am lonely lonely lonely 我是这么孤独，I am lonely lonely in my life 我的生命是这样孤独，I am lonely lonely lonely 我是这么孤独，God help me help me to survive! 上帝呀，请给我活下去的勇气。Sibela DemirowaSibela DemirowaI am lonely lonely lonely 我是这么孤独，I am lonely lonely in my life 我的生命是这样孤独，I am lonely lonely lonely 我是这么孤独，God help me help me to survive! 上帝呀，请给我活下去的勇气。That&apos;s why I&apos;m lonely lonely lonely 这就是为什么我这样孤独，I am so lonely lonely 我是这么孤独，I am so lonely lonely lonely in my life我的生命是这样孤独。</code></pre><p>　　9.it’s my life(这是我的生活)</p><p>　　cs mv的主题曲，钢琴版的听着超爽，如果你想去感叹人生的话听这首歌是个很好的方法</p><p>　　10.yesterday once more(昨日重现)</p><p>　　舒缓的节奏和干净的声音听起来实在舒服，这首歌很老，但就象酒，越老越香</p><p>　　它太经典了。</p><p>　　很多人想</p><p>　　但真的永远不会</p><p>　　昨日重现</p><p>　　11. big big world(大世界)</p><p>　　这首歌是初中时全班都唱过的</p><p>　　现在好怀念初中的时光</p><p>　　时间真的过的好快啊</p><p>　　这首歌依然经典</p><p>　　但我真的都长大了，不一样了</p><p>　　12. right here waiting(在这里等着)</p><p>　　这首歌从一开始经典到结尾，还是喜欢他唱的那句i’ll be right here waiting for you(我会在这里等你)</p><p>　　有时生命需要等待，也需要忍耐</p><p>　　13.forever young(永远年轻|天荒情未了:电影)</p><p>　　真的希望能永远年轻啊，但这是不可能的。人总是要长大的。歌词真的太经典了，喜欢的请支持我，让大家听着的时候方便点</p><p>　　14.my love(我的爱:同名电影)</p><p>　　最最流行的英文歌，歌词简单，我第一次听英文歌就是听的这首歌啊。下面有连接，没听过的赶快听啊，听过的再回味一下哈</p><p>　　15.the day you went away(第一次爱的人:同名中文歌)</p><p>　　这首歌大家都应该听过的</p><p>　　没听过英文的都应该听过中文的</p><p>　　有时无话可说是不是好事</p><p>　　16.as long as you love me(只要你爱我)</p><p>　　这首歌听来相当轻快，而且旋律很很好听</p><p>　　不管who you are? where you from?（你是谁？你从哪来？）</p><p>　　都觉得后街的歌经典啊</p><p>　　真的没说的</p><p>　　17.baby one more time(宝贝再来一次)</p><p>　　小甜甜也有很多好听的歌的。这首很有节奏感的情歌感觉她真的是一个能快能慢，唱什么歌都好听的歌手啊，觉得好听就one more time</p><p>　　18.tomorrow( 明天 )</p><p>　　这是avril lavigne，最经典的一首歌。我认为的哈</p><p>　　吉他的伴奏和她略带伤感的声音可以让你的心立刻安静下来。听完后是回味，而不是去想tomorrow</p><p>　　19.just one last (最后一曲)dance-sarah connor</p><p>　　既然是just one last dance,当然很适合在晚上听撒,因为晚上是一天的last哈</p><p>　　开始时sarah connor亲唱just one last dance 在晚上四周超安静的时候听起真的超爽，而后面劲爆的一段简直把夜晚推向高潮</p><p>　　20.you are not alone(你并不孤单:同名电影)</p><p>　　迈克尔杰克逊还有这样的歌，真的是挺不错的啊</p><p>　　感觉他的歌都挺劲爆的</p><p>　　偶尔来一首安静点，慢点的</p><p>　　慢节奏的听起真的不错啊</p><p>　　觉得这首歌好听的一定要在后面顶啊</p><p>　　21.thank you(谢谢你)    歌手-dido微笑</p><p>　　这首歌可能第一次不会觉得很好听，特别是高潮部分。</p><p>　　但安静的时候听还可以，还有那些伴奏，很有特色</p><p>　　想安静下来就听听这首歌</p><p>　　22.pretty boy(漂亮的男孩)</p><p>　　m2m的声音真的象天使,听起真的好舒服</p><p>　　而且很干净很有磁性的声音让我第1次听完就去问朋友这首歌是谁唱的</p><p>　　23.may it be(但愿如此) -enya恩雅</p><p>　　魔戒的主题曲，超空灵的歌曲</p><p>　　也是enya的成名曲和代表作</p><pre><code>歌曲大意：May It Be may it be an evening star 但愿有一颗暮色之星 shines down upon you 佛照着你 may it be when darkness falls 即使黑暗降临 your heart will be true 你将揣着颗真诚的心 you walk a lonely road 孤独地上路 oh, how far you are from home 噢，离家的路途有多远 mornie utúli?? (darkness has come) mornie utúli?? （黑暗已经降临） believe and you will find your way 相信，而且你会找到路径 mornie alanti?? (darkness has fallen) mornie utúli?? （黑暗已经降临） a promise lives within you now 如今希望在你心中不泯 may it be shadows call 但愿阴影的笼罩 will fly away 将消逝 may it be your journey on 但愿你足下的旅途 to light the day 走向光明的天日 when the night is overcome 当黑夜逝去时 you may rise to find the sun 愿你起身迎接朝阳 mornie utúli?? (darkness has come) mornie utúli?? （黑暗已经来临） believe and you will find your way 相信你会找到路径 mornie alanti?? (darkness has fallen) mornie utúli?? （黑暗已经来临） a promise lives within you now 如今希望在你心中不泯 a promise lives within you now 如今希望在你心中不泯</code></pre><p>　　25.amarantine(永恒之约)-enya恩雅</p><p>　　enya唱歌让人产生联想</p><p>　　实在奇怪啊</p><p>　　听她的歌怀疑世界是不是真实的</p><p>　　不是特别好听但当你想写科幻小说的时候一定要听听啊 !</p><p>　　27.if you come back(回到我身边)-blue</p><p>　　blue的声音真是爽啊，简直是天籁之音</p><p>　　特别是假声那段</p><p>　　没听过的赶快来听啊</p><p>　　28.scarborough fiar（斯卡堡集市|电影：《毕业生》的插曲）</p><p>　　第1次听把fiar看成了fire,后来我就认为它是fire了,我想我们现在都在燃烧青春哈,希望各位把火搞大点,这样前途也更光明点</p><p>　　月光女神啊…必须顶，这首也是我钟爱的一首歌，适合安静的时候听，真正的天籁，没得说的。</p><p>　　29.one love(唯一的爱)</p><p>　　这首blue的歌让我想起了很多朋友,我们一起听着这歌度过了高中</p><p>　　,我想朋友真的是一生中相当宝贵的财富,特别象我们这些独生子女</p><p>　　30.toxic(中毒)</p><p>　　这首小甜甜的歌很有节奏感而且很好听,还有听起很容易上瘾,就象它翻译过来的名字样,中你的毒.不过中毒还不是要听啊</p><p>　　31.always come back to your love（ 总是回到你的爱）-samantha mumba莎曼珊曼芭</p><p>　　节奏重要还是歌声重要.这首歌如果没那么好多节奏, samantha mumba会唱的索然无味.如果没有samantha mumba的尽情演唱,可能节奏也会变的空洞.这首歌是节奏歌声的完美结合。</p><p>　　32.zombie(僵尸)</p><p>　　经典歌曲　《zombie》.超级女生李宇春翻唱过这首歌曲.不过她太垃圾了.这样的歌曲她不配唱.来听听我们的cranberries的歌，这样的歌曲你一个人在寂寞的时候听心里会流血的!朋友，我希望你能听完这首歌曲.你真的会喜欢它的!</p><p>　　33.classicriver(灰色空间)</p><p>　　第一次听这曲子的时候是在初秋的深夜,偶然听到了它,刹时间时间和空间好象都凝固了一样!听着它,感觉深藏心底的那份无尽地孤独被慢慢地勾起, 曾经的回忆, 失去的快乐，刻骨的伤心，和短暂拥有，都在那一刻漂浮了起来,占据了身边的所有的空间. 它让我感觉到了这世间最珍贵的是亲情，爱情.金钱算得了什么呢</p><p>　　34.Show Me The Meaning Of Being Lonely(告诉我我的意义)</p><p>　　以前学校里经常听到有人放他们的as long as you love me(只要你爱我)，似乎那群呆子只知道后街的这一首歌。没错这首歌的确是经典，但是听多了真的烦了，有的干脆连谁唱的都不知道，一提到后街都一副恍然大悟的样子：“哦。。原来是他们。。”</p><p>　　35.take me to your heart(吻别)</p><p>　　这首歌来自丹麦4人组合(现在3人)michael learns to rock 的第6张大碟take me to your heart。大家对michael learns to rock一定不会陌生，他们的成名曲that’s why (you go away)一直在到处传唱。虽然乐队的名字中有rock，但是他们一直坚持的却是抒情歌曲的路线，不断感动着各位歌迷。比较符合亚洲人喜好的曲风使他们在亚洲远比他们在西方要受欢迎。这张XX年的全新专辑包括10首旋律优美、琅琅上口的，充满mltr抒情风格的作品，我们完全可以感受到他们对音乐的执着和诚意。特别值得推荐的是专辑同名主打歌曲take me to your heart，大家听了肯定会感到十分亲切，因为这首歌是mltr专为感谢中国歌迷一直以来对他们的喜爱和支持而特别翻唱香港天王张学友的名曲《吻别》，同时也进行了一些改编，使之更符合mltr的风格。我们可以听到，mltr的版本中少了一份哀怨，多了几分深情，编排清新动听，歌词浅显易懂!</p><p>　　36.cry on my shoulder(靠在我的肩膀哭泣)</p><p>　　这首算是比较抒情但又是又很有节奏，反正很赞</p><p>　　37.the mass【无数的视频和ppt，喜欢用这首歌做背景音乐】电影：四平青年</p><pre><code>　　“the mass&quot;这首歌是由一个叫“era”的现代乐团所唱的。《the mass》传承了eric levi自首张专辑《era》起便汲汲经营的音乐特色，匠心独具的融合流行、摇滚及古典乐，经过截枝去叶后而产生简洁有力的音乐风格。为了超越经典，eric levi更撷取德国知名音乐家carl orff/卡尔·奥福最受盛赞的作品《carmina burana/布兰诗歌》，为首发同名单曲“the mass”的主体。听到的所谓《SS闪电部队在前进》其实并不是法国Era 乐队的《The Mass》，懂拉丁文的朋友可以看看，只能说是以讹传讹，要说两个有啥联系，就是它们都借鉴了中世纪的法国宗教歌曲。《The Mass》与德国武装党卫军第一装甲师的军歌《SS闪电部队在前进》并没有直接联系，这是怎么回事呢？《The Mass》原来《The Mass》的曲是来自于中世纪法国宗教歌曲。随着十八世纪法国在西欧的影响力与日俱增，法语流行于欧洲各国上流社会，法国音乐和歌曲也在德国广泛演奏与传唱。《SS闪电部队在前进》到20世纪30年代，德国著名作曲家卡尔·奥尔夫将其改编为著名史诗音乐剧《布兰诗歌》中的开场大合唱《哦！命运女神》。而希特勒也非常喜欢他的音乐，所以有可能把《哦！命运女神》的曲子作为了SS装甲掷弹师军歌的曲调，歌名就是《SS闪电部队在前进》。注：由于德军内军歌繁多，其实没有人证实过这就是元首掷弹师的军歌。张冠李戴法国《The Mass》与德国《Carmina Burana》（布兰诗歌）曲调接近，据说“二战期间德国武装党卫军第一装甲师军歌也改编于此”，导致调子相似而张冠李戴以为《The Mass》就是纳粹军歌。这个据说无从证实，但这样的解释从上下文的逻辑来看无疑是合理的。总之可以肯定的事实是：可能同曲，一定异工。或者说他们只是各自都从《Carmina Burana》吸取了一些元素。而据说真正的德国武装党卫军第一装甲师战歌叫Panzerlied，作者是Von Oblt.Wiehle。歌词大意空气布满紧张的气氛，大战即将来临，泪水划过母亲的脸庞，祖国就在身后，远方传来敌军的脚步声，大地在颤抖，是捍卫正义的时候了，热血早已澎湃，干枯树枝上最后一片树叶被寒风打落，闪电撕破了远处承重的黑幕，看，是SS部队在前进。无论面对风暴或是雪花，还是太阳对我们微笑；火热的白天，寒冷的夜晚，扑面的灰尘，但我们享受着这种乐趣，我们享受着这种乐趣。我们的坦克轰鸣向前，伴随着阵阵尘沙。当敌人的坦克露出踪影，我们加大油门全速向前！我们生命的价值，就是为了我们光荣的军队而战！为德国而死是至高的荣誉！伴随着雷鸣般的引擎，我们在坚实的装甲板后像闪电一般冲向敌人。与同志们一起向前，并肩战斗，这就是为什么我们能深扎进敌人的（坦克）队列。面对敌人所谓的屏障，我们给予轻蔑的嘲笑，然后简单的绕过；如果前面的黄砂之中，隐藏的是那炮火的威胁，我们就找寻自己的道路，跃上那冲向胜利的通途！如果我们为命运女神所抛弃，如果我们从此不能回到故乡如果子弹结束了我们的生命，如果我们在劫难逃，那至少我们忠实的坦克，会给我们一个金属的坟墓。</code></pre><p>　　38.burning(燃烧)电视剧：美女伤心 主题曲</p><p>　　burning，挪威歌手maria arredondo (玛丽亚·亚瑞唐多)的专辑名、同名歌曲，一首相当好听的英文女声歌曲，有一种令人如痴如醉的浪漫气氛，更带着些许哀伤之感</p><p>　　39.she is my sin(她是我的罪)</p><p>　　对cser们来说，nightwish的歌曲早已深入人心，众所皆知，世界不少顶级战队的宣传片都采用的是他们的歌曲，night wish的歌曲大都是重金属音乐，很多翻译版本的1.6进入界面就会响起这首歌，当你在游戏前更改各种按键设置的时候，这首歌仿佛预示着大战马上爆发，催促着你赶快进入cs，等着你的是各种激动人心的画面。在she is my sin出名后，因为其震撼的歌声，成为许多视频或集锦的音乐。就好像the dawn被传成是亡灵序曲一个道理。此歌后来被世界电子竞技大赛(wcg)定为比赛歌曲.</p><p>但是这首she is my sin不是1.6版cs的主题曲在正版的cs中没有任何背景音乐,音乐是网上流传的破解版盗版中后加入的。</p><p>　　40.love to be loved by you(喜欢被你所爱)</p><p>　　《love to be loved by you》是一首旋律优美的英文歌曲，演唱者是美国流行歌手马克·特伦茨(marc terenzi)。XX年，marc与德国歌手莎拉·寇娜(sarah connor)结婚时，将这首歌作为爱的礼物献给妻子。marc凭借此曲迅速在德国以及欧美走红，单曲强势占领XX德国排行榜亚军，抢攻欧洲流行单曲榜top 10</p><p>　　41.she’s gone(她走了)</p><p>　　当时第一次听的时候，刚好失恋，听到它的时候那感觉别提多心酸了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/union-operation/"/>
      <url>/blog/2019/06/12/DB/mysql/union-operation/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql-UNION操作符"><a href="#mysql-UNION操作符" class="headerlink" title="mysql UNION操作符"></a>mysql UNION操作符</h2><p><a href="README.md">目录</a></p><blockquote><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</p></blockquote><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT expression1, expression2, ... expression_n</span><br><span class="line">FROM tables</span><br><span class="line">[WHERE conditions]</span><br><span class="line">UNION [ALL | DISTINCT]</span><br><span class="line">SELECT expression1, expression2, ... expression_n</span><br><span class="line">FROM tables</span><br><span class="line">[WHERE conditions];</span><br></pre></td></tr></table></figure><p>参数</p><ul><li><code>expression1, expression2, ... expression_n:</code> 要检索的列。</li><li><code>tables:</code> 要检索的数据表。</li><li><code>WHERE conditions:</code> 可选， 检索条件。</li><li><code>DISTINCT:</code> 可选，删除结果集中重复的数据。默认情况下 <code>UNION</code> 操作符已经删除了重复数据，所以 <code>DISTINCT</code> 修饰符对结果没啥影响。</li><li><code>ALL:</code> 可选，返回所有结果集，包含重复数据。</li></ul><p><strong>创建演示数据库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"># 创建 Website 表</span><br><span class="line">mysql&gt; CREATE TABLE IF NOT EXISTS `Websites`(</span><br><span class="line">   `Websites_id` INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">   `Websites_name` VARCHAR(100) NOT NULL,</span><br><span class="line">   `Websites_url` VARCHAR(80) NOT NULL,</span><br><span class="line">   `Websites_alexa` VARCHAR(100) NOT NULL,</span><br><span class="line">   `Websites_country` VARCHAR(100) NOT NULL,</span><br><span class="line">   PRIMARY KEY ( `Websites_id` )</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line">mysql&gt; INSERT INFO Websites</span><br><span class="line">(Websites_name, Websites_url, Websites_alexa, Websites_country)</span><br><span class="line">VALUES</span><br><span class="line">(&quot;Google&quot;, &quot;https://www.google.com&quot;, 1, &quot;USE&quot;),</span><br><span class="line">(&quot;淘宝&quot;, &quot;https://www.taobao.com&quot;, 13, &quot;CN&quot;),</span><br><span class="line">(&quot;菜鸟教程&quot;, &quot;https://www.runoob.com&quot;, 4689, &quot;CN&quot;),</span><br><span class="line">(&quot;GitHub&quot;, &quot;https://github.com&quot;, 20, &quot;USN&quot;),</span><br><span class="line">(&quot;Facebook&quot;, &quot;https://www.facebook.com&quot;, 3, &quot;USN&quot;),</span><br><span class="line">(&quot;stackoverflow&quot;, &quot;https://stackoverflow.com&quot;, 0, &quot;IND&quot;);</span><br><span class="line"></span><br><span class="line"># 查看数据</span><br><span class="line">mysql&gt; SELECT * FROM Websites;</span><br><span class="line">+----+------------------+---------------------------+----------------+------------------+</span><br><span class="line">| id | Websites_name    | Websites_url  | Websites_alexa | Websites_country |</span><br><span class="line">+----+------------------+---------------------------+----------------+------------------+</span><br><span class="line">| 1  | Google       | https://www.google.cm/    | 1      | USA     |</span><br><span class="line">| 2  | 淘宝         | https://www.taobao.com/   | 13     | CN      |</span><br><span class="line">| 3  | 菜鸟教程     | http://www.runoob.com/    | 4689   | CN      |</span><br><span class="line">| 4  | 微博         | http://weibo.com/         | 20     | CN      |</span><br><span class="line">| 5  | Facebook     | https://www.facebook.com/ | 3      | USA     |</span><br><span class="line">| 7  | stackoverflow | http://stackoverflow.com/ | 0  | IND     |</span><br><span class="line">+----+------------------+---------------------------+----------------+------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建 app 表</span><br><span class="line">mysql&gt; CREATE TABLE IF NOT EXISTS `apps`(</span><br><span class="line">   `apps_id` INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">   `apps_name` VARCHAR(100) NOT NULL,</span><br><span class="line">   `apps_url` VARCHAR(80) NOT NULL,</span><br><span class="line">   `apps_country` VARCHAR(100) NOT NULL,</span><br><span class="line">   PRIMARY KEY ( `apps_id` )</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line">mysql&gt; INSERT INFO apps</span><br><span class="line">(apps_id, apps_name, apps_url, apps_country)</span><br><span class="line">VALUES</span><br><span class="line">(&quot;QQ APP&quot;, &quot;https://im.qq.com&quot;, &quot;CN&quot;),</span><br><span class="line">(&quot;微博 APP&quot;, &quot;https://weibo.com&quot;, &quot;CN&quot;),</span><br><span class="line">(&quot;淘宝 APP&quot;, &quot;https://taobao.com&quot;, &quot;CN&quot;);</span><br><span class="line"></span><br><span class="line"># 查看数据</span><br><span class="line">mysql&gt; SELECT * FROM apps;</span><br><span class="line">+----+--------------+---------------------------+---------------+</span><br><span class="line">| id | apps_name   | apps_url                  | apps_country |</span><br><span class="line">+----+--------------+---------------------------+---------------+</span><br><span class="line">|  1 | QQ APP     | http://im.qq.com/       | CN      |</span><br><span class="line">|  2 | 微博 APP | http://weibo.com/       | CN      |</span><br><span class="line">|  3 | 淘宝 APP | https://www.taobao.com/ | CN      |</span><br><span class="line">+----+--------------+---------------------------+---------------+</span><br></pre></td></tr></table></figure><p><strong>mysql UNION 实例</strong></p><blockquote><p>下面的 SQL 语句从 “Websites” 和 “apps” 表中选取所有不同的country（只有不同的值）：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT apps_country FROM Websites</span><br><span class="line">UNION</span><br><span class="line">SELECT apps_country FROM apps</span><br><span class="line">ORDER BY apps_country;</span><br><span class="line">+---------------+</span><br><span class="line">| apps_country |</span><br><span class="line">+---------------+</span><br><span class="line">| CN      |</span><br><span class="line">| IND      |</span><br><span class="line">| USA      |</span><br><span class="line">+---------------+</span><br></pre></td></tr></table></figure><p><strong>注释：</strong> <code>UNION</code> 不能用于列出两个表中所有的<code>apps_country</code>。如果一些网站和APP来自同一个国家，每个国家只会列出一次。<code>UNION</code> 只会选取不同的值。请使用 <code>UNION ALL</code> 来选取重复的值！</p><p><strong>mysql UNION ALL 实例</strong></p><blockquote><p>下面的 <code>SQL</code> 语句使用 <code>UNION ALL</code> 从 <code>&quot;Websites&quot;</code> 和 <code>&quot;apps&quot;</code> 表中选取所有的<code>apps_country</code>（也有重复的值）：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SELECT apps_country FROM Websites</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT apps_country FROM apps</span><br><span class="line">ORDER BY apps_country;</span><br><span class="line">+---------------+</span><br><span class="line">| apps_country |</span><br><span class="line">+---------------+</span><br><span class="line">| CN      |</span><br><span class="line">| CN      |</span><br><span class="line">| CN      |</span><br><span class="line">| CN      |</span><br><span class="line">| CN      |</span><br><span class="line">| IND      |</span><br><span class="line">| USA      |</span><br><span class="line">| USA      |</span><br><span class="line">| USA      |</span><br><span class="line">+---------------+</span><br></pre></td></tr></table></figure><p><strong>带有 WHERE 的 SQL UNION ALL 实例</strong></p><blockquote><p>下面的 <code>SQL</code> 语句使用 <code>UNION ALL</code> 从 <code>&quot;Websites&quot;</code> 和 <code>&quot;apps&quot;</code> 表中选取所有的中国(CN)的数据（也有重复的值）：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SELECT country, name FROM Websites</span><br><span class="line">WHERE country=&apos;CN&apos;</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT country, app_name FROM apps</span><br><span class="line">WHERE country=&apos;CN&apos;</span><br><span class="line">ORDER BY country;</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| apps_country |apps_name  |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| CN      |淘宝     |</span><br><span class="line">| CN      |QQ APP     |</span><br><span class="line">| CN      |菜鸟教程   |</span><br><span class="line">| CN      |微博 APP   |</span><br><span class="line">| CN      |微博  |</span><br><span class="line">| CN      |淘宝 APP |</span><br><span class="line">+---------------+-----------+</span><br></pre></td></tr></table></figure><p><a href="where-clause.md" style="float: right;">&lt;—— mysql where语句</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/where-like-update-delete/"/>
      <url>/blog/2019/06/12/DB/mysql/where-like-update-delete/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql-WHERE-LIKE子句-UPDATE修改-DELETE删除"><a href="#Mysql-WHERE-LIKE子句-UPDATE修改-DELETE删除" class="headerlink" title="Mysql WHERE LIKE子句 UPDATE修改 DELETE删除"></a>Mysql WHERE LIKE子句 UPDATE修改 DELETE删除</h2><p><a href="README.md">目录</a></p><h3 id="mysql-WHERE子句-过滤条件"><a href="#mysql-WHERE子句-过滤条件" class="headerlink" title="mysql WHERE子句(过滤条件)"></a>mysql WHERE子句(过滤条件)</h3><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN FROM table_name1, table_name2...</span><br><span class="line">[WHERE condition1 [AND [OR]] condition2.....;</span><br></pre></td></tr></table></figure><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号, 分割，并使用<code>WHERE</code>语句来设定查询条件。</li><li>你可以在 <code>WHERE</code> 子句中指定任何条件。</li><li>你可以使用 <code>AND</code> 或者 <code>OR</code> 指定一个或多个条件。</li><li><code>WHERE</code> 子句也可以运用于 <code>SQL</code> 的 <code>DELETE</code> 或者 <code>UPDATE</code> 命令。</li><li><code>WHERE</code> 子句类似于程序语言中的 <code>if</code> 条件，根据 <code>MySQL</code> 表中的字段值来读取指定的数据。</li></ul><p><em>以下为操作符列表，可用于 <code>WHERE</code> 子句中。</em></p><p><strong>下表中实例假定 A 为 10, B 为 20</strong></p><table><thead><tr><th>操作符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td><code>=</code></td><td>等号，检测两个值是否相等，如果相等返回true</td><td>(A = B) 返回false。</td></tr><tr><td><code>&lt;&gt;, !=</code></td><td>不等于，检测两个值是否相等，如果不相等返回true</td><td>(A != B) 返回 true。</td></tr><tr><td><code>&gt;</code></td><td>大于号，检测左边的值是否大于右边的值, 如果左边的值大于右边的值返回true</td><td>(A &gt; B) 返回false。</td></tr><tr><td><code>&lt;</code></td><td>小于号，检测左边的值是否小于右边的值, 如果左边的值小于右边的值返回true</td><td>(A &lt; B) 返回 true。</td></tr><tr><td><code>&gt;=</code></td><td>大于等于号，检测左边的值是否大于或等于右边的值, 如果左边的值大于或等于右边的值返回true</td><td>(A &gt;= B) 返回false。</td></tr><tr><td><code>&lt;=</code></td><td>小于等于号，检测左边的值是否小于于或等于右边的值, 如果左边的值小于或等于右边的值返回true</td><td>(A &lt;= B) 返回 true。</td></tr></tbody></table><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from runoob_tbl WHERE runoob_author=&apos;菜鸟教程&apos;;</span><br><span class="line">+---------+--------------+--------------+-----------------+</span><br><span class="line">| test_id | test_title   | test_author  | submission_date |</span><br><span class="line">+---------+--------------+--------------+-----------------+</span><br><span class="line">|       1 | 学习 PHP     | 菜鸟教程     | 2018-03-07      |</span><br><span class="line">|       2 | 学习 MySQL   | 菜鸟教程     | 2018-03-07      |</span><br><span class="line">+---------+--------------+--------------+-----------------+</span><br></pre></td></tr></table></figure><blockquote><p>MySQL 的 <code>WHERE</code> 子句的字符串比较是 <strong>不区分大小</strong> 写的。 你可以使用 <code>BINARY</code> 关键字来设定 <code>WHERE</code> 子句的字符串比较是区分大小写的。</p></blockquote><p><strong>BINARY 关键字</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_tbl where binary test_title=&quot;学习 php&quot;;# 小写，查不到数据</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test_tbl where binary test_title=&quot;学习 PHP&quot;;# 大写，能查到数据</span><br><span class="line">+---------+------------+--------------+-----------------+</span><br><span class="line">| test_id | test_title | test_author  | submission_date |</span><br><span class="line">+---------+------------+--------------+-----------------+</span><br><span class="line">|       1 | 学习 PHP   | 菜鸟教程     | 2018-03-07      |</span><br><span class="line">+---------+------------+--------------+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>实例中使用了 <code>BINARY</code> 关键字，是 <strong>区分大小写</strong> 的，所以 <code>runoob_author=&#39;runoob.com&#39;</code> 的查询条件是没有数据的。</p><h3 id="mysql-UPDATE（修改）"><a href="#mysql-UPDATE（修改）" class="headerlink" title="mysql UPDATE（修改）"></a>mysql UPDATE（修改）</h3><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name SET field1=new-value1, field2=new-value2</span><br><span class="line">[WHERE Clause]</span><br></pre></td></tr></table></figure><ul><li>你可以同时更新一个或多个字段。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以在一个单独表中同时更新数据。</li></ul><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update test_tbl set test_title=&quot;学习 C++&quot; where test_id=2;# 修改test_title=2行的test_title=&quot;学习 C++&quot;</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test_tbl where test_id=2;# 查询test_title=2行的数据</span><br><span class="line">+---------+------------+--------------+-----------------+</span><br><span class="line">| test_id | test_title | test_author  | submission_date |</span><br><span class="line">+---------+------------+--------------+-----------------+</span><br><span class="line">|       2 | 学习 C++   | 菜鸟教程     | 2018-03-07      |</span><br><span class="line">+---------+------------+--------------+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="mysql-DELETE（删除）"><a href="#mysql-DELETE（删除）" class="headerlink" title="mysql DELETE（删除）"></a>mysql DELETE（删除）</h3><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name [WHERE Clause]</span><br></pre></td></tr></table></figure><ul><li>如果没有指定 <code>WHERE</code> 子句，<code>MySQL</code> 表中的所有记录将被删除。</li><li>你可以在 <code>WHERE</code> 子句中指定任何条件</li><li>您可以在单个表中一次性删除记录。</li></ul><p>实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use test;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; DELETE FROM test_tbl WHERE test_id=3;</span><br><span class="line">Query OK, 1 row affected (0.23 sec)</span><br></pre></td></tr></table></figure></p><p>笔记<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># delete 语句用于删除表中的数据, 基本用法为:</span><br><span class="line">delete from 表名称 where 删除条件;</span><br><span class="line"></span><br><span class="line"># 以下是在表 students 中的实例:</span><br><span class="line"># 删除 id 为 3 的行:</span><br><span class="line">delete from students where id=3;</span><br><span class="line"># 删除所有年龄小于 21 岁的数据:</span><br><span class="line">delete from students where age&lt;20;</span><br><span class="line"># 删除表中的所有数据:</span><br><span class="line">delete from students;</span><br></pre></td></tr></table></figure></p><h3 id="mysql-like"><a href="#mysql-like" class="headerlink" title="mysql like"></a>mysql like</h3><p><code>SQL LIKE</code> 子句中使用百分号 %字符来表示任意字符，类似于<code>UNIX</code>或正则表达式中的星号 <code>*</code>。<br>如果没有使用百分号 <code>%</code>, <code>LIKE</code> 子句与等号 <code>=</code> 的效果是一样的。</p><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE field1 LIKE condition1 [AND [OR]] filed2 = &apos;somevalue&apos;</span><br></pre></td></tr></table></figure><ul><li>你可以在 <code>WHERE</code> 子句中指定任何条件。</li><li>你可以在 <code>WHERE</code> 子句中使用LIKE子句。</li><li>你可以使用<code>LIKE</code>子句代替等号 <code>=</code>。</li><li><code>LIKE</code> 通常与 <code>%</code> 一同使用，类似于一个元字符的搜索。</li><li>你可以使用 <code>AND</code>或者 <code>OR</code> 指定一个或多个条件。</li><li>你可以在 <code>DELETE</code> 或 <code>UPDATE</code> 命令中使用 <code>WHERE...LIKE</code> 子句来指定条件。</li></ul><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_tbl where test_title like &apos;学习%&apos;;</span><br><span class="line">+---------+------------------+--------------+-----------------+</span><br><span class="line">| test_id | test_title       | test_author  | submission_date |</span><br><span class="line">+---------+------------------+--------------+-----------------+</span><br><span class="line">|       1 | 学习 PHP         | 菜鸟教程     | 2018-03-07      |</span><br><span class="line">|       2 | 学习 C++         | 菜鸟教程     | 2018-03-07      |</span><br><span class="line">|       4 | 学习nodejs       | cnode社区    | 2018-03-08      |</span><br><span class="line">|       5 | 学习vue          | vue官网      | 2018-03-08      |</span><br><span class="line">|       6 | 学习javaScript   | MSDN         | 2018-03-08      |</span><br><span class="line">+---------+------------------+--------------+-----------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><a href="union-operation.md" style="float: right;">&lt;—— mysql UNION操作符</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/redis/Linux-Redis-install-and-run/"/>
      <url>/blog/2019/06/12/DB/redis/Linux-Redis-install-and-run/</url>
      
        <content type="html"><![CDATA[<h1 id="redis-安装-配置-amp-amp-运行"><a href="#redis-安装-配置-amp-amp-运行" class="headerlink" title="redis 安装 配置&amp;&amp; 运行"></a>redis 安装 配置&amp;&amp; 运行</h1><p>下载<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com//antirez/redis/archive/4.0.1.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxf 4.0.1.tar.gz</span><br></pre></td></tr></table></figure></p><p>安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./redis-4.0.1</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">./utils/install_server.sh <span class="comment"># 6下回车</span></span><br></pre></td></tr></table></figure></p><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><p>关闭redis<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli shutdown</span><br></pre></td></tr></table></figure></p><p>启动服务器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-server ./redis.conf</span><br><span class="line">redis-server ./redis.conf&amp;  <span class="comment">#加上`&amp;`可以使Redis-server在后台运行</span></span><br></pre></td></tr></table></figure></p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><details><br>  <summary>配置</summary><br><img src="/blog/.io//reids-config-dir.png" alt="redis 配置"><br></details><p>访问Redis</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接输入redis-cli， 默认是127.0.0.1：6379，无密码</span></span><br><span class="line"><span class="comment"># 注： 守护进程的默认端口是26379，无密码</span></span><br><span class="line">redis-cli -h 服务器的ip -p 端口 -a 密码</span><br><span class="line">ping</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/transaction/"/>
      <url>/blog/2019/06/12/DB/mysql/transaction/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql-transaction事务"><a href="#mysql-transaction事务" class="headerlink" title="mysql transaction事务"></a>mysql transaction事务</h2><p><a href="README.md">目录</a></p><blockquote><p>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p></blockquote><ul><li>在 <code>MySQL</code> 中只有使用了 <code>Innodb</code> 数据库引擎的数据库或表才支持事务。</li><li>事务处理可以用来维护数据库的完整性，保证成批的 <code>SQL</code> 语句要么全部执行，要么全部不执行。</li><li>事务用来管理 <code>insert</code>,<code>update</code>,<code>delete</code> 语句</li></ul><blockquote><p>一般来说，事务是必须满足4个条件（ACID）：<strong>原子性（Atomicity，或称不可分割性）、</strong> <strong>一致性（Consistency）、</strong> <strong>隔离性（Isolation，又称独立性）、</strong> <strong>持久性（Durability）</strong>。</p></blockquote><ul><li><p><strong>原子性：</strong> 一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p></li><li><p><strong>一致性：</strong> 在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</p></li><li><p><strong>隔离性：</strong> 数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</p></li><li><p><strong>持久性：</strong> 事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p></li></ul><p><em>在 <code>MySQL</code> 命令行的默认设置下，事务都是自动提交的，即执行 <code>SQL</code> 语句后就会马上执行 <code>COMMIT</code> 操作。因此要显式地开启一个事务务须使用命令 <code>BEGIN</code> 或 <code>START TRANSACTION</code>，或者执行命令 <code>SET AUTOCOMMIT=0</code>，用来禁止使用当前会话的自动提交。</em></p><p><strong>事务控制语句：</strong></p><ul><li><strong>BEGIN或START TRANSACTION；</strong> 显式地开启一个事务；</li><li><strong>COMMIT；</strong> 也可以使用<code>COMMIT WORK</code>，不过二者是等价的。<code>COMMIT</code>会提交事务，并使已对数据库进行的所有修改称为永久性的；</li><li><strong>ROLLBACK；</strong> 有可以使用<code>ROLLBACK WORK</code>，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</li><li><strong>SAVEPOINT identifier；</strong> <code>SAVEPOINT</code>允许在事务中创建一个保存点，一个事务中可以有多个<code>SAVEPOINT</code>；</li><li><strong>RELEASE SAVEPOINT identifier；</strong> 删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</li><li><strong>ROLLBACK TO identifier；</strong> 把事务回滚到标记点；</li><li><strong>SET TRANSACTION；</strong> 用来设置事务的隔离级别。<code>InnoDB</code>存储引擎提供事务的隔离级别有<code>READ UNCOMMITTED</code>、<code>READ COMMITTED</code>、<code>REPEATABLE READ</code>和<code>SERIALIZABLE</code>。</li></ul><p>MYSQL 事务处理主要有两种方法：</p><p>1、用 BEGIN, ROLLBACK, COMMIT来实现</p><ul><li><strong>BEGIN</strong> 开始一个事务</li><li><strong>ROLLBACK</strong> 事务回滚</li><li><strong>COMMIT</strong> 事务确认</li></ul><p>2、直接用 SET 来改变 MySQL 的自动提交模式:</p><ul><li><strong>SET AUTOCOMMIT=0</strong> 禁止自动提交</li><li><strong>SET AUTOCOMMIT=1</strong> 开启自动提交</li></ul><p>事务示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use test;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; CREATE TABLE test_transaction( id int(5)) engine=innodb# 创建数据表</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test_transaction;# 查询数据</span><br><span class="line">Empty set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; begin;# 开始事务</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into test_transaction value(5);# 插入数据</span><br><span class="line">Query OK, 1 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into test_transaction value(6);# 插入数据</span><br><span class="line">Query OK, 1 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; commit;# 提交事务</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test_transaction;# 查询数据</span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">| 5    |</span><br><span class="line">| 6    |</span><br><span class="line">+------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; begin;# 开始事务</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into test_transaction values(7);# 插入数据</span><br><span class="line">Query OK, 1 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; rollback;# 事物回滚</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from test_transaction;# 因为回滚所以数据没有插入</span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">| 5    |</span><br><span class="line">| 6    |</span><br><span class="line">+------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p><a href="alter.md" style="float: right;">&lt;—— mysql alter(修改数据表名,修改数据表字段)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/using-sequences/"/>
      <url>/blog/2019/06/12/DB/mysql/using-sequences/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql-序列使用"><a href="#Mysql-序列使用" class="headerlink" title="Mysql 序列使用"></a>Mysql 序列使用</h2><p><a href="README.md">目录</a></p><blockquote><p>MySQL序列是一组整数：1, 2, 3, …，由于一张数据表只能有一个字段自增主键,如果你想实现其他字段也实现自动增加，就可以使用MySQL序列来实现。</p></blockquote><h3 id="使用AUTO-INCREMENT"><a href="#使用AUTO-INCREMENT" class="headerlink" title="使用AUTO_INCREMENT"></a>使用AUTO_INCREMENT</h3><p>MySQL中最简单使用序列的方法就是使用 MySQL <code>AUTO_INCREMEN</code> 来定义列。</p><p><strong>实例</strong></p><p>以下实例中创建了数据表<code>insect</code>, <code>insect</code>中<code>id</code>无需指定值可实现自动增长。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE insect(</span><br><span class="line">    id INT UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">    PRIMARY KEY (id),</span><br><span class="line">    name VARCHAR(30) NOT NULL,# type of insect</span><br><span class="line">    date DATE NOT NULL,# date collected</span><br><span class="line">    origin VARCHAR(30) NOT NULL# where collected</span><br><span class="line">);</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line">mysql&gt; INSERT INTO insect (id,name,date,origin) VALUES</span><br><span class="line">     (NULL,&apos;housefly&apos;,&apos;2001-09-10&apos;,&apos;kitchen&apos;),</span><br><span class="line">     (NULL,&apos;millipede&apos;,&apos;2001-09-10&apos;,&apos;driveway&apos;),</span><br><span class="line">     (NULL,&apos;grasshopper&apos;,&apos;2001-09-10&apos;,&apos;front yard&apos;);</span><br><span class="line">Query OK, 3 rows affected (0.02 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line">mysql&gt; SELECT * FROM insect ORDER BY id;</span><br><span class="line">+----+-------------+------------+------------+</span><br><span class="line">| id | name        | date       | origin     |</span><br><span class="line">+----+-------------+------------+------------+</span><br><span class="line">|  1 | housefly    | 2001-09-10 | kitchen    |</span><br><span class="line">|  2 | millipede   | 2001-09-10 | driveway   |</span><br><span class="line">|  3 | grasshopper | 2001-09-10 | front yard |</span><br><span class="line">+----+-------------+------------+------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="获取AUTO-INCREMENT值"><a href="#获取AUTO-INCREMENT值" class="headerlink" title="获取AUTO_INCREMENT值"></a>获取AUTO_INCREMENT值</h3><p>在MySQL的客户端中你可以使用 SQL中的LAST_INSERT_ID( ) 函数来获取最后的插入表中的自增列的值。<br>在PHP或PERL脚本中也提供了相应的函数来获取最后的插入表中的自增列的值。</p><p><strong>PERL实例</strong></p><p>使用 mysql_insertid 属性来获取 AUTO_INCREMENT 的值。 实例如下：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$dbh-&gt;<span class="keyword">do</span> (<span class="string">"INSERT INTO insect (name,date,origin)</span></span><br><span class="line"><span class="string">VALUES('moth','2001-09-14','windowsill')"</span>);</span><br><span class="line"><span class="keyword">my</span> $seq = $dbh-&gt;&#123;mysql_insertid&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>PHP实例</strong></p><p>PHP 通过 mysql_insert_id ()函数来获取执行的插入SQL语句中 AUTO_INCREMENT列的值。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql_query (<span class="string">"INSERT INTO insect (name,date,origin)</span></span><br><span class="line"><span class="string">VALUES('moth','2001-09-14','windowsill')"</span>, $conn_id);</span><br><span class="line">$seq = mysql_insert_id ($conn_id);</span><br></pre></td></tr></table></figure></p><h3 id="重置序列"><a href="#重置序列" class="headerlink" title="重置序列"></a>重置序列</h3><p>如果你删除了数据表中的多条记录，并希望对剩下数据的AUTO_INCREMENT列进行重新排列，那么你可以通过删除自增的列，然后重新添加来实现。 不过该操作要非常小心，如果在删除的同时又有新记录添加，有可能会出现数据混乱。操作如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE insect DROP id;</span><br><span class="line">Query OK, 3 rows affected (0.01 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; ALTER TABLE insect</span><br><span class="line">ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST,</span><br><span class="line">ADD PRIMARY KEY (id);</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure></p><h3 id="设置序列的开始值"><a href="#设置序列的开始值" class="headerlink" title="设置序列的开始值"></a>设置序列的开始值</h3><p>一般情况下序列的开始值为<code>1</code>，但如果你需要指定一个开始值<code>100</code>，那我们可以通过以下语句来实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE insect(</span><br><span class="line">     id INT UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">     PRIMARY KEY (id),</span><br><span class="line">     name VARCHAR(30) NOT NULL,</span><br><span class="line">     date DATE NOT NULL,</span><br><span class="line">     origin VARCHAR(30) NOT NULL</span><br><span class="line">)engine=innodb auto_increment=100 charset=utf8;</span><br></pre></td></tr></table></figure></p><p>或者你也可以在表创建成功后，通过以下语句来实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE t AUTO_INCREMENT = 100;</span><br></pre></td></tr></table></figure></p><p><a href="handling-duplicates.md" style="float: right;">&lt;—— mysql 处理重复</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/temporary-tables/"/>
      <url>/blog/2019/06/12/DB/mysql/temporary-tables/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql-临时表"><a href="#Mysql-临时表" class="headerlink" title="Mysql 临时表"></a>Mysql 临时表</h2><p><a href="README.md">目录</a></p><blockquote><p><code>MySQL</code> 临时表在我们需要保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，<code>Mysql</code>会自动删除表并释放所有空间。临时表在<code>MySQL 3.23</code>版本中添加</p></blockquote><blockquote><p><code>MySQL</code>临时表只在当前连接可见，如果你使用<code>nodejs</code>脚本来创建<code>MySQL</code>临时表，那每当<code>nodejs</code>脚本执行完成后，该临时表也会自动销毁。</p></blockquote><blockquote><p>如果你使用了其他<code>MySQL</code>客户端程序连接<code>MySQL</code>数据库服务器来创建临时表，那么只有在关闭客户端程序时才会销毁临时表，当然你也可以手动销毁。</p></blockquote><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TEMPORARY TABLE SalesSummary (</span><br><span class="line">     product_name VARCHAR(50) NOT NULL</span><br><span class="line">     , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00</span><br><span class="line">     , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00</span><br><span class="line">     , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO SalesSummary</span><br><span class="line">     (product_name, total_sales, avg_unit_price, total_units_sold)</span><br><span class="line">     VALUES</span><br><span class="line">     (&apos;cucumber&apos;, 100.25, 90, 2);</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM SalesSummary;</span><br><span class="line">+--------------+-------------+----------------+------------------+</span><br><span class="line">| product_name | total_sales | avg_unit_price | total_units_sold |</span><br><span class="line">+--------------+-------------+----------------+------------------+</span><br><span class="line">| cucumber     |      100.25 |          90.00 |                2 |</span><br><span class="line">+--------------+-------------+----------------+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>当你使用 <code>SHOW TABLES</code>命令显示数据表列表时，你将无法看到 <code>SalesSummary</code>表。<br>如果你退出当前<code>MySQL</code>会话，再使用 <code>SELECT</code> 命令来读取原先创建的临时表数据，那你会发现数据库中没有该表的存在，因为在你退出时该临时表已经被销毁了。</p><h3 id="删除MySQL-临时表"><a href="#删除MySQL-临时表" class="headerlink" title="删除MySQL 临时表"></a>删除MySQL 临时表</h3><p>默认情况下，当你断开与数据库的连接后，临时表就会自动被销毁。当然你也可以在当前MySQL会话使用 <code>DROP TABLE</code> 命令来手动删除临时表。</p><p>以下是手动删除临时表的实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TEMPORARY TABLE SalesSummary (</span><br><span class="line">     product_name VARCHAR(50) NOT NULL</span><br><span class="line">     , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00</span><br><span class="line">     , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00</span><br><span class="line">     , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO SalesSummary</span><br><span class="line">     (product_name, total_sales, avg_unit_price, total_units_sold)</span><br><span class="line">     VALUES</span><br><span class="line">     (&apos;cucumber&apos;, 100.25, 90, 2);</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM SalesSummary;</span><br><span class="line">+--------------+-------------+----------------+------------------+</span><br><span class="line">| product_name | total_sales | avg_unit_price | total_units_sold |</span><br><span class="line">+--------------+-------------+----------------+------------------+</span><br><span class="line">| cucumber     |      100.25 |          90.00 |                2 |</span><br><span class="line">+--------------+-------------+----------------+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DROP TABLE SalesSummary;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM SalesSummary;</span><br><span class="line">ERROR 1146: Table &apos;RUNOOB.SalesSummary&apos; doesn&apos;t exist</span><br></pre></td></tr></table></figure></p><p><a href="clone-tables.md" style="float: right;">&lt;—— mysql 复制表</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/sql-injection/"/>
      <url>/blog/2019/06/12/DB/mysql/sql-injection/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql-sql注入"><a href="#Mysql-sql注入" class="headerlink" title="Mysql sql注入"></a>Mysql sql注入</h2><p><a href="README.md">目录</a></p><blockquote><p>所谓SQL注入，就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p></blockquote><p>以下实例中，输入的用户名必须为字母、数字及下划线的组合，且用户名长度为 8 到 20 个字符之间：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/^\w&#123;8,20&#125;$/"</span>, $_GET[<span class="string">'username'</span>], $matches))</span><br><span class="line">&#123;</span><br><span class="line">   $result = mysqli_query($conn, <span class="string">"SELECT * FROM users</span></span><br><span class="line"><span class="string">                          WHERE username=$matches[0]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"username 输入异常"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在没有过滤特殊字符时，出现的SQL情况：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设定$name 中插入了我们不需要的SQL语句</span></span><br><span class="line">$name = <span class="string">"Qadir'; DELETE FROM users;"</span>;</span><br><span class="line">mysqli_query($conn, <span class="string">"SELECT * FROM users WHERE name='&#123;$name&#125;'"</span>);</span><br></pre></td></tr></table></figure></p><p><em>以上的注入语句中，我们没有对 $name 的变量进行过滤，$name 中插入了我们不需要的SQL语句，将删除 users 表中的所有数据。</em></p><p>在PHP中的 mysqli_query() 是不允许执行多个 SQL 语句的，但是在 SQLite 和 PostgreSQL 是可以同时执行多条SQL语句的，所以我们对这些用户的数据需要进行严格的验证。</p><p>防止SQL注入，我们需要注意以下几个要点：</p><ul><li>1.永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和 双”-“进行转换等。</li><li>2.永远不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取。</li><li>3.永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</li><li>4.不要把机密信息直接存放，加密或者hash掉密码和敏感的信息。</li><li>5.应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装</li><li>6.sql注入的检测方法一般采取辅助软件或网站平台来检测，软件一般采用sql注入检测工具<code>jsky</code>，网站平台就有亿思网站安全平台检测工具。<code>MDCSOFT</code> <code>SCAN</code>等。采用<code>MDCSOFT-IPS</code>可以有效的防御<code>SQL注入</code>，<code>XSS</code>攻击等。</li></ul><h3 id="防止SQL注入"><a href="#防止SQL注入" class="headerlink" title="防止SQL注入"></a>防止SQL注入</h3><p>PHP的MySQL扩展提供了<code>mysqli_real_escape_string()</code>函数来转义特殊的输入字符。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (get_magic_quotes_gpc())</span><br><span class="line">&#123;</span><br><span class="line">  $name = stripslashes($name);</span><br><span class="line">&#125;</span><br><span class="line">$name = mysqli_real_escape_string($conn, $name);</span><br><span class="line">mysqli_query($conn, <span class="string">"SELECT * FROM users WHERE name='&#123;$name&#125;'"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="Like语句中的注入"><a href="#Like语句中的注入" class="headerlink" title="Like语句中的注入"></a>Like语句中的注入</h3><p><code>like</code>查询时，如果用户输入的值有<code>&quot;_&quot;</code>和<code>&quot;%&quot;</code>，则会出现这种情况：用户本来只是想查询<code>&quot;abcd_&quot;</code>，查询结果中却有<code>&quot;abcd_&quot;、&quot;abcde&quot;、&quot;abcdf&quot;</code>等等；用户要查询<code>&quot;30%&quot;</code>（注：百分之三十）时也会出现问题。</p><p>在PHP脚本中我们可以使用<code>addcslashes()</code>函数来处理以上情况，如下实例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sub = addcslashes(mysqli_real_escape_string($conn, <span class="string">"%something_"</span>), <span class="string">"%_"</span>);</span><br><span class="line"><span class="comment">// $sub == \%something\_</span></span><br><span class="line"> mysqli_query($conn, <span class="string">"SELECT * FROM messages WHERE subject LIKE '&#123;$sub&#125;%'"</span>);</span><br></pre></td></tr></table></figure></p><p><code>addcslashes()</code> 函数在指定的字符前添加反斜杠。</p><p>语法格式:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addcslashes(string,characters)</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。规定要检查的字符串。</td></tr><tr><td>characters</td><td>可选。规定受 addcslashes() 影响的字符或字符范围。</td></tr></tbody></table><p><a href="database-export.md" style="float: right;">&lt;—— mysql 导出数据</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/index/"/>
      <url>/blog/2019/06/12/DB/mysql/index/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql-index索引"><a href="#Mysql-index索引" class="headerlink" title="Mysql index索引"></a>Mysql index索引</h2><p><a href="README.md">目录</a></p><blockquote><p>MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。</p></blockquote><blockquote><p>打个比方，如果合理的设计且使用索引的<code>MySQL</code>是一辆兰博基尼的话，那么没有设计和使用索引的<code>MySQL</code>就是一个人力三轮车。</p></blockquote><blockquote><p>索引分 <strong>单列索引</strong> 和 <strong>组合索引</strong> 。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。</p></blockquote><blockquote><p>创建索引时，你需要确保该索引是应用在 <code>SQL</code> 查询语句的条件(一般作为 <code>WHERE</code> 子句的条件)。</p></blockquote><blockquote><p>实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。</p></blockquote><blockquote><p>上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行<code>INSERT</code>、<code>UPDATE和DELETE</code>。因为更新表时，<code>MySQL</code>不仅要保存数据，还要保存一下索引文件。</p></blockquote><blockquote><p>建立索引会占用磁盘空间的索引文件。</p></blockquote><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><p><strong>创建索引</strong></p><p>这是最基本的索引，它没有任何限制。它有以下几种创建方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX indexName ON mytable(username(length));</span><br></pre></td></tr></table></figure></p><p>如果是<code>CHAR</code>，<code>VARCHAR</code>类型，<code>length</code>可以小于字段实际长度；如果是<code>BLOB</code>和<code>TEXT</code>类型，必须指定 <code>length</code>。</p><p><strong>修改表结构(添加索引)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER table tableName ADD INDEX indexName(columnName)</span><br></pre></td></tr></table></figure><p><strong>创建表的时候直接指定</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE mytable(</span><br><span class="line">ID INT NOT NULL,</span><br><span class="line">username VARCHAR(16) NOT NULL,</span><br><span class="line">INDEX [indexName] (username(length))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>删除索引的语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX [indexName] ON mytable;</span><br></pre></td></tr></table></figure><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。它有以下几种创建方式：</p><p><strong>创建索引</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX indexName ON mytable(username(length))</span><br></pre></td></tr></table></figure><p><strong>修改表结构</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER table mytable ADD UNIQUE [indexName] (username(length))</span><br></pre></td></tr></table></figure></p><p>创建表的时候直接指定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE mytable(</span><br><span class="line">ID INT NOT NULL,</span><br><span class="line">username VARCHAR(16) NOT NULL,</span><br><span class="line">UNIQUE [indexName] (username(length))</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><strong>使用ALTER 命令添加和删除索引</strong></p><p>有四种方式来添加数据表的索引：</p><ul><li><strong>ALTER TABLE tbl_name ADD PRIMARY KEY (column_list):</strong> 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为<code>NULL</code>。</li><li><strong>ALTER TABLE tbl_name ADD UNIQUE index_name (column_list):</strong> 这条语句创建索引的值必须是唯一的（除了<code>NULL</code>外，<code>NULL</code>可能会出现多次）。</li><li><strong>ALTER TABLE tbl_name ADD INDEX index_name (column_list):</strong> 添加普通索引，索引值可出现多次。</li><li><strong>ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list):</strong> 该语句指定了索引为 <code>FULLTEXT</code> ，用于全文索引。</li></ul><p>以下实例为在表中添加索引。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl ADD INDEX (c);</span><br></pre></td></tr></table></figure></p><p>你还可以在 <code>ALTER</code> 命令中使用 <code>DROP</code> 子句来删除索引。尝试以下实例删除索引:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl DROP INDEX c;</span><br></pre></td></tr></table></figure></p><h4 id="使用-ALTER-命令添加和删除主键"><a href="#使用-ALTER-命令添加和删除主键" class="headerlink" title="使用 ALTER 命令添加和删除主键"></a>使用 ALTER 命令添加和删除主键</h4><p>主键只能作用于一个列上，添加主键索引时，你需要确保该主键默认不为空<code>（NOT NULL）</code>。实例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl MODIFY i INT NOT NULL;</span><br><span class="line">mysql&gt; ALTER TABLE testalter_tbl ADD PRIMARY KEY (i);</span><br></pre></td></tr></table></figure></p><p>你也可以使用 <code>ALTER</code> 命令删除主键：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure></p><p>删除主键时只需指定<code>PRIMARY KEY</code>，但在删除索引时，你必须知道索引名。</p><h4 id="显示索引信息"><a href="#显示索引信息" class="headerlink" title="显示索引信息"></a>显示索引信息</h4><p>你可以使用 <code>SHOW INDEX</code> 命令来列出表中的相关的索引信息。可以通过添加 <code>\G</code> 来格式化输出信息。</p><p>尝试以下实例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW INDEX FROM table_name; \G</span><br><span class="line">........</span><br></pre></td></tr></table></figure></p><p><a href="temporary-tables.md" style="float: right;">&lt;—— mysql 临时表</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/insert-select-delete-query/"/>
      <url>/blog/2019/06/12/DB/mysql/insert-select-delete-query/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql-插入-查询-数据"><a href="#Mysql-插入-查询-数据" class="headerlink" title="Mysql 插入 查询 数据"></a>Mysql 插入 查询 数据</h2><p><a href="README.md">目录</a></p><h3 id="mysql-插入数据"><a href="#mysql-插入数据" class="headerlink" title="mysql 插入数据"></a>mysql 插入数据</h3><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name ( field1, field2,...fieldN )</span><br><span class="line">                       VALUES</span><br><span class="line">                       ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">root@host# mysql -u root -p password;</span><br><span class="line">Enter password:*******</span><br><span class="line"></span><br><span class="line">mysql&gt; use test;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line"># 创建数据表</span><br><span class="line">mysql&gt; CREATE TABLE IF NOT EXISTS `test_tbl`(</span><br><span class="line">   `test_id` INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">   `test_title` VARCHAR(100) NOT NULL,</span><br><span class="line">   `test_author` VARCHAR(40) NOT NULL,</span><br><span class="line">   `submission_date` DATE,</span><br><span class="line">   PRIMARY KEY ( `test_id` )</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO test_tbl</span><br><span class="line">     (test_title, test_author, submission_date)</span><br><span class="line">     VALUES</span><br><span class="line">     (&quot;学习 PHP&quot;, &quot;菜鸟教程&quot;, NOW());</span><br><span class="line">Query OK, 1 rows affected, 1 warnings (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO test_tbl</span><br><span class="line">     (test_title, test_author, submission_date)</span><br><span class="line">     VALUES</span><br><span class="line">     (&quot;学习 MySQL&quot;, &quot;菜鸟教程&quot;, NOW());</span><br><span class="line">Query OK, 1 rows affected, 1 warnings (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO test_tbl</span><br><span class="line">     (test_title, test_author, submission_date)</span><br><span class="line">     VALUES</span><br><span class="line">     (&quot;JAVA 教程&quot;, &quot;test.COM&quot;, &apos;2016-05-06&apos;);</span><br><span class="line">Query OK, 1 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>语法（INSERT 插入多条数据）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name  (field1, field2,...fieldN)  VALUES  (valueA1,valueA2,...valueAN),(valueB1,valueB2,...valueBN),(valueC1,valueC2,...valueCN)......;</span><br></pre></td></tr></table></figure><h3 id="mysql-查询数据"><a href="#mysql-查询数据" class="headerlink" title="mysql 查询数据"></a>mysql 查询数据</h3><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name,column_name</span><br><span class="line">FROM table_name</span><br><span class="line">[WHERE Clause]</span><br><span class="line">[LIMIT N][ OFFSET M]</span><br></pre></td></tr></table></figure><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号<code>(,)</code>分割，并使用<code>WHERE</code>语句来设定查询条件。</li><li><code>SELECT</code> 命令可以读取一条或者多条记录。</li><li>你可以使用星号<code>（*）</code>来代替其他字段，SELECT语句会返回表的所有字段数据</li><li>你可以使用 <code>WHERE</code> 语句来包含任何条件。</li><li>你可以使用 <code>LIMIT</code> 属性来设定返回的记录数。</li><li>你可以通过<code>OFFSET</code>指定<code>SELECT</code>语句开始查询的数据偏移量。默认情况下偏移量为<code>0</code>。</li></ul><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_tbl; # 查询数据</span><br><span class="line">+---------+--------------+--------------+-----------------+</span><br><span class="line">| test_id | test_title   | test_author  | submission_date |</span><br><span class="line">+---------+--------------+--------------+-----------------+</span><br><span class="line">|       1 | 学习 PHP     | 菜鸟教程     | 2018-03-07      |</span><br><span class="line">|       2 | 学习 MySQL   | 菜鸟教程     | 2018-03-07      |</span><br><span class="line">|       3 | JAVA 教程    | test.COM     | 2016-05-06      |</span><br><span class="line">+---------+--------------+--------------+-----------------+</span><br></pre></td></tr></table></figure><h3 id="mysql-删除数据"><a href="#mysql-删除数据" class="headerlink" title="mysql 删除数据"></a>mysql 删除数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 删除表内数据，用 delete。格式为：</span><br><span class="line">delete from 表名 where 删除条件;</span><br><span class="line"># 实例：删除学生表内姓名为张三的记录。</span><br><span class="line">delete from  student where  T_name = &quot;张三&quot;;</span><br></pre></td></tr></table></figure><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELETE FROM table_name WHERE column_name=&quot;cell_nanme&quot;;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELETE FROM test_tbl WHERE test_title=&quot;JAVA 教程&quot;;</span><br><span class="line">Query OK, 1 row affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM test_tbl;</span><br><span class="line">+---------+--------------+--------------+-----------------+</span><br><span class="line">| test_id | test_title   | test_author  | submission_date |</span><br><span class="line">+---------+--------------+--------------+-----------------+</span><br><span class="line">|       1 | 学习 PHP     | 菜鸟教程     | 2018-03-07      |</span><br><span class="line">|       2 | 学习 MySQL   | 菜鸟教程     | 2018-03-07      |</span><br><span class="line">+---------+--------------+--------------+-----------------+</span><br></pre></td></tr></table></figure><p><a href="where-like-update-delete.md" style="float: right;">&lt;—— Mysql WHERE LIKE子句 UPDATE查询 DELETE删除</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/install/"/>
      <url>/blog/2019/06/12/DB/mysql/install/</url>
      
        <content type="html"><![CDATA[<h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>140.143.158.138<br>qazplm123</p><p><a href="README.md">目录</a></p><p>MYSQL相关的包：</p><ul><li><code>MySQL</code>： MySQL服务器。你需要该选项，除非你只想连接运行在另一台机器上的<code>MySQL</code>服务器。</li><li><code>MySQL-client</code>： MySQL 客户端程序，用于连接并操作<code>Mysql</code>服务器。</li><li><code>MySQL-devel</code>： 库和包含文件，如果你想要编译其它<code>MySQL</code>客户端，例如Perl模块，则需要安装该<code>RPM</code>包。</li><li><code>MySQL-shared</code>： 该软件包包含某些语言和应用程序需要动态装载的共享库<code>(libmysqlclient.so*)</code>，使用MySQL。</li><li><code>MySQL-bench</code>： MySQL数据库服务器的基准和性能测试工具</li></ul><p>检测卸载mysql：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep mysql <span class="comment"># 检测系统是否自带安装 mysql</span></span><br><span class="line"></span><br><span class="line">rpm -e mysql　　<span class="comment"># 普通删除模式</span></span><br><span class="line">rpm -e --nodeps mysql　 <span class="comment"># 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除</span></span><br></pre></td></tr></table></figure><p>安装 mysql(CentOS 7以下)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql</span><br><span class="line">yum install mysql-server</span><br><span class="line">yum install mysql-devel</span><br></pre></td></tr></table></figure><p>启动 mysql：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br><span class="line">service mysqld restart <span class="comment"># 重启mysql</span></span><br></pre></td></tr></table></figure></p><p><em>注意：如果我们是第一次启动 mysql 服务，mysql 服务器首先会进行初始化的配置。</em></p><p>如果是 <strong>CentOS 7 以上版本</strong>，由于 MySQL数据库已从默认的程序列表中移除，可以使用 mariadb 代替：</p><pre><code>yum install mariadb-server mariadb</code></pre><p>mariadb数据库的相关命令是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb  <span class="comment"># 启动MariaDB</span></span><br><span class="line">systemctl stop mariadb  <span class="comment"># 停止MariaDB</span></span><br><span class="line">systemctl start mariadb <span class="comment"># 重启MariaDB</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mariadb  <span class="comment"># 设置开机启动</span></span><br></pre></td></tr></table></figure><p>验证Mysql安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@host]<span class="comment"># mysqladmin --version</span></span><br><span class="line">mysqladmin  Ver 8.42 Distrib 5.6.39, <span class="keyword">for</span> Linux on x86_64  <span class="comment"># 此结果是mysql基于Linux系统信息</span></span><br></pre></td></tr></table></figure><p><em>如果以上命令执行后未输入任何信息，说明你的Mysql未安装成功。</em></p><p>使用 MySQL Client(Mysql客户端) 执行简单的SQL命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@host]<span class="comment"># mysql # 连接服务器（密码为空）</span></span><br><span class="line">mysql&gt; SHOW DATABASES; <span class="comment"># 显示数据库</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mysql安装成功后，默认的root用户密码为空，也可以通过下面命令创建root用户的密码</span></span><br><span class="line"></span><br><span class="line">[root@host]<span class="comment"># mysqladmin -u root password "toor";</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户名密码连接</span></span><br><span class="line">[root@host]<span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter password:*******</span><br></pre></td></tr></table></figure><p><em>注意：在输入密码时，密码是不会显示了，你正确输入即可。</em></p><p><a href="administration.md" style="float: right;">&lt;—— mysql 管理</a></p><p>MySQL安装后涉及的目录如下：</p><table><thead><tr><th>目录</th><th>目录中的内容</th></tr></thead><tbody><tr><td>/usr/bin</td><td>客户端程序和脚本</td></tr><tr><td>/usr/sbin</td><td>Mysqld服务器</td></tr><tr><td>/var/lib/mysql</td><td>数据库的日志文件</td></tr><tr><td>/usr/share/info</td><td>信息格式手册</td></tr><tr><td>/usr/share/man</td><td>Unix 手册页</td></tr><tr><td>/usr/include/mysql</td><td>包括 （标题） 的文件</td></tr><tr><td>/usr/lib/mysql</td><td>mysql的lib包</td></tr><tr><td>/usr/share/mysql</td><td>杂项的支持文件，包括错误消息） 字符设置的文件，示例配置文件，SQL 数据库安装</td></tr><tr><td>/usr/share/sql-bench</td><td>基准</td></tr><tr><td>/etc/my.cnf</td><td>*配置文件</td></tr></tbody></table><p>Window 上安装Mysql：</p><p>Window上安装Mysql相对来说会较为简单，你只需要在 MySQL 下载中下载window版本的mysql安装包，并解压安装包。</p><p>双击 setup.exe 文件，接下来你只需要安装默认的配置点击”next”即可，默认情况下安装信息会在C:\mysql目录中。</p><p>接下来你可以通过”开始” =》在搜索框中输入 “ cmd” 命令 =》 在命令提示符上切换到 C:\mysql\bin 目录，并输入一下命令：</p><pre><code>mysqld.exe --console</code></pre><p>如果安装成功以上命令将输出一些mysql启动及InnoDB信息。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/join/"/>
      <url>/blog/2019/06/12/DB/mysql/join/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql-join连接"><a href="#mysql-join连接" class="headerlink" title="mysql join连接"></a>mysql join连接</h2><p><a href="README.md">目录</a></p><blockquote><p>使用 <code>MySQL</code> 的 <code>JOIN</code> 可以在两个或多个表中查询数据。<br>也以在 SELECT, UPDATE 和 DELETE 语句中使用 Mysql 的 JOIN 来联合多表查询。</p></blockquote><p>JOIN 按照功能大致分为如下三类：</p><p><code>INNER JOIN（内连接,或等值连接）：</code> 获取两个表中字段匹配关系的记录。<br><code>LEFT JOIN（左连接）：</code> 获取左表所有记录，即使右表没有对应匹配的记录。<br><code>RIGHT JOIN（右连接）：</code> 与 <code>LEFT JOIN</code> 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</p><p><strong>mysql INNER JOIN(内连接)</strong></p><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use RUNOOB;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; SELECT * FROM tcount_tbl;</span><br><span class="line">+---------------+--------------+</span><br><span class="line">| runoob_author | runoob_count |</span><br><span class="line">+---------------+--------------+</span><br><span class="line">| 菜鸟教程  | 10           |</span><br><span class="line">| RUNOOB.COM    | 20           |</span><br><span class="line">| Google        | 22           |</span><br><span class="line">+---------------+--------------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * from runoob_tbl;</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">| runoob_id | runoob_title  | runoob_author | submission_date |</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">| 1         | 学习 PHP    | 菜鸟教程  | 2017-04-12      |</span><br><span class="line">| 2         | 学习 MySQL  | 菜鸟教程  | 2017-04-12      |</span><br><span class="line">| 3         | 学习 Java   | RUNOOB.COM    | 2015-05-01      |</span><br><span class="line">| 4         | 学习 Python | RUNOOB.COM    | 2016-03-06      |</span><br><span class="line">| 5         | 学习 C      | FK            | 2017-04-05      |</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">5 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>下面使用<code>MySQL</code>的<code>INNER JOIN</code>(也可以省略 INNER 使用 JOIN，效果一样)来连接以上两张表来读取<code>runoob_tbl</code>表中所有<code>runoob_author</code>字段在<code>tcount_tbl</code>表对应的<code>runoob_count</code>字段值：</p><p>INNER JOIN(内连接)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count</span><br><span class="line">FROM runoob_tbl a</span><br><span class="line">INNER JOIN tcount_tbl b</span><br><span class="line">ON a.runoob_author = b.runoob_author;</span><br><span class="line">+-------------+-----------------+----------------+</span><br><span class="line">| a.runoob_id | a.runoob_author | b.runoob_count |</span><br><span class="line">+-------------+-----------------+----------------+</span><br><span class="line">| 1           | 菜鸟教程    | 10             |</span><br><span class="line">| 2           | 菜鸟教程    | 10             |</span><br><span class="line">| 3           | RUNOOB.COM      | 20             |</span><br><span class="line">| 4           | RUNOOB.COM      | 20             |</span><br><span class="line">+-------------+-----------------+----------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>以上 SQL 语句等价于：</p><p>WHERE 子句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count</span><br><span class="line">FROM runoob_tbl a, tcount_tbl b</span><br><span class="line">WHERE a.runoob_author = b.runoob_author;</span><br><span class="line">+-------------+-----------------+----------------+</span><br><span class="line">| a.runoob_id | a.runoob_author | b.runoob_count |</span><br><span class="line">+-------------+-----------------+----------------+</span><br><span class="line">| 1           | 菜鸟教程    | 10             |</span><br><span class="line">| 2           | 菜鸟教程    | 10             |</span><br><span class="line">| 3           | RUNOOB.COM      | 20             |</span><br><span class="line">| 4           | RUNOOB.COM      | 20             |</span><br><span class="line">+-------------+-----------------+----------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure></p><p><img src="/blog/.io//inner_join.gif" alt="内部联接"></p><p><strong>mysql LEFT JOIN(左连接)</strong></p><blockquote><p>MySQL left join 与 join 有所不同。 MySQL LEFT JOIN 会读取左边数据表的全部数据，即便右边表无对应数据。</p></blockquote><p>实例</p><p>LEFT JOIN(左连接)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count</span><br><span class="line">FROM runoob_tbl a</span><br><span class="line">LEFT JOIN tcount_tbl b</span><br><span class="line">ON a.runoob_author = b.runoob_author;</span><br><span class="line">+-------------+-----------------+----------------+</span><br><span class="line">| a.runoob_id | a.runoob_author | b.runoob_count |</span><br><span class="line">+-------------+-----------------+----------------+</span><br><span class="line">| 1           | 菜鸟教程    | 10             |</span><br><span class="line">| 2           | 菜鸟教程    | 10             |</span><br><span class="line">| 3           | RUNOOB.COM      | 20             |</span><br><span class="line">| 4           | RUNOOB.COM      | 20             |</span><br><span class="line">| 5           | FK              | NULL           |</span><br><span class="line">+-------------+-----------------+----------------+</span><br><span class="line">5 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure></p><blockquote><p>以上实例中使用了 LEFT JOIN，该语句会读取左边的数据表 runoob_tbl 的所有选取的字段数据，即便在右侧表 tcount_tbl中 没有对应的 runoob_author 字段值。</p></blockquote><p><img src="/blog/.io//left_join.gif" alt="左连接"></p><p><strong>mysql RIGHT JOIN(右连接)</strong></p><blockquote><p>MySQL RIGHT JOIN 会读取右边数据表的全部数据，即便左边边表无对应数据。</p></blockquote><p>实例<br>RIGHT JOIN(右连接)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count</span><br><span class="line">FROM runoob_tbl a</span><br><span class="line">RIGHT JOIN tcount_tbl b</span><br><span class="line">ON a.runoob_author = b.runoob_author;</span><br><span class="line">+-------------+-----------------+----------------+</span><br><span class="line">| a.runoob_id | a.runoob_author | b.runoob_count |</span><br><span class="line">+-------------+-----------------+----------------+</span><br><span class="line">| 1           | 菜鸟教程    | 10             |</span><br><span class="line">| 2           | 菜鸟教程    | 10             |</span><br><span class="line">| 3           | RUNOOB.COM      | 20             |</span><br><span class="line">| 4           | RUNOOB.COM      | 20             |</span><br><span class="line">| NULL        | NULL            | 22             |</span><br><span class="line">+-------------+-----------------+----------------+</span><br><span class="line">5 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure></p><blockquote><p>以上实例中使用了 RIGHT JOIN，该语句会读取右边的数据表 tcount_tbl 的所有选取的字段数据，即便在左侧表 runoob_tbl 中没有对应的runoob_author 字段值。</p></blockquote><p><img src="/blog/.io//right_join.gif" alt="右连接"></p><p><br><br><a href="null.md" style="float: right;">&lt;—— mysql NULL值处理</a><br><br></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/null/"/>
      <url>/blog/2019/06/12/DB/mysql/null/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql-null值处理"><a href="#mysql-null值处理" class="headerlink" title="mysql null值处理"></a>mysql null值处理</h2><p><a href="README.md">目录</a></p><blockquote><p>MySQL 使用 SQL SELECT 命令及 WHERE 子句来读取数据表中的数据,但是当提供的查询条件字段为 NULL 时，该命令可能就无法正常工作。</p></blockquote><p>为了处理这种情况，MySQL提供了三大运算符:</p><ul><li><code>IS NULL:</code> 当列的值是 <code>NULL</code>,此运算符返回 <code>true</code>。</li><li><code>IS NOT NULL:</code> 当列的值不为 <code>NULL</code>, 运算符返回 <code>true</code>。</li><li><code>&lt;=&gt;:</code> 比较操作符（不同于=运算符），当比较的的两个值为 <code>NULL</code> 时返回 <code>true</code>。</li></ul><p><em>关于 NULL 的条件比较运算是比较特殊的。你不能使用 <code>= NULL</code> 或 <code>!= NULL</code> 在列中查找 <code>NULL</code> 值。<br>在 <code>MySQL</code> 中，<code>NULL</code> 值与任何其它值的比较（即使是 <code>NULL</code>）永远返回 <code>false</code>，即 <code>NULL = NULL</code> 返回<code>false</code> 。<br><code>MySQL</code> 中处理 <code>NULL</code> 使用 <code>IS NULL</code> 和 <code>IS NOT NULL</code> 运算符。</em></p><p>实例</p><p>假设数据库 test 中的表 test_list_tbl 含有两列 test_author 和 test_count, test_count 中设置插入NULL值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">root@host# mysql -u root -p password;</span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; use test;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table test_list_tbl# 创建表</span><br><span class="line">    (</span><br><span class="line">    test_author varchar(40) NOT NULL,</span><br><span class="line">    test_count  INT</span><br><span class="line">    );</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line">mysql&gt; INSERT INTO test_list_tbl # 插入数据</span><br><span class="line">(test_author, test_count)</span><br><span class="line">values</span><br><span class="line">(&apos;test&apos;, 20),</span><br><span class="line">(&apos;菜鸟教程&apos;, NULL),</span><br><span class="line">(&apos;Google&apos;, NULL),</span><br><span class="line">(&apos;FK&apos;, 20);</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * from test_list_tbl;# 查询数据</span><br><span class="line">+---------------+--------------+</span><br><span class="line">| test_author | test_count |</span><br><span class="line">+---------------+--------------+</span><br><span class="line">| test        | 20           |</span><br><span class="line">| 菜鸟教程  | NULL         |</span><br><span class="line">| Google        | NULL         |</span><br><span class="line">| FK            | 20           |</span><br><span class="line">+---------------+--------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>以下实例中你可以看到 = 和 != 运算符是不起作用的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_list_tbl where test_count=NULL;# 查询test_list_tbl表中test_count=NULL的数据</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line">mysql&gt; select * from test_list_tbl where test_count!=NULL;# 查询test_list_tbl表中test_count!=NULL的数据</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>查找数据表中 <code>test_list_tbl</code> 列是否为 <code>NULL</code>，必须使用 <code>IS NULL</code> 和 <code>IS NOT NULL</code>，如下实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_list_tbl where test_count is null;# 查询test_list_tbl表中test_count值是null的数据</span><br><span class="line">+-------------+------------+</span><br><span class="line">| test_author | test_count |</span><br><span class="line">+-------------+------------+</span><br><span class="line">| 菜鸟教程    |       NULL |</span><br><span class="line">| Google      |       NULL |</span><br><span class="line">+-------------+------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;  select * from test_list_tbl where test_count is not null;     # 查询test_list_tbl表中test_count值不是null的数据</span><br><span class="line">+-------------+------------+</span><br><span class="line">| test_author | test_count |</span><br><span class="line">+-------------+------------+</span><br><span class="line">| test        |         20 |</span><br><span class="line">| FK          |         20 |</span><br><span class="line">+-------------+------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p><a href="regexp.md" style="float: right;">&lt;—— mysql 正则表达式</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/order-by/"/>
      <url>/blog/2019/06/12/DB/mysql/order-by/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql-order-by排序"><a href="#mysql-order-by排序" class="headerlink" title="mysql order-by排序"></a>mysql order-by排序</h2><p><a href="README.md">目录</a></p><blockquote><p> MySQL 的 <code>ORDER BY</code> 子句来设定字段用那种方式来进行排序，再返回搜索结果。</p></blockquote><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN table_name1, table_name2...</span><br><span class="line">ORDER BY field1, [field2...] [ASC [DESC]]</span><br></pre></td></tr></table></figure><p>参数</p><ul><li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li><li>你可以设定多个字段来排序。</li><li>你可以使用 <code>ASC</code> 或 <code>DESC</code> 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。</li><li>你可以添加 <code>WHERE...LIKE</code> 子句来设置条件。<br>实例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use test;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; SELECT * from test_tbl ORDER BY submission_date ASC; # 日期正序</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">| test_id | test_title  | test_author | submission_date |</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">| 3         | 学习 Java   | test.com    | 2015-05-01      |</span><br><span class="line">| 4         | 学习 Python | test.com    | 2016-03-06      |</span><br><span class="line">| 1         | 学习 PHP    | 菜鸟教程  | 2017-04-12      |</span><br><span class="line">| 2         | 学习 MySQL  | 菜鸟教程  | 2017-04-12      |</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * from test_tbl ORDER BY submission_date DESC; # 日期倒序</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">| test_id | test_title  | test_author | submission_date |</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">| 1         | 学习 PHP    | 菜鸟教程  | 2017-04-12      |</span><br><span class="line">| 2         | 学习 MySQL  | 菜鸟教程  | 2017-04-12      |</span><br><span class="line">| 4         | 学习 Python | test.com    | 2016-03-06      |</span><br><span class="line">| 3         | 学习 Java   | test.com    | 2015-05-01      |</span><br><span class="line">+-----------+---------------+---------------+-----------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p><a href="group-by-statement.md" style="float: right;">&lt;—— mysql group by 分组</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/regexp/"/>
      <url>/blog/2019/06/12/DB/mysql/regexp/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql-regexp正则表达式"><a href="#mysql-regexp正则表达式" class="headerlink" title="mysql regexp正则表达式"></a>mysql regexp正则表达式</h2><p><a href="README.md">目录</a></p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td><code>^</code></td><td>匹配输入字符串的开始位置。如果设置了 <code>RegExp</code> 对象的 <code>Multiline</code> 属性，<code>^</code> 也匹配 <code>&#39;\n&#39;</code> 或 <code>&#39;\r&#39;</code> 之后的位置。</td></tr><tr><td><code>$</code></td><td>匹配输入字符串的结束位置。如果设置了<code>RegExp</code> 对象的 <code>Multiline</code> 属性，<code>$</code> 也匹配 <code>&#39;\n&#39;</code> 或 <code>&#39;\r&#39;</code> 之前的位置。</td></tr><tr><td><code>.</code></td><td>匹配除 <code>&quot;\n&quot;</code> 之外的任何单个字符。要匹配包括 <code>&#39;\n&#39;</code> 在内的任何字符，请使用象 <code>&#39;[.\n]&#39;</code> 的模式。</td></tr><tr><td><code>[...]</code></td><td>字符集合。匹配所包含的任意一个字符。例如， <code>&#39;[abc]&#39;</code> 可以匹配 <code>&quot;plain&quot;</code> 中的<code>&#39;a&#39;</code>。</td></tr><tr><td><code>[^...]</code></td><td>负值字符集合。匹配未包含的任意字符。例如， <code>&#39;[^abc]&#39;</code> 可以匹配 <code>&quot;plain&quot;</code> 中的<code>&#39;p&#39;</code>。</td></tr><tr><td><code>p1 p2 p3</code></td><td>匹配 <code>p1</code> 或 <code>p2</code> 或 <code>p3</code>。例如，<code>&#39;z food&#39;</code> 能匹配 <code>&quot;z&quot;</code> 或 <code>&quot;food&quot;</code>。<code>&#39;(z f)ood&#39;</code> 则匹配 <code>&quot;zood&quot;</code> 或 <code>&quot;food&quot;</code>。</td></tr><tr><td><code>*</code></td><td>匹配前面的子表达式零次或多次。例如，<code>zo*</code> 能匹配 <code>&quot;z&quot;</code> 以及 <code>&quot;zoo&quot;</code>。<code>*</code> 等价于<code>{0,}</code>。</td></tr><tr><td><code>+</code></td><td>匹配前面的子表达式一次或多次。例如，<code>&#39;zo+&#39;</code> 能匹配 <code>&quot;zo&quot;</code> 以及 <code>&quot;zoo&quot;</code>，但不能匹配 <code>&quot;z&quot;</code>。<code>+</code> 等价于 <code>{1,}</code>。</td></tr><tr><td><code>{n}</code></td><td><code>n</code> 是一个非负整数。匹配确定的 <code>n</code> 次。例如，’o{2}’ 不能匹配 <code>&quot;Bob&quot;</code> 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td><code>{n,m}</code></td><td><code>m</code> 和 <code>n</code> 均为非负整数，其中<code>n &lt;= m</code>。最少匹配 <code>n</code> 次且最多匹配 <code>m</code> 次。</td></tr></tbody></table><p>实例</p><ul><li><p>查找<code>name</code>字段中以<code>&#39;st&#39;</code>为开头的所有数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;^st&apos;;</span><br></pre></td></tr></table></figure></li><li><p>查找<code>name</code>字段中以<code>&#39;ok&#39;</code>为结尾的所有数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;ok$&apos;;</span><br></pre></td></tr></table></figure></li><li><p>查找<code>name</code>字段中包含<code>&#39;mar&#39;</code>字符串的所有数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;mar&apos;;</span><br></pre></td></tr></table></figure></li><li><p>查找<code>name</code>字段中以元音字符开头或以<code>&#39;ok&#39;</code>字符串结尾的所有数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT name FROM person_tbl WHERE name REGEXP &apos;^[aeiou]|ok$&apos;;</span><br></pre></td></tr></table></figure></li></ul><p><a href="transaction.md" style="float: right;">&lt;—— mysql 事务</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/alter/"/>
      <url>/blog/2019/06/12/DB/mysql/alter/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql-alter-修改数据表名-修改数据表字段"><a href="#mysql-alter-修改数据表名-修改数据表字段" class="headerlink" title="mysql alter(修改数据表名,修改数据表字段)"></a>mysql alter(修改数据表名,修改数据表字段)</h2><p><a href="README.md">目录</a></p><blockquote><p><code>alert</code> 命令可以修改数据表名或者修改数据表字段时</p></blockquote><p>先创建一张表，表名为：<code>testalter_tbl</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">root@host# mysql -u root -p password;</span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; use test;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table testalter_tbl</span><br><span class="line">    (</span><br><span class="line">    i INT,</span><br><span class="line">    c CHAR(1)</span><br><span class="line">    );</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line">mysql&gt; SHOW COLUMNS FROM testalter_tbl;</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| Field | Type    | Null | Key | Default | Extra |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| i     | int(11) | YES  |     | NULL    |       |</span><br><span class="line">| c     | char(1) | YES  |     | NULL    |       |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><h3 id="删除，添加或修改表字段"><a href="#删除，添加或修改表字段" class="headerlink" title="删除，添加或修改表字段"></a>删除，添加或修改表字段</h3><p>如下命令使用了 <code>ALTER</code> 命令及 <code>DROP</code> 子句来删除以上创建表的 <code>i</code> 字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl  DROP i;</span><br></pre></td></tr></table></figure><p>如果数据表中只剩余一个字段则无法使用<code>DROP</code>来删除字段。<br><code>MySQL</code> 中使用 <code>ADD</code> 子句来向数据表中添加列，如下实例在表 <code>testalter_tbl</code> 中添加 <code>i</code> 字段，并定义数据类型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl ADD i INT;</span><br></pre></td></tr></table></figure><p>执行以上命令后，<code>i</code> 字段会自动添加到数据表字段的末尾。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW COLUMNS FROM testalter_tbl;</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| Field | Type    | Null | Key | Default | Extra |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| c     | char(1) | YES  |     | NULL    |       |</span><br><span class="line">| i     | int(11) | YES  |     | NULL    |       |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>如果你需要指定新增字段的位置，可以使用<code>MySQL</code>提供的关键字 <code>FIRST</code> (设定位第一列)， <code>AFTER</code> 字段名（设定位于某个字段之后）。<br>尝试以下 <code>ALTER TABLE</code> 语句, 在执行成功后，使用 <code>SHOW COLUMNS</code> 查看表结构的变化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE testalter_tbl DROP i;</span><br><span class="line">ALTER TABLE testalter_tbl ADD i INT FIRST;</span><br><span class="line">ALTER TABLE testalter_tbl DROP i;</span><br><span class="line">ALTER TABLE testalter_tbl ADD i INT AFTER c;</span><br></pre></td></tr></table></figure><p><code>FIRST</code> 和 <code>AFTER</code> 关键字只占用于 <code>ADD</code> 子句，所以如果你想重置数据表字段的位置就需要先使用 <code>DROP</code> 删除字段然后使用 <code>ADD</code> 来添加字段并设置位置。</p><h3 id="修改字段类型及名称"><a href="#修改字段类型及名称" class="headerlink" title="修改字段类型及名称"></a>修改字段类型及名称</h3><p>如果需要修改字段类型及名称, 你可以在<code>ALTER</code>命令中使用 <code>MODIFY</code> 或 <code>CHANGE</code> 子句 。</p><p>例如，把字段 <code>c</code> 的类型从 <code>CHAR(1)</code> 改为 <code>CHAR(10)</code>，可以执行以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl MODIFY c CHAR(10);</span><br></pre></td></tr></table></figure><p>使用 <code>CHANGE</code> 子句, 语法有很大的不同。 在 <code>CHANGE</code> 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段名及类型。尝试如下实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl CHANGE i j BIGINT;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl CHANGE j j INT;</span><br></pre></td></tr></table></figure><h3 id="ALTER-TABLE-对-Null-值和默认值的影响"><a href="#ALTER-TABLE-对-Null-值和默认值的影响" class="headerlink" title="ALTER TABLE 对 Null 值和默认值的影响"></a>ALTER TABLE 对 Null 值和默认值的影响</h3><p>当你修改字段时，你可以指定是否包含只或者是否设置默认值。<br>以下实例，指定字段 <code>j</code> 为 <code>NOT NULL</code> 且默认值为<code>100</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl</span><br><span class="line">     MODIFY j BIGINT NOT NULL DEFAULT 100;</span><br></pre></td></tr></table></figure><p>如果你不设置默认值，<code>MySQL</code>会自动设置该字段默认为 <code>NULL</code>。</p><h3 id="修改字段默认值"><a href="#修改字段默认值" class="headerlink" title="修改字段默认值"></a>修改字段默认值</h3><p>你可以使用 <code>ALTER</code> 来修改字段的默认值，尝试以下实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000;</span><br><span class="line">mysql&gt; SHOW COLUMNS FROM testalter_tbl;</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| Field | Type    | Null | Key | Default | Extra |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| c     | char(1) | YES  |     | NULL    |       |</span><br><span class="line">| i     | int(11) | YES  |     | 1000    |       |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>你也可以使用 <code>ALTER</code> 命令及 <code>DROP</code>子句来删除字段的默认值，如下实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl ALTER i DROP DEFAULT;</span><br><span class="line">mysql&gt; SHOW COLUMNS FROM testalter_tbl;</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| Field | Type    | Null | Key | Default | Extra |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| c     | char(1) | YES  |     | NULL    |       |</span><br><span class="line">| i     | int(11) | YES  |     | NULL    |       |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line">Changing a Table Type:</span><br></pre></td></tr></table></figure></p><p>修改数据表类型，可以使用<code>ALTER</code>命令及 <code>TYPE</code> 子句来完成。尝试以下实例，我们将表 <code>testalter_tbl</code> 的类型修改为 <code>MYISAM</code> ：<br><strong>注意:</strong> 查看数据表类型可以使用 <code>SHOW TABLE STATUS</code> 语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl ENGINE = MYISAM;</span><br><span class="line">mysql&gt; SHOW TABLE STATUS LIKE &apos;testalter_tbl&apos;\G</span><br><span class="line">*************************** 1. row ****************</span><br><span class="line">           Name: testalter_tbl</span><br><span class="line">           Type: MyISAM</span><br><span class="line">     Row_format: Fixed</span><br><span class="line">           Rows: 0</span><br><span class="line"> Avg_row_length: 0</span><br><span class="line">    Data_length: 0</span><br><span class="line">Max_data_length: 25769803775</span><br><span class="line">   Index_length: 1024</span><br><span class="line">      Data_free: 0</span><br><span class="line"> Auto_increment: NULL</span><br><span class="line">    Create_time: 2007-06-03 08:04:36</span><br><span class="line">    Update_time: 2007-06-03 08:04:36</span><br><span class="line">     Check_time: NULL</span><br><span class="line"> Create_options:</span><br><span class="line">        Comment:</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><p>如果需要修改数据表的名称，可以在 <code>ALTER TABLE</code> 语句中使用 <code>RENAME</code> 子句来实现。<br>尝试以下实例将数据表 <code>testalter_tbl</code> 重命名为 <code>alter_tbl</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl RENAME TO alter_tbl;</span><br></pre></td></tr></table></figure><h3 id="笔记："><a href="#笔记：" class="headerlink" title="笔记："></a>笔记：</h3><p><strong>alter其他用途：</strong></p><p>修改存储引擎：修改为<code>myisam</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tableName engine=myisam;</span><br></pre></td></tr></table></figure></p><p>删除外键约束：<code>keyName</code>是外键别名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tableName drop foreign key keyName;</span><br></pre></td></tr></table></figure></p><p>修改字段的相对位置：这里<code>name1</code>为想要修改的字段，<code>type1</code>为该字段原来类型，<code>first</code>和<code>fter</code>二选一，这应该显而易见，<code>first</code>放在第一位，<code>after</code>放在<code>name2</code>字段后面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table tableName modify name1 type1 first|after name2;</span><br></pre></td></tr></table></figure></p><p>ALTER 命令还可以用来创建及删除MySQL数据表的索引。 <a href="index.md">见下一章</a></p><p><a href="index.md" style="float: right;">&lt;—— mysql 索引</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/database-info/"/>
      <url>/blog/2019/06/12/DB/mysql/database-info/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql-元数据"><a href="#Mysql-元数据" class="headerlink" title="Mysql 元数据"></a>Mysql 元数据</h2><p><a href="README.md">目录</a></p><ul><li><strong>查询结果信息：</strong>  <code>SELECT, UPDATE</code> 或 <code>DELETE</code>语句影响的记录数。</li><li><strong>数据库和数据表的信息：</strong>  包含了数据库及数据表的结构信息。</li><li><strong>MySQL服务器信息：</strong>  包含了数据库服务器的当前状态，版本号等</li></ul><h3 id="获取查询语句影响的记录数"><a href="#获取查询语句影响的记录数" class="headerlink" title="获取查询语句影响的记录数"></a>获取查询语句影响的记录数</h3><p><strong>PERL 实例</strong></p><p>在 DBI 脚本中， 语句影响的记录数通过函数 do( ) 或 execute( )返回：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line"><span class="comment"># 使用do( ) 执行  $query</span></span><br><span class="line"><span class="keyword">my</span> $count = $dbh-&gt;<span class="keyword">do</span> ($query);</span><br><span class="line"><span class="comment"># 如果发生错误会输出 0</span></span><br><span class="line"><span class="keyword">printf</span> <span class="string">"%d 条数据被影响\n"</span>, (<span class="keyword">defined</span> ($count) ? $count : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="comment"># 使用prepare( ) 及 execute( ) 执行  $query</span></span><br><span class="line"><span class="keyword">my</span> $sth = $dbh-&gt;prepare ($query);</span><br><span class="line"><span class="keyword">my</span> $count = $sth-&gt;execute ( );</span><br><span class="line"><span class="keyword">printf</span> <span class="string">"%d 条数据被影响\n"</span>, (<span class="keyword">defined</span> ($count) ? $count : <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><strong>PHP 实例</strong></p><p>在PHP中，你可以使用 mysqli_affected_rows( ) 函数来获取查询语句影响的记录数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$result_id = mysqli_query ($conn_id, $query);</span><br><span class="line"><span class="comment"># 如果查询失败返回</span></span><br><span class="line">$count = ($result_id ? mysqli_affected_rows ($conn_id) : <span class="number">0</span>);</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"$count 条数据被影响\n"</span>);</span><br></pre></td></tr></table></figure><h3 id="数据库和数据表列表"><a href="#数据库和数据表列表" class="headerlink" title="数据库和数据表列表"></a>数据库和数据表列表</h3><p><strong>PERL 实例</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前数据库中所有可用的表。</span></span><br><span class="line"><span class="keyword">my</span> @tables = $dbh-&gt;tables ( );</span><br><span class="line"><span class="keyword">foreach</span> $table (@tables )&#123;</span><br><span class="line">   <span class="keyword">print</span> <span class="string">"表名 $table\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PHP 实例</strong></p><p>输出 MySQL 服务器上的所有数据库：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$dbhost = <span class="string">'localhost:3306'</span>;  <span class="comment">// mysql服务器主机地址</span></span><br><span class="line">$dbuser = <span class="string">'root'</span>;            <span class="comment">// mysql用户名</span></span><br><span class="line">$dbpass = <span class="string">'123456'</span>;          <span class="comment">// mysql用户名密码</span></span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line"><span class="keyword">if</span>(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'连接失败: '</span> . mysqli_error($conn));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置编码，防止中文乱码</span></span><br><span class="line">$db_list = mysqli_query($conn, <span class="string">'SHOW DATABASES'</span>);</span><br><span class="line"><span class="keyword">while</span> ($db = mysqli_fetch_object($db_list))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> $db-&gt;Database . <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="获取服务器元数据"><a href="#获取服务器元数据" class="headerlink" title="获取服务器元数据"></a>获取服务器元数据</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>SELECT VERSION( )</td><td>服务器版本信息</td></tr><tr><td>SELECT DATABASE( )</td><td>当前数据库名 (或者返回空)</td></tr><tr><td>SELECT USER( )</td><td>当前用户名</td></tr><tr><td>SHOW STATUS</td><td>服务器状态</td></tr><tr><td>SHOW VARIABLES</td><td>服务器配置变量</td></tr></tbody></table><p><a href="using-sequences.md" style="float: right;">&lt;—— mysql 序列使用</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/database-import/"/>
      <url>/blog/2019/06/12/DB/mysql/database-import/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql-导入数据"><a href="#Mysql-导入数据" class="headerlink" title="Mysql 导入数据"></a>Mysql 导入数据</h2><p><a href="README.md">目录</a></p><h3 id="使用-LOAD-DATA-导入数据"><a href="#使用-LOAD-DATA-导入数据" class="headerlink" title="使用 LOAD DATA 导入数据"></a>使用 LOAD DATA 导入数据</h3><p>MySQL 中提供了<code>LOAD DATA INFILE</code>语句来插入数据。 以下实例中将从当前目录中读取文件 <code>dump.txt</code> ，将该文件中的数据插入到当前数据库的 <code>mytbl</code> 表中。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; LOAD DATA LOCAL INFILE 'dump.txt' INTO TABLE mytbl;</span><br></pre></td></tr></table></figure><p>如果指定<code>LOCAL</code>关键词，则表明从客户主机上按路径读取文件。如果没有指定，则文件在服务器上按路径读取文件。</p><p>你能明确地在<code>LOAD DATA</code>语句中指出列值的分隔符和行尾标记，但是默认标记是定位符和换行符。</p><p>两个命令的 <code>FIELDS</code> 和 <code>LINES</code> 子句的语法是一样的。两个子句都是可选的，但是如果两个同时被指定，<code>FIELDS</code> 子句必须出现在 <code>LINES</code> 子句之前。</p><p>如果用户指定一个 <code>FIELDS</code> 子句，它的子句 <code>（TERMINATED BY、[OPTIONALLY] ENCLOSED BY 和 ESCAPED BY)</code>也是可选的，不过，用户必须至少指定它们中的一个。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; LOAD DATA LOCAL INFILE 'dump.txt' INTO TABLE mytbl</span><br><span class="line">  -&gt; FIELDS TERMINATED BY ':'</span><br><span class="line">  -&gt; LINES TERMINATED BY '\r\n';</span><br></pre></td></tr></table></figure><p><code>LOAD DATA</code> 默认情况下是按照数据文件中列的顺序插入数据的，如果数据文件中的列与插入表中的列不一致，则需要指定列的顺序。<br>如，在数据文件中的列顺序是 <code>a,b,c，</code> 但在插入表的列顺序为<code>b,c,a，</code>则数据导入语法如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; LOAD DATA LOCAL INFILE 'dump.txt'</span><br><span class="line">    -&gt; INTO TABLE mytbl (b, c, a);</span><br></pre></td></tr></table></figure><h3 id="使用-mysqlimport-导入数据"><a href="#使用-mysqlimport-导入数据" class="headerlink" title="使用 mysqlimport 导入数据"></a>使用 mysqlimport 导入数据</h3><p><code>mysqlimport</code>客户端提供了<code>LOAD DATA INFILEQL</code>语句的一个命令行接口。<code>mysqlimport</code>的大多数选项直接对应<code>LOAD DATA INFILE</code>子句。</p><p>从文件 <code>dump.txt</code> 中将数据导入到 <code>mytbl</code> 数据表中, 可以使用以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlimport -u root -p --<span class="built_in">local</span> database_name dump.txt</span><br><span class="line">password *****</span><br></pre></td></tr></table></figure></p><p><code>mysqlimport</code>命令可以指定选项来设置指定格式,命令语句格式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlimport -u root -p --<span class="built_in">local</span> --fields-terminated-by=<span class="string">":"</span> \</span><br><span class="line">   --lines-terminated-by=<span class="string">"\r\n"</span>  database_name dump.txt</span><br><span class="line">password *****</span><br></pre></td></tr></table></figure></p><p><code>mysqlimport</code> 语句中使用 <code>--columns</code> 选项来设置列的顺序：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlimport -u root -p --<span class="built_in">local</span> --columns=b,c,a \</span><br><span class="line">    database_name dump.txt</span><br><span class="line">password *****</span><br></pre></td></tr></table></figure></p><h3 id="mysqlimport的常用选项介绍"><a href="#mysqlimport的常用选项介绍" class="headerlink" title="mysqlimport的常用选项介绍"></a>mysqlimport的常用选项介绍</h3><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-d or –delete</td><td>新数据导入数据表中之前删除数据数据表中的所有信息</td></tr><tr><td>-f or –force</td><td>不管是否遇到错误，<code>mysqlimport</code>将强制继续插入数据</td></tr><tr><td>-i or –ignore</td><td><code>mysqlimport</code>跳过或者忽略那些有相同唯一 关键字的行， 导入文件中的数据将被忽略。</td></tr><tr><td>-l or -lock-tables</td><td>数据被插入之前锁住表，这样就防止了， 你在更新数据库时，用户的查询和更新受到影响。</td></tr><tr><td>-r or -replace</td><td>这个选项与－i选项的作用相反；此选项将替代 表中有相同唯一关键字的记录。</td></tr><tr><td>–fields-enclosed- by= char</td><td>指定文本文件中数据的记录时以什么括起的， 很多情况下 数据以双引号括起。 默认的情况下数据是没有被字符括起的。</td></tr><tr><td>–fields-terminated- by=char</td><td>指定各个数据的值之间的分隔符，在句号分隔的文件中， 分隔符是句号。您可以用此选项指定数据之间的分隔符。 默认的分隔符是跳格符<code>（Tab）</code></td></tr><tr><td>–lines-terminated- by=str</td><td>此选项指定文本文件中行与行之间数据的分隔字符串 或者字符。 默认的情况下<code>mysqlimport</code>以<code>newline</code>为行分隔符。 您可以选择用一个字符串来替代一个单个的字符： 一个新行或者一个回车。</td></tr></tbody></table><p><code>mysqlimport</code>命令常用的选项还有<code>-v</code> 显示版本<code>（version）</code>， <code>-p</code> 提示输入密码<code>（password）</code>等。</p><!-- <a href="database-import.md" style="float: right;"><—— mysql 导入数据</a> -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/clone-tables/"/>
      <url>/blog/2019/06/12/DB/mysql/clone-tables/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql-复制表"><a href="#Mysql-复制表" class="headerlink" title="Mysql 复制表"></a>Mysql 复制表</h2><p><a href="README.md">目录</a></p><blockquote><p>如果我们需要完全的复制MySQL的数据表，包括表的结构，索引，默认值等。 如果仅仅使用<code>CREATE TABLE ... SELECT</code> 命令，是无法实现的。</p></blockquote><p>完整的复制MySQL数据表，步骤如下：</p><ul><li>使用 <code>SHOW CREATE TABLE</code> 命令获取创建数据表<code>(CREATE TABLE)</code> 语句，该语句包含了原数据表的结构，索引等。</li><li>复制以下命令显示的SQL语句，修改数据表名，并执行SQL语句，通过以上命令 将完全的复制数据表结构。</li><li>如果你想复制表的内容，你就可以使用 <code>INSERT INTO ... SELECT</code> 语句来实现。</li></ul><p>实例:</p><p>复制表 test_tbl。</p><p>步骤一：<br>获取数据表的完整结构。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE TABLE test_tbl \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: test_tbl</span><br><span class="line">Create Table: CREATE TABLE `test_tbl` (</span><br><span class="line">  `test_id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `test_title` varchar(100) NOT NULL DEFAULT &apos;&apos;,</span><br><span class="line">  `test_author` varchar(40) NOT NULL DEFAULT &apos;&apos;,</span><br><span class="line">  `submission_date` date DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`test_id`),</span><br><span class="line">  UNIQUE KEY `AUTHOR_INDEX` (`test_author`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR:</span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure></p><p>步骤二：<br>修改SQL语句的数据表名，并执行SQL语句。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE `clone_tbl` (</span><br><span class="line">  `test_id` int(11) NOT NULL auto_increment,</span><br><span class="line">  `test_title` varchar(100) NOT NULL default &apos;&apos;,</span><br><span class="line">  `test_author` varchar(40) NOT NULL default &apos;&apos;,</span><br><span class="line">  `submission_date` date default NULL,</span><br><span class="line">  PRIMARY KEY  (`test_id`),</span><br><span class="line">  UNIQUE KEY `AUTHOR_INDEX` (`test_author`)</span><br><span class="line">) ENGINE=InnoDB;</span><br><span class="line">Query OK, 0 rows affected (1.80 sec)</span><br></pre></td></tr></table></figure></p><p>步骤三：</p><p>执行完第二步骤后，你将在数据库中创建新的克隆表 <code>clone_tbl</code>。 如果你想拷贝数据表的数据你可以使用 <code>INSERT INTO... SELECT</code> 语句来实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT INTO clone_tbl (test_id,</span><br><span class="line">                           test_title,</span><br><span class="line">                           test_author,</span><br><span class="line">                           submission_date)</span><br><span class="line">    SELECT test_id,test_title,</span><br><span class="line">           test_author,submission_date</span><br><span class="line">    FROM test_tbl;</span><br><span class="line">Query OK, 3 rows affected (0.07 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure></p><p>笔记：</p><p>另一种完整复制表的方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE targetTable LIKE sourceTable;</span><br><span class="line">INSERT INTO targetTable SELECT * FROM sourceTable;</span><br></pre></td></tr></table></figure></p><p>其他:<br>可以拷贝一个表中其中的一些字段:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE newadmin AS</span><br><span class="line">(</span><br><span class="line">    SELECT username, password FROM admin</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>可以将新建的表的字段改名:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE newadmin AS</span><br><span class="line">(</span><br><span class="line">    SELECT id, username AS uname, password AS pass FROM admin</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>可以拷贝一部分数据:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE newadmin AS</span><br><span class="line">(</span><br><span class="line">    SELECT * FROM admin WHERE LEFT(username,1) = &apos;s&apos;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>可以在创建表的同时定义表中的字段信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE newadmin</span><br><span class="line">(</span><br><span class="line">    id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY</span><br><span class="line">)</span><br><span class="line">AS</span><br><span class="line">(</span><br><span class="line">    SELECT * FROM admin</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>区分mysql复制表的两种方式。</p><p>第一、只复制表结构到新表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table 新表 select * from 旧表 where 1=2</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table 新表 like 旧表</span><br></pre></td></tr></table></figure></p><p>第二、复制表结构及数据到新表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table新表 select * from 旧表</span><br></pre></td></tr></table></figure></p><p><a href="database-info.md" style="float: right;">&lt;—— mysql 元数据</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/connection/"/>
      <url>/blog/2019/06/12/DB/mysql/connection/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL-连接"><a href="#MySQL-连接" class="headerlink" title="MySQL 连接"></a>MySQL 连接</h2><p><a href="README.md">目录</a></p><p> 以下是从命令行中连接mysql服务器的简单实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@host]<span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter password:******</span><br><span class="line"></span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2854760 to server version: 5.0.9</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the buffer.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">exit</span></span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><p>PHP 脚本连接 MySQL</p><p>该函数有 6 个参数，在成功链接到 MySQL 后返回连接标识，失败返回 FALSE</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqli_connect(host,username,password,dbname,port,socket);</span><br></pre></td></tr></table></figure><p>使用PHP的 mysqli_close() 函数来断开与MySQL数据库的链接。<br>该函数只有一个参数为 mysqli_connect() 函数创建连接成功后返回的 MySQL 连接标识符。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool mysqli_close ( mysqli $link )</span><br></pre></td></tr></table></figure></p><p>_本函数关闭指定的连接标识所关联的到 MySQL 服务器的非持久连接。如果没有指定 <code>link_identifier，</code>则关闭上一个打开的连接。_<br>_提示：通常不需要使用 mysqli_close()，因为已打开的非持久连接会在脚本执行完毕后自动关闭。_</p><p>连接 MySQL参数说明</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>host</td><td>可选。规定主机名或 IP 地址。</td></tr><tr><td>username</td><td>可选。规定 MySQL 用户名。</td></tr><tr><td>password</td><td>可选。规定 MySQL 密码。</td></tr><tr><td>dbname</td><td>可选。规定默认使用的数据库。</td></tr><tr><td>port</td><td>可选。规定尝试连接到 MySQL 服务器的端口号。</td></tr><tr><td>socket</td><td>可选。规定 socket 或要使用的已命名 pipe。</td></tr></tbody></table><p>PHP脚本连接实例<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$dbhost = <span class="string">'localhost:3306'</span>;  <span class="comment">// mysql服务器主机地址</span></span><br><span class="line">$dbuser = <span class="string">'root'</span>;            <span class="comment">// mysql用户名</span></span><br><span class="line">$dbpass = <span class="string">'123456'</span>;          <span class="comment">// mysql用户名密码</span></span><br><span class="line">$conn = mysqli_connect($dbhost, $dbuser, $dbpass);</span><br><span class="line"><span class="keyword">if</span>(! $conn )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Could not connect: '</span> . mysqli_error());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'数据库连接成功！'</span>;</span><br><span class="line">mysqli_close($conn);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>NODEJS脚本连接实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql      = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host     : <span class="string">'localhost'</span>,</span><br><span class="line">  user     : <span class="string">'me'</span>,</span><br><span class="line">  password : <span class="string">'secret'</span>,</span><br><span class="line">  database : <span class="string">'my_db'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line">connection.query(<span class="string">'SELECT 1 + 1 AS solution'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The solution is: '</span>, results[<span class="number">0</span>].solution);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure></p><p><a href="create-drop-select-database.md" style="float: right;">&lt;—— mysql 创建 删除 选择 数据库</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/data-type/"/>
      <url>/blog/2019/06/12/DB/mysql/data-type/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql-数据类型"><a href="#Mysql-数据类型" class="headerlink" title="Mysql 数据类型"></a>Mysql 数据类型</h2><p><a href="README.md">目录</a></p><blockquote><p>MySQL支持数据类型大致可以分为三类：数值、日期/时间 和 字符串(字符) 类型。</p></blockquote><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><ul><li>MySQL支持所有标准SQL数值数据类型。</li><li>这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)，以及近似数值数据类型(FLOAT、REAL和DOUBLE PRECISION)。</li><li>关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。</li><li>BIT数据类型保存位字段值，并且支持MyISAM、MEMORY、InnoDB和BDB表。</li><li>作为SQL标准的扩展，MySQL也支持整数类型TINYINT、MEDIUMINT和BIGINT。下面的表显示了需要的每个整数类型的存储和范围。</li></ul><table><thead><tr><th>类型</th><th>大小</th><th>范围（有符号）</th><th>范围（无符号）</th><th>用途</th></tr></thead><tbody><tr><td>TINYINT</td><td>1 字节</td><td>(-128，127)</td><td>(0，255)</td><td>小整数值</td></tr><tr><td>SMALLINT</td><td>2 字节</td><td>(-32 768，32 767)</td><td>(0，65 535)</td><td>大整数值</td></tr><tr><td>MEDIUMINT</td><td>3 字节</td><td>(-8 388 608，8 388 607)</td><td>(0，16 777 215)</td><td>大整数值</td></tr><tr><td>INT或INTEGER</td><td>4 字节</td><td>(-2 147 483 648，2 147 483 647)</td><td>(0，4 294 967 295)</td><td>大整数值</td></tr><tr><td>BIGINT</td><td>8 字节</td><td>(-9 233 372 036 854 775 808，9 223 372 036 854 775 807)</td><td>(0，18 446 744 073 709 551 615)</td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>4 字节</td><td>(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td>0，(1.175 494 351 E-38，3.402 823</td><td>466 E+38)</td><td>单精度</td><td>浮点数值</td></tr><tr><td>DOUBLE</td><td>8 字节</td><td>(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>双精度</td><td>浮点数值</td></tr><tr><td>DECIMAL</td><td>对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td>依赖于M和D的值</td><td>依赖于M和D的值</td><td>小数值</td></tr></tbody></table><h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3><ul><li>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。</li><li>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。</li><li>TIMESTAMP类型有专有的自动更新特性，将在后面描述。</li></ul><table><thead><tr><th>类型</th><th>大小(字节)</th><th>范围</th><th>格式</th><th>用途</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01/9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>‘-838:59:59’/‘838:59:59’</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901/2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00/9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:00/2038 结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td>YYYYMMDD HHMMSS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul><li>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</li></ul><table><thead><tr><th>类型</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255字节</td><td>定长字符串</td></tr><tr><td>VARCHAR</td><td>0-65535字节</td><td>变长字符串</td></tr><tr><td>TINYBLOB</td><td>0-255字节</td><td>255 个字符的二进制字符串</td></tr><tr><td>TINYTEXT</td><td>0-255字节</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535字节</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535字节</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215字节</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215字节</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295字节</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295字节</td><td>极大文本数据</td></tr></tbody></table><blockquote><p>CHAR和VARCHAR类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p></blockquote><blockquote><p>BINARY和VARBINARY类类似于CHAR和VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p></blockquote><blockquote><p>BLOB是一个二进制大对象，可以容纳可变数量的数据。有4种BLOB类型：TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB。它们只是可容纳值的最大长度不同。</p></blockquote><blockquote><p>有4种TEXT类型：TINYTEXT、TEXT、MEDIUMTEXT和LONGTEXT。这些对应4种BLOB类型，有相同的最大长度和存储需求。</p></blockquote><p><a href="create-show-alter-drop-tables.md" style="float: right;">&lt;—— mysql 创建 查询 修改 删除 数据表</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/create-drop-select-database/"/>
      <url>/blog/2019/06/12/DB/mysql/create-drop-select-database/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL-创建-删除-选择-数据库"><a href="#MySQL-创建-删除-选择-数据库" class="headerlink" title="MySQL 创建 删除 选择 数据库"></a>MySQL 创建 删除 选择 数据库</h2><p><a href="README.md">目录</a></p><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@host]<span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter password:******</span><br><span class="line"></span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2854760 to server version: 5.0.9</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the buffer.</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="built_in">exit</span></span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@host]<span class="comment"># mysqladmin -u root -p create test# 创建名为test的数据库</span></span><br><span class="line">Enter password:******</span><br><span class="line"></span><br><span class="line">[root@host]<span class="comment"># mysqladmin -u root -p# 连接数据库</span></span><br><span class="line">Enter password:******</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW DATABASES;<span class="comment"># 查看数据库</span></span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>使用root登录后，可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS TEST DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure></p><p>创建数据库，该命令的作用：</p><ol><li>如果数据库不存在则创建，存在则不创建。</li><li>创建TEST数据库，并设定编码集为utf8</li></ol><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@host]<span class="comment"># mysqladmin -u root -p drop test</span></span><br><span class="line">Enter password:******</span><br></pre></td></tr></table></figure><p>执行以上删除数据库命令后，会出现一个提示框，来确认是否真的删除数据库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Dropping the database is potentially a very bad thing to <span class="keyword">do</span>.</span><br><span class="line">Any data stored <span class="keyword">in</span> the database will be destroyed.</span><br><span class="line"></span><br><span class="line">Do you really want to drop the <span class="string">'test'</span> database [y/N] y</span><br><span class="line">Database <span class="string">"test"</span> dropped</span><br></pre></td></tr></table></figure></p><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@host]<span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter password:******</span><br><span class="line"></span><br><span class="line">mysql&gt; use <span class="built_in">test</span>;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p><a href="data-type.md" style="float: right;">&lt;—— mysql 数据类型</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/create-show-alter-drop-tables/"/>
      <url>/blog/2019/06/12/DB/mysql/create-show-alter-drop-tables/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql-创建-查询-修改-删除数据表"><a href="#Mysql-创建-查询-修改-删除数据表" class="headerlink" title="Mysql 创建 查询 修改 删除数据表"></a>Mysql 创建 查询 修改 删除数据表</h2><p><a href="README.md">目录</a></p><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>创建MySQL数据表需要以下信息：</p><ul><li>表名</li><li>表字段名</li><li>定义每个表字段</li></ul><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name (column_name column_type);</span><br></pre></td></tr></table></figure><p>以下例子中我们将在 test 数据库中创建数据表<code>test_tbl</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">root@host# mysql -u root -p</span><br><span class="line">Enter password:*******</span><br><span class="line"></span><br><span class="line">mysql&gt; use test # 切换数据</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line"># 创建数据表</span><br><span class="line">mysql&gt; CREATE TABLE IF NOT EXISTS `test_tbl`(</span><br><span class="line">   `test_id` INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">   `test_title` VARCHAR(100) NOT NULL,</span><br><span class="line">   `test_author` VARCHAR(40) NOT NULL,</span><br><span class="line">   `submission_date` DATE,</span><br><span class="line">   PRIMARY KEY ( `test_id` )</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.16 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW TABLES; # 查询数据表</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| test_tbl       |</span><br><span class="line">+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>实例解析：</p><ul><li>如果你不想字段为 <code>NULL</code> 可以设置字段的属性为 <code>NOT NULL</code>， 在操作数据库时如果输入该字段的数据为<code>NULL</code> ，就会报错。</li><li><code>AUTO_INCREMENT</code>定义列为自增的属性，一般用于主键，数值会自动加<code>1</code>。</li><li><code>PRIMARY KEY</code>关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。</li><li><code>ENGINE</code> 设置存储引擎，<code>CHARSET</code> 设置编码。</li></ul><h3 id="修改数据表名称"><a href="#修改数据表名称" class="headerlink" title="修改数据表名称"></a>修改数据表名称</h3><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABEL table_name rename table_new_name;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@host# mysql -u root -p</span><br><span class="line">Enter password:*******</span><br><span class="line"></span><br><span class="line">mysql&gt; use test;# 切换数据库</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; ALTER TABEL test rename new_table;# 修改数据表名称</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><h3 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h3><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE table_name;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@host# mysql -u root -p</span><br><span class="line">Enter password:*******</span><br><span class="line"></span><br><span class="line">mysql&gt; use new_table;# 切换数据库</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; DROP TABLE test_tbl# 删除数据表</span><br><span class="line">Query OK, 0 rows affected (0.8 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;SHOW TABLES; # 查询数据表</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure><p>笔记：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 删除表内数据，用 delete。格式为：</span><br><span class="line">delete from 表名 where 删除条件;</span><br><span class="line"># 实例：删除学生表内姓名为张三的记录。</span><br><span class="line">delete from  student where  T_name = &quot;张三&quot;;</span><br><span class="line"></span><br><span class="line"># 清除表内数据，保存表结构，用 truncate。格式为：</span><br><span class="line">truncate table 表名;</span><br><span class="line"># 实例：清除学生表内的所有数据。</span><br><span class="line">truncate  table  student;</span><br><span class="line"></span><br><span class="line"># 删除表用 drop，就是啥都没了。格式为：</span><br><span class="line">drop  table  表名;</span><br><span class="line"># 实例：删除学生表。</span><br><span class="line">drop table student;</span><br></pre></td></tr></table></figure></p><ol><li>当你不再需要该表时， 用 drop;</li><li>当你仍要保留该表，但要删除所有记录时， 用 truncate;</li><li>当你要删除部分记录时， 用 delete。</li></ol><p><a href="insert-select-delete-query.md" style="float: right;">&lt;—— mysql 插入 查询 删除 数据</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/group-by-statement/"/>
      <url>/blog/2019/06/12/DB/mysql/group-by-statement/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql-GROUP-BY-分组语句"><a href="#mysql-GROUP-BY-分组语句" class="headerlink" title="mysql GROUP BY 分组语句"></a>mysql GROUP BY 分组语句</h2><p><a href="README.md">目录</a></p><blockquote><p><code>GROUP BY</code> 语句根据一个或多个列对结果集进行分组。</p></blockquote><blockquote><p>在分组的列上我们可以使用 <code>COUNT</code>, <code>SUM</code>, <code>AVG</code>,等函数。</p></blockquote><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name, function(column_name)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name operator value</span><br><span class="line">GROUP BY column_name;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SET NAMES utf8;# 指定了客户端和服务器之间传递字符的编码规则为UTF8</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SET FOREIGN_KEY_CHECKS=0;# 在Mysql中取消外键约束。(Mysql中如果表和表之间建立的外键约束，则无法删除表及修改表结构。)</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DROP TABLE IF EXISTS `employee_tbl`; # 尝试删除 employee_tbl</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 创建`employee_tbl`表</span><br><span class="line">mysql&gt; CREATE TABLE `employee_tbl` (</span><br><span class="line">      `id` int(11) NOT NULL,</span><br><span class="line">      `name` char(10) NOT NULL DEFAULT &apos;&apos;,</span><br><span class="line">      `date` datetime NOT NULL,</span><br><span class="line">      `singin` tinyint(4) NOT NULL DEFAULT &apos;0&apos; COMMENT &apos;登录次数&apos;,</span><br><span class="line">      PRIMARY KEY (`id`)</span><br><span class="line">    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.12 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; BEGIN; # 开始一个事务</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line">mysql&gt; INSERT INTO `employee_tbl`</span><br><span class="line">VALUES</span><br><span class="line">(&apos;1&apos;, &apos;小明&apos;, &apos;2016-04-22 15:25:33&apos;, &apos;1&apos;),</span><br><span class="line">(&apos;2&apos;, &apos;小王&apos;, &apos;2016-04-20 15:25:47&apos;, &apos;3&apos;),</span><br><span class="line">(&apos;3&apos;, &apos;小丽&apos;, &apos;2016-04-19 15:26:02&apos;, &apos;2&apos;),</span><br><span class="line">(&apos;4&apos;, &apos;小王&apos;, &apos;2016-04-07 15:26:14&apos;, &apos;4&apos;),</span><br><span class="line">(&apos;5&apos;, &apos;小明&apos;, &apos;2016-04-11 15:26:40&apos;, &apos;4&apos;),</span><br><span class="line">(&apos;6&apos;, &apos;小明&apos;, &apos;2016-04-04 15:26:54&apos;, &apos;2&apos;);</span><br><span class="line">Query OK, 6 rows affected (0.00 sec)</span><br><span class="line">Records: 6  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; COMMIT;# 事务确认</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SET FOREIGN_KEY_CHECKS=1;# 启用外键约束</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>导入成功后，执行以下 SQL 语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set names utf8;# 设置编码</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM employee_tbl;# 查询 employee_tbl 表的数据</span><br><span class="line">+----+--------+---------------------+--------+</span><br><span class="line">| id | name   | date                | singin |</span><br><span class="line">+----+--------+---------------------+--------+</span><br><span class="line">|  1 | 小明   | 2016-04-22 15:25:33 |      1 |</span><br><span class="line">|  2 | 小王   | 2016-04-20 15:25:47 |      3 |</span><br><span class="line">|  3 | 小丽   | 2016-04-19 15:26:02 |      2 |</span><br><span class="line">|  4 | 小王   | 2016-04-07 15:26:14 |      4 |</span><br><span class="line">|  5 | 小明   | 2016-04-11 15:26:40 |      4 |</span><br><span class="line">|  6 | 小明   | 2016-04-04 15:26:54 |      2 |</span><br><span class="line">+----+--------+---------------------+--------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 接下来 使用 GROUP BY 语句 将数据表按名字进行分组，并统计每个人有多少条记录：</span><br><span class="line">mysql&gt; SELECT name, COUNT(*) FROM  employee_tbl GROUP BY name;</span><br><span class="line">+--------+----------+</span><br><span class="line">| name   | COUNT(*) |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 小丽   |        1 |</span><br><span class="line">| 小明   |        3 |</span><br><span class="line">| 小王   |        2 |</span><br><span class="line">+--------+----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p><br><br><strong>使用 WITH ROLLUP</strong></p><blockquote><p><code>WITH ROLLUP</code> 可以实现在分组统计数据基础上再进行相同的统计<code>（SUM,AVG,COUNT…）</code>。<br>例如我们将以上的数据表按名字进行分组，再统计每个人登录的次数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT name, SUM(singin) as singin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;</span><br><span class="line">+--------+--------------+</span><br><span class="line">| name   | singin_count |</span><br><span class="line">+--------+--------------+</span><br><span class="line">| 小丽   |            2 |</span><br><span class="line">| 小明   |            7 |</span><br><span class="line">| 小王   |            7 |</span><br><span class="line">| NULL   |           16 |</span><br><span class="line">+--------+--------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>其中记录 <code>NULL</code> 表示所有人的登录次数。<br>我们可以使用 <code>coalesce</code> 来设置一个可以取代 <code>NUll</code> 的名称，<code>coalesce</code> 语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select coalesce(a,b,c);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>参数说明：如果<code>a==null</code>,则选择<code>b</code>；如果<code>b==null</code>,则选择<code>c</code>；如果<code>a!=null</code>,则选择<code>a</code>；如果<code>a b c</code> 都为<code>null</code> ，则返回为<code>null（没意义）</code>。<br>以下实例中如果名字为空我们使用总数代替：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT coalesce(name, &apos;总数&apos;), SUM(singin) as singin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;</span><br><span class="line">+--------------------------+--------------+</span><br><span class="line">| coalesce(name, &apos;总数&apos;)   | singin_count |</span><br><span class="line">+--------------------------+--------------+</span><br><span class="line">| 小丽                     |            2 |</span><br><span class="line">| 小明                     |            7 |</span><br><span class="line">| 小王                     |            7 |</span><br><span class="line">| 总数                     |           16 |</span><br><span class="line">+--------------------------+--------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p></blockquote><p><a href="join.md" style="float: right;">&lt;—— mysql join连接</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/README/"/>
      <url>/blog/2019/06/12/DB/mysql/README/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><ul><li><a href="install.md">mysql 安装</a></li><li><a href="administration.md">mysql 管理</a></li><li><a href="connection.md">mysql 连接</a></li><li><a href="create-drop-select-database.md">mysql 创建 删除 选择(切换) 数据库</a></li><li><a href="data-type.md">mysql 数据类型</a></li><li><a href="create-show-alter-drop-tables.md">mysql 创建 查询 修改 删除 数据表</a></li><li><a href="insert-select-delete-query.md">mysql 插入 查询 删除 数据</a></li><li><a href="where-like-update-delete.md">Mysql WHERE LIKE子句 UPDATE查询 DELETE删除 UNION操作符</a></li><li><a href="union-operation.md">Mysql UNION操作符</a></li><li><a href="order-by.md">Mysql order-by排序</a></li><li><a href="group-by-statement.md">Mysql group-by分组</a></li><li><a href="join.md">Mysql join连接(多表查询)</a></li><li><a href="null.md">Mysql null值处理</a></li><li><a href="regexp.md">Mysql 正则表达式</a></li><li><a href="transaction.md">Mysql 事务</a></li><li><a href="alter.md">Mysql alter(修改数据表名,修改数据表字段)</a></li><li><a href="index.md">Mysql 索引</a></li><li><a href="temporary-tables.md">Mysql 临时表</a></li><li><a href="clone-tables.md">Mysql 复制表</a></li><li><a href="database-info.md">Mysql 元数据</a></li><li><a href="handling-duplicates.md">Mysql 处理重复数据</a></li><li><a href="sql-injection.md">Mysql sql注入</a></li><li><a href="database-export.md">Mysql 导出数据</a></li><li><a href="database-import.md">Mysql 导入数据</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/administration/"/>
      <url>/blog/2019/06/12/DB/mysql/administration/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL-管理"><a href="#MySQL-管理" class="headerlink" title="MySQL 管理"></a>MySQL 管理</h2><p><a href="README.md">目录</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep mysqld <span class="comment"># 检测服务器是否启动了mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果MySql已经启动，以上命令将输出mysql进程列表， 如果mysql未启动，你可以使用以下命令来启动mysql服务器:</span></span><br><span class="line"></span><br><span class="line">root@host<span class="comment"># cd /usr/bin</span></span><br><span class="line">./mysqld_safe &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭目前运行的 MySQL 服务器, 你可以执行以下命令:</span></span><br><span class="line"></span><br><span class="line">root@host<span class="comment"># cd /usr/bin</span></span><br><span class="line">./mysqladmin -u root -p shutdown</span><br><span class="line">Enter password: ******</span><br></pre></td></tr></table></figure><h3 id="MySQL-用户设置"><a href="#MySQL-用户设置" class="headerlink" title="MySQL 用户设置"></a>MySQL 用户设置</h3><p>果你需要添加 MySQL 用户，你只需要在 mysql 数据库中的 user 表添加新用户即可。</p><p>以下为添加用户的的实例，用户名为guest，密码为guest123，并授权用户可进行 SELECT, INSERT 和 UPDATE操作权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">root@host<span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO user</span><br><span class="line">          (host, user, password,</span><br><span class="line">           select_priv, insert_priv, update_priv)</span><br><span class="line">           VALUES (<span class="string">'localhost'</span>, <span class="string">'guest'</span>,</span><br><span class="line">           PASSWORD(<span class="string">'guest123'</span>), <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>);</span><br><span class="line">Query OK, 1 row affected (0.20 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果出现 ERROR 1364 (HY000): Field 'ssl_cipher' doesn't have a default value</span></span><br><span class="line"><span class="comment"># 是因为指定了严格模式，为了安全，严格模式禁止通过 insert 这种形式直接修改 mysql 库中的 user 表进行添加新用户</span></span><br><span class="line"><span class="built_in">cd</span> /etc/my.conf</span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 改为 sql_mode=NO_ENGINE_SUBSTITUTION</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果还是没有解决，尝试下面方法：</span></span><br><span class="line">mysql&gt; GRANT USAGE ON *.* TO <span class="string">'user01'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'123456'</span> WITH GRANT OPTION;</span><br><span class="line">mysql&gt; SELECT host, user, password FROM user WHERE user = <span class="string">'user01'</span>; <span class="comment"># 查看user01用户</span></span><br><span class="line">+-----------+--------+-------------------------------------------+</span><br><span class="line">| host      | user   | password                                  |</span><br><span class="line">+-----------+--------+-------------------------------------------+</span><br><span class="line">| localhost | user01 | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="line">+-----------+--------+-------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"><span class="comment"># 用户：user01，密码：123456，这样就添加了一个新的用户，</span></span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;  <span class="comment"># 刷新MySQL的系统权限相关表</span></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT host, user, password FROM user WHERE user = <span class="string">'guest'</span>;</span><br><span class="line">+-----------+---------+------------------+</span><br><span class="line">| host      | user    | password         |</span><br><span class="line">+-----------+---------+------------------+</span><br><span class="line">| localhost | guest | 6f8c114b58f2ce9e |</span><br><span class="line">+-----------+---------+------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p> 在添加用户时，请注意使用MySQL提供的 PASSWORD() 函数来对密码进行加密。 你可以在以上实例看到用户密码加密后为： 6f8c114b58f2ce9e.</p><p><strong>注意：</strong> 在 MySQL5.7 中 user 表的 password 已换成了<strong>authentication_string。</strong></p><p><strong>注意：</strong> 在注意需要执行 <strong>FLUSH PRIVILEGES</strong> 语句。 这个命令执行后会重新载入授权表。</p><p>如果你不使用该命令，你就无法使用新创建的用户来连接mysql服务器，除非你重启mysql服务器。</p><p>你可以在创建用户时，为用户指定权限，在对应的权限列中，在插入语句中设置为 ‘Y’ 即可，用户权限列表如下：</p><ul><li>Select_priv</li><li>Insert_priv</li><li>Update_priv</li><li>Delete_priv</li><li>Create_priv</li><li>Drop_priv</li><li>Reload_priv</li><li>Shutdown_priv</li><li>Process_priv</li><li>File_priv</li><li>Grant_priv</li><li>References_priv</li><li>Index_priv</li><li>Alter_priv</li></ul><p>另外一种添加用户的方法为通过SQL的 GRANT 命令，以下命令会给指定数据库TUTORIALS添加用户 test ，密码为 test123 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@host<span class="comment"># mysql -u root -p password;</span></span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP</span><br><span class="line">    -&gt; ON TUTORIALS.*</span><br><span class="line">    -&gt; TO <span class="string">'test'</span>@<span class="string">'localhost'</span></span><br><span class="line">    -&gt; IDENTIFIED BY <span class="string">'test123'</span>;</span><br></pre></td></tr></table></figure><p><em>以上命令会在mysql数据库中的user表创建一条用户信息记录。</em><br>注意: MySQL 的SQL语句以分号 (;) 作为结束标识。</p><h3 id="管理MySQL的命令"><a href="#管理MySQL的命令" class="headerlink" title="管理MySQL的命令"></a>管理MySQL的命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">use TEST; <span class="comment"># 切换数据库</span></span><br><span class="line">SHOW DATABASES; <span class="comment"># 列出 MySQL 数据库管理系统的数据库列表。</span></span><br><span class="line">SHOW TABLES; <span class="comment"># 显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。</span></span><br><span class="line">SHOW COLUMNS FROM;<span class="comment"># 显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。</span></span><br><span class="line">SHOW INDEX FROM;<span class="comment"># 显示数据表的详细索引信息，包括PRIMARY KEY（主键）。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该命令将输出Mysql数据库管理系统的性能及统计信息。</span></span><br><span class="line">SHOW TABLE STATUS LIKE [FROM db_name] [LIKE <span class="string">'pattern'</span>] \G:</span><br><span class="line">mysql&gt; SHOW TABLE STATUS  FROM TEST;   <span class="comment"># 显示数据库 TEST 中所有表的信息</span></span><br><span class="line">mysql&gt; SHOW TABLE STATUS from TEST LIKE <span class="string">'test%'</span>;     <span class="comment"># 表名以test开头的表的信息</span></span><br><span class="line">mysql&gt; SHOW TABLE STATUS from TEST LIKE <span class="string">'test%'</span>\G;   <span class="comment"># 加上 \G，查询结果按列打印</span></span><br></pre></td></tr></table></figure><p><img src="http://www.runoob.com/wp-content/uploads/2014/03/mysql-admin.gif" alt="Gif 图演示："></p><p><a href="connection.md" style="float: right;">&lt;—— mysql 连接</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/blog/2019/06/12/DB/mysql/handling-duplicates/"/>
      <url>/blog/2019/06/12/DB/mysql/handling-duplicates/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql-处理重复数据"><a href="#Mysql-处理重复数据" class="headerlink" title="Mysql 处理重复数据"></a>Mysql 处理重复数据</h2><p><a href="README.md">目录</a></p><h3 id="防止表中出现重复数据"><a href="#防止表中出现重复数据" class="headerlink" title="防止表中出现重复数据"></a>防止表中出现重复数据</h3><blockquote><p>MySQL数据表中设置指定的字段为 <strong>PRIMARY KEY（主键）</strong> 或者 <strong>UNIQUE（唯一）</strong> 索引来保证数据的唯一性。</p></blockquote><p>下表中无索引及主键，所以该表允许出现多条重复记录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE person_tbl(</span><br><span class="line">    first_name CHAR(20),</span><br><span class="line">    last_name CHAR(20),</span><br><span class="line">    sex CHAR(10)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>如果想设置表中字段<code>first_name</code>，<code>last_name</code>数据不能重复，可以设置双主键模式来设置数据的唯一性， 如果设置了双主键，那么那个键的默认值不能为<code>NULL</code>，可设置为<code>NOT NULL</code>。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE person_tbl(</span><br><span class="line">   first_name CHAR(20) NOT NULL,</span><br><span class="line">   last_name CHAR(20) NOT NULL,</span><br><span class="line">   sex CHAR(10),</span><br><span class="line">   PRIMARY KEY (last_name, first_name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>如果设置了唯一索引，那么在插入重复数据时，SQL语句将无法执行成功,并抛出错。</p><p><code>INSER</code> <code>IGNORE</code> <code>INTO</code>与<code>INSERT</code> <code>INTO</code>的区别就是<code>INSERT</code> <code>IGNORE</code>会忽略数据库中已经存在的数据，如果数据库没有数据，就插入新的数据，如果有数据的话就跳过这条数据。这样就可以保留数据库中已经存在数据，达到在间隙中插入数据的目的。</p><p>以下实例使用了<code>INSERT</code> <code>IGNORE</code> <code>INTO</code>，执行后不会出错，也不会向数据表中插入重复数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT IGNORE INTO person_tbl (last_name, first_name) VALUES( &apos;Jay&apos;, &apos;Thomas&apos;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT IGNORE INTO person_tbl (last_name, first_name) VALUES( &apos;Jay&apos;, &apos;Thomas&apos;);</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure></p><p><code>INSERT</code> <code>IGNORE</code> <code>INTO</code>当插入数据时，在设置了记录的唯一性后，如果插入重复数据，将不返回错误，只以警告形式返回。 而<code>REPLACE INTO into</code>如果存在<code>primary</code> 或 <code>unique</code>相同的记录，则先删除掉。再插入新记录。</p><p>另一种设置数据的唯一性方法是添加一个<code>UNIQUE</code>索引，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE person_tbl(</span><br><span class="line">   first_name CHAR(20) NOT NULL,</span><br><span class="line">   last_name CHAR(20) NOT NULL,</span><br><span class="line">   sex CHAR(10)</span><br><span class="line">   UNIQUE (last_name, first_name)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="统计重复数据"><a href="#统计重复数据" class="headerlink" title="统计重复数据"></a>统计重复数据</h3><p>以下将统计表中 <code>first_name</code> 和 <code>last_name</code>的重复记录数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT COUNT(*) as repetitions, last_name, first_name</span><br><span class="line">    -&gt;     FROM person_tbl</span><br><span class="line">    -&gt;     GROUP BY last_name, first_name</span><br><span class="line">    -&gt;     HAVING repetitions &gt; 1;</span><br><span class="line">+-------------+-----------+------------+</span><br><span class="line">| repetitions | last_name | first_name |</span><br><span class="line">+-------------+-----------+------------+</span><br><span class="line">|           2 | Jay       | Thomas     |</span><br><span class="line">+-------------+-----------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>以上查询语句将返回 <code>person_tbl</code> 表中重复的记录数。 一般情况下，查询重复的值，请执行以下操作：</p><ul><li>确定哪一列包含的值可能会重复。</li><li>在列选择列表使用<code>COUNT(*)</code>列出的那些列。</li><li>在<code>GROUP BY</code>子句中列出的列。</li><li><code>HAVING</code>子句设置重复数大于1。</li></ul><h3 id="过滤重复数据"><a href="#过滤重复数据" class="headerlink" title="过滤重复数据"></a>过滤重复数据</h3><p>如果你需要读取不重复的数据可以在 <code>SELECT</code> 语句中使用 <code>DISTINCT</code> 关键字来过滤重复数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT DISTINCT last_name, first_name FROM person_tbl;</span><br><span class="line">+-----------+------------+</span><br><span class="line">| last_name | first_name |</span><br><span class="line">+-----------+------------+</span><br><span class="line">| Jay       | Thomas     |</span><br><span class="line">+-----------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>你也可以使用 <code>GROUP BY</code> 来读取数据表中不重复的数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT last_name, first_name</span><br><span class="line">FROM person_tbl</span><br><span class="line">GROUP BY (last_name, first_name);</span><br></pre></td></tr></table></figure></p><h3 id="删除重复数据"><a href="#删除重复数据" class="headerlink" title="删除重复数据"></a>删除重复数据</h3><p>如果你想删除数据表中的重复数据，你可以使用以下的SQL语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE tmp</span><br><span class="line">SELECT last_name, first_name, sex</span><br><span class="line">FROM person_tbl</span><br><span class="line">GROUP BY (last_name, first_name, sex);</span><br><span class="line"></span><br><span class="line">mysql&gt; DROP TABLE person_tbl;# 删除 person_tbl 数据表</span><br><span class="line"></span><br><span class="line">mysql&gt; ALTER TABLE tmp RENAME TO person_tbl;</span><br></pre></td></tr></table></figure></p><p>当然你也可以在数据表中添加 <code>INDEX（索引）</code> 和 <code>PRIMAY KEY（主键）</code>这种简单的方法来删除表中的重复记录。方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER IGNORE TABLE person_tbl ADD PRIMARY KEY (last_name, first_name);</span><br><span class="line">Query OK, 2 rows affected (0.01 sec)</span><br><span class="line">Records: 2  Duplicates: 1  Warnings: 0</span><br></pre></td></tr></table></figure></p><p><a href="sql-injection.md" style="float: right;">&lt;—— mysql SQL注入</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo配置文件详细说明</title>
      <link href="/blog/2019/06/11/hexo/Hexo%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/"/>
      <url>/blog/2019/06/11/hexo/Hexo%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><blockquote><p>根目录下 <code>_config.yml</code> 文件中修改大部份的配置。</p></blockquote><h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>author</td><td>您的名字</td></tr><tr><td>language</td><td>网站使用的语言,默认是en ，中文网站填zh-CN</td></tr><tr><td>timezone</td><td>网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</td></tr></tbody></table><p>其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。</p><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>url</td><td>网址</td></tr><tr><td>root</td><td>网站根目录</td></tr><tr><td>permalink</td><td>文章的永久链接格式</td><td><code>:year/:month/:day/:title/</code></td></tr><tr><td>permalink_defaults</td><td>永久链接中各部分的默认值</td></tr></tbody></table><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>source_dir</td><td>资源文件夹，存放用户的资源文件</td><td><code>source</code></td></tr><tr><td>public_dir</td><td>公共文件夹，存放生成的静态文件</td><td><code>public</code></td></tr><tr><td>tag_dir</td><td>标签文件夹</td><td><code>tags</code></td></tr><tr><td>archive_dir</td><td>归档文件夹</td><td><code>archives</code></td></tr><tr><td>category_dir</td><td>分类文件夹</td><td><code>categories</code></td></tr><tr><td>code_dir</td><td>代码目录</td><td><code>downloads/code</code></td></tr><tr><td>i18n_dir</td><td>国际化（i18n）文件夹</td><td><code>:lang</code></td></tr><tr><td>skip_render</td><td>跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</td></tr></tbody></table><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>new_post_name</td><td>新文章的文件名称</td><td><code>:title.md</code></td></tr><tr><td>default_layout</td><td>预设布局</td><td><code>post</code></td></tr><tr><td>auto_spacing</td><td>在中文和英文之间加入空格</td></tr><tr><td>titlecase</td><td>把标题转换为 title case</td><td><code>false</code></td></tr><tr><td>external_link</td><td>在新标签中打开链接</td><td><code>true</code></td></tr><tr><td>filename_case</td><td>把文件名称转换为 (1) 小写或 (2) 大写</td><td><code>0</code></td></tr><tr><td>render_drafts</td><td>显示草稿</td><td><code>false</code></td></tr><tr><td>post_asset_folder</td><td>启动 Asset 文件夹(<code>yarn add hexo-asset-image -S</code>)</td><td><code>false</code></td></tr><tr><td>relative_link</td><td>把链接改为与根目录的相对位址</td><td><code>false</code></td></tr><tr><td>future</td><td>显示未来的文章</td><td><code>true</code></td></tr><tr><td>highlight</td><td>代码块的设置</td></tr></tbody></table><h4 id="highlight"><a href="#highlight" class="headerlink" title="highlight"></a>highlight</h4><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>enable</td><td>是否使用代码高亮</td><td><code>true</code></td></tr><tr><td>line_number</td><td>是否显示行号</td><td><code>true</code></td></tr><tr><td>auto_detect</td><td>是否自动检测语言</td><td><code>false</code></td></tr><tr><td>tab_replace</td><td>tab 替代设置</td></tr></tbody></table><h3 id="首页设置"><a href="#首页设置" class="headerlink" title="首页设置"></a>首页设置</h3><p>首页设置，可以自己决定每页显示的文章数量和显示文章的顺序</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>index_generator</td><td>主页设置</td></tr></tbody></table><h4 id="index-generator"><a href="#index-generator" class="headerlink" title="index_generator"></a>index_generator</h4><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>path</td><td>首页的根目录</td></tr><tr><td>per_page</td><td>每页显示文章的数量</td><td><code>10</code></td></tr><tr><td>order_by</td><td>显示文章的顺序</td><td><code>-date</code></td></tr></tbody></table><h3 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类&amp;标签"></a>分类&amp;标签</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>default_category</td><td>默认分类</td><td><code>uncategorized</code></td></tr><tr><td>category_map</td><td>分类别名</td></tr><tr><td>tag_map</td><td>标签别名</td></tr></tbody></table><h3 id="时间-日期格式"><a href="#时间-日期格式" class="headerlink" title="时间/日期格式"></a>时间/日期格式</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>date_format</td><td>日期格式</td><td><code>YYYY-MM-DD</code></td></tr><tr><td>time_format</td><td>时间格式</td><td><code>H:mm:ss</code></td></tr></tbody></table><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>per_page</td><td>每页显示的文章量 (0 = 关闭分页功能)</td><td><code>10</code></td></tr><tr><td>pagination_dir</td><td>分页目录</td><td><code>page</code></td></tr></tbody></table><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>这里是关于网站部署的配置，常用的有部署类型和部署地址</p><table><thead><tr><th>描述</th><th>描述</th></tr></thead><tbody><tr><td>deploy</td><td>网站部署配置</td></tr></tbody></table><h4 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h4><table><thead><tr><th>描述</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>网站部署类型(<code>git</code>)</td></tr><tr><td>repo</td><td>网站部署地址(github仓库地址)</td></tr></tbody></table><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>theme</td><td>当前主题名称。值为false时禁用主题</td></tr><tr><td>deploy</td><td>部署部分的设置</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo安装与使用</title>
      <link href="/blog/2019/06/11/hexo/Hexo%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2019/06/11/hexo/Hexo%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo init &lt;project-name&gt;</span><br></pre></td></tr></table></figure><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml 网站的配置信息，您可以在此配置大部分的参数</span><br><span class="line">├── package.json 应用程序的信息</span><br><span class="line">├── scaffolds 模板文件夹</span><br><span class="line">├── source 资源文件夹，存放用户资源</span><br><span class="line">|   ├── _drafts 草稿</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes 网站主题文件夹</span><br></pre></td></tr></table></figure><h3 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line">hexo new hexo安装与使用</span><br></pre></td></tr></table></figure><h3 id="刪除一篇文章"><a href="#刪除一篇文章" class="headerlink" title="刪除一篇文章"></a>刪除一篇文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf &lt;title&gt;</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo server -p 4567</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--port</code></td><td>重设端口</td></tr><tr><td><code>-s</code>, <code>--static</code></td><td>只使用静态文件</td></tr><tr><td><code>-l</code>, <code>--log</code></td><td>启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo generate <span class="comment"># 可以简写为 g</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-d</code>, <code>--deploy</code></td><td>文件生成后立即部署网站</td></tr><tr><td><code>-w</code>, <code>--watch</code></td><td>监视文件变动</td></tr></tbody></table><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo deploy <span class="comment"># 可以简写为 d</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-g</code>, <code>--generate</code></td><td>部署之前预先生成静态文件</td></tr></tbody></table><h3 id="渲染文件"><a href="#渲染文件" class="headerlink" title="渲染文件"></a>渲染文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-o</code>, <code>--output</code></td><td>设置输出路径</td></tr></tbody></table><h3 id="迁移博客"><a href="#迁移博客" class="headerlink" title="迁移博客"></a>迁移博客</h3><p>从其他博客系统 迁移内容。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo migrate &lt;<span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure></p><h3 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h3><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx  hexo clean</span><br></pre></td></tr></table></figure></p><h3 id="列出网站资料。"><a href="#列出网站资料。" class="headerlink" title="列出网站资料。"></a>列出网站资料。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo list &lt;<span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="显示-Hexo-版本。"><a href="#显示-Hexo-版本。" class="headerlink" title="显示 Hexo 版本。"></a>显示 Hexo 版本。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo version</span><br></pre></td></tr></table></figure><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><ul><li>安全模式</li></ul><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx  hexo --safe</span><br></pre></td></tr></table></figure></p><ul><li>调试模式</li></ul><p>在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx  hexo --debug</span><br></pre></td></tr></table></figure></p><ul><li>简洁模式</li></ul><p>隐藏终端信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx  hexo --silent</span><br></pre></td></tr></table></figure></p><ul><li>自定义配置文件的路径</li></ul><p>自定义配置文件的路径，执行后将不再使用 <strong>_config.yml</strong>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo --config custom.yml</span><br></pre></td></tr></table></figure></p><ul><li>显示草稿</li></ul><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo --draft</span><br></pre></td></tr></table></figure></p><ul><li>自定义 CWD</li></ul><p>自定义当前工作目录（Current working directory）的路径。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo --cwd /path/to/cwd</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>收集的一些安装包</title>
      <link href="/blog/2018/06/29/Installation-package/README/"/>
      <url>/blog/2018/06/29/Installation-package/README/</url>
      
        <content type="html"><![CDATA[<h2 id="收集的一些安装包"><a href="#收集的一些安装包" class="headerlink" title="收集的一些安装包"></a>收集的一些安装包</h2><ul><li><p><a href="https://www.cygwin.com/setup-x86.exe" target="_blank" rel="noopener">cygwin：windows的命令行增强工具</a></p></li><li><p><a href="http://www.itellyou.cn/" target="_blank" rel="noopener">MSDN官网(Windows全家桶下载)</a></p></li><li><p><a href="https://nodejs.org/dist/v6.9.5/node-v6.9.5-x86.msi" target="_blank" rel="noopener">nodejs安装包</a></p></li><li><p><a href="http://vault.centos.org/" target="_blank" rel="noopener">centos下载地址</a></p></li><li><p><a href="ftp://ftp.vim.org/pub/vim/pc/gvim80-069.exe" target="_blank" rel="noopener">gvim安装包</a></p></li><li><p><a href="https://github.com/MSOpenTech/redis/releases" target="_blank" rel="noopener">redis的github下载地址</a></p></li><li><p><a href="http://files.cnblogs.com/files/cuiwenyuan/Redis-3.2.100-Windows-32.zip" target="_blank" rel="noopener">redis的32位地址</a></p></li><li><p><a href="http://101.110.118.47/mirror.pnl.gov/releases/" target="_blank" rel="noopener">ubuntu下载地址</a></p></li><li><p><a href="http://download3.vmware.com/software/wkst/file/VMware-workstation-full-14.1.2-8497320.exe" target="_blank" rel="noopener">vmware pro 下载地址</a></p><p>   FF31K-AHZD1-H8ETZ-8WWEZ-WUUVA CV7T2-6WY5Q-48EWP-ZXY7X-QGUWD</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> install-package </category>
          
      </categories>
      
      
        <tags>
            
            <tag> install-package </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 插入 更新 删除 查询 文档</title>
      <link href="/blog/2018/03/21/DB/mongodb/insert-update-remove-query/"/>
      <url>/blog/2018/03/21/DB/mongodb/insert-update-remove-query/</url>
      
        <content type="html"><![CDATA[<h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><blockquote><p>文档的数据结构和JSON基本一样。</p></blockquote><blockquote><p>所有存储在集合中的数据都是BSON格式。</p></blockquote><blockquote><p>BSON是一种类json的一种二进制形式的存储格式,简称Binary JSON。</p></blockquote><p>MongoDB 使用 <code>insert()</code> 或 <code>save()</code> 方法向集合中插入文档，语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.insert(document)</span><br></pre></td></tr></table></figure></p><p><strong>实例:</strong></p><p>以下文档可以存储在 MongoDB 的 test_tbl 数据库 的 col 集合中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.insert(&#123;title: &apos;MongoDB 教程&apos;,</span><br><span class="line">    description: &apos;MongoDB 是一个 Nosql 数据库&apos;,</span><br><span class="line">    by: &apos;学习网站&apos;,</span><br><span class="line">    url: &apos;http://www.runoob.com&apos;,</span><br><span class="line">    tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">    likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><em>以上实例中 col 是我们的集合名，如果该集合不在该数据库中， MongoDB 会自动创建该集合并插入文档。</em></p><p>查看已插入文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.col.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56064886ade2f21f36b03134&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;学习网站&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot; ], &quot;likes&quot; : 100 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>我们也可以将数据定义为一个变量，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; document=(&#123;title: &apos;MongoDB 教程&apos;,</span><br><span class="line">    description: &apos;MongoDB 是一个 Nosql 数据库&apos;,</span><br><span class="line">    by: &apos;学习网站&apos;,</span><br><span class="line">    url: &apos;http://www.runoob.com&apos;,</span><br><span class="line">    tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">    likes: 100</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行后显示结果如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">"title"</span> : <span class="string">"MongoDB 教程"</span>,</span><br><span class="line">        <span class="attr">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</span><br><span class="line">        <span class="attr">"by"</span> : <span class="string">"学习网站"</span>,</span><br><span class="line">        <span class="attr">"url"</span> : <span class="string">"http://www.runoob.com"</span>,</span><br><span class="line">        <span class="attr">"tags"</span> : [</span><br><span class="line">                <span class="string">"mongodb"</span>,</span><br><span class="line">                <span class="string">"database"</span>,</span><br><span class="line">                <span class="string">"NoSQL"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"likes"</span> : <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行插入操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.col.insert(document)</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>插入文档你也可以使用 <code>db.col.save(document)</code> 命令。如果不指定 <code>_id</code> 字段 <code>save()</code> 方法类似于 <code>insert()</code> 方法。如果指定 <code>_id</code> 字段，则会更新该 <code>_id</code> 的数据。</p><p><strong>笔记：</strong></p><p>3.2 版本后还有以下几种语法可用于插入文档:</p><ul><li><strong>db.collection.insertOne():</strong> 向指定集合中插入一条文档数据</li><li><strong>db.collection.insertMany():</strong> 向指定集合中插入多条文档数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#  插入单条数据</span><br><span class="line">&gt; <span class="keyword">var</span> <span class="built_in">document</span> = db.collection.insertOne(&#123;<span class="string">"a"</span>: <span class="number">3</span>&#125;)</span><br><span class="line">&gt; <span class="built_in">document</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"acknowledged"</span> : <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"insertedId"</span> : ObjectId(<span class="string">"571a218011a82a1d94c02333"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#  插入多条数据</span><br><span class="line">&gt; <span class="keyword">var</span> res = db.collection.insertMany([&#123;<span class="string">"b"</span>: <span class="number">3</span>&#125;, &#123;<span class="string">'c'</span>: <span class="number">4</span>&#125;])</span><br><span class="line">&gt; res</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"acknowledged"</span> : <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"insertedIds"</span> : [</span><br><span class="line">                ObjectId(<span class="string">"571a22a911a82a1d94c02337"</span>),</span><br><span class="line">                ObjectId(<span class="string">"571a22a911a82a1d94c02338"</span>)</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><p>MongoDB 使用 <code>update()</code> 和 <code>save()</code> 方法来更新集合中的文档</p><p><strong>update()方法</strong></p><p><code>update()</code> 方法用于更新已存在的文档，语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.collection.update(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &lt;update&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     upsert: &lt;boolean&gt;,</span><br><span class="line">     multi: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>参数说明：</p><ul><li><strong>query :</strong>  <code>update</code>的查询条件，类似<code>sql update</code>查询内<code>where</code>后面的。</li><li><strong>update :</strong>  <code>update</code>的对象和一些更新的操作符（如<code>$,$inc...</code>）等，也可以理解为<code>sql update</code>查询内<code>set</code>后面的</li><li><strong>upsert :</strong>  可选，这个参数的意思是，如果不存在<code>update</code>的记录，是否插入<code>objNew</code>,<code>true</code>为插入，默认是<code>false</code>，不插入。</li><li><strong>multi :</strong>  可选，<code>mongodb</code> 默认是<code>false</code>,只更新找到的第一条记录，如果这个参数为<code>true</code>,就把按条件查出来多条记录全部更新。</li><li><strong>writeConcern :</strong> 可选，抛出异常的级别。</li></ul><p>实例</p><p>我们在集合 col 中插入如下数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.insert(&#123;</span><br><span class="line">    title: &apos;MongoDB 教程&apos;,</span><br><span class="line">    description: &apos;MongoDB 是一个 Nosql 数据库&apos;,</span><br><span class="line">    by: &apos;学习网站&apos;,</span><br><span class="line">    url: &apos;http://www.runoob.com&apos;,</span><br><span class="line">    tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">    likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>接着我们通过 <code>update()</code> 方法来更新标题<code>(title)</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.update(&#123;&apos;title&apos;:&apos;MongoDB 教程&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;MongoDB&apos;&#125;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)   # 输出信息</span><br><span class="line">&gt; db.col.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;56064f89ade2f21f36b03136&quot;),</span><br><span class="line">        &quot;title&quot; : &quot;MongoDB&quot;,</span><br><span class="line">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</span><br><span class="line">        &quot;by&quot; : &quot;学习网站&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</span><br><span class="line">        &quot;tags&quot; : [</span><br><span class="line">                &quot;mongodb&quot;,</span><br><span class="line">                &quot;database&quot;,</span><br><span class="line">                &quot;NoSQL&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;likes&quot; : 100</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>可以看到标题<code>(title)</code>由原来的 <code>&quot;MongoDB 教程&quot;</code> 更新为了 <code>&quot;MongoDB&quot;</code>。</p><p>以上语句只会修改第一条发现的文档，如果你要修改多条相同的文档，则需要设置 multi 参数为 true。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.update(&#123;&apos;title&apos;:&apos;MongoDB 教程&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;MongoDB&apos;&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>save() 方法</strong></p><p><code>save()</code> 方法通过传入的文档来替换已有文档。语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.collection.save(</span><br><span class="line">   &lt;document&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>参数说明：</p><ul><li><strong>document :</strong>  文档数据。</li><li><strong>writeConcern :</strong> 可选，抛出异常的级别。</li></ul><p>实例</p><p>以下实例中我们替换了 <code>_id</code> 为 <code>56064f89ade2f21f36b03136</code> 的文档数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.save(&#123;</span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;56064f89ade2f21f36b03136&quot;),</span><br><span class="line">    &quot;title&quot; : &quot;MongoDB&quot;,</span><br><span class="line">    &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</span><br><span class="line">    &quot;by&quot; : &quot;Runoob&quot;,</span><br><span class="line">    &quot;url&quot; : &quot;http://www.runoob.com&quot;,</span><br><span class="line">    &quot;tags&quot; : [</span><br><span class="line">            &quot;mongodb&quot;,</span><br><span class="line">            &quot;NoSQL&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;likes&quot; : 110</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>替换成功后，我们可以通过 <code>find()</code> 命令来查看替换后的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;56064f89ade2f21f36b03136&quot;),</span><br><span class="line">        &quot;title&quot; : &quot;MongoDB&quot;,</span><br><span class="line">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</span><br><span class="line">        &quot;by&quot; : &quot;Runoob&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</span><br><span class="line">        &quot;tags&quot; : [</span><br><span class="line">                &quot;mongodb&quot;,</span><br><span class="line">                &quot;NoSQL&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;likes&quot; : 110</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>更多实例:</p><p>只更新第一条记录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.update( &#123; &quot;count&quot; : &#123; $gt : 1 &#125; &#125; , &#123; $set : &#123; &quot;test2&quot; : &quot;OK&quot;&#125; &#125; );</span><br></pre></td></tr></table></figure></p><p>全部更新：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.update( &#123; &quot;count&quot; : &#123; $gt : 3 &#125; &#125; , &#123; $set : &#123; &quot;test2&quot; : &quot;OK&quot;&#125; &#125;,false,true );</span><br></pre></td></tr></table></figure></p><p>只添加第一条：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.update( &#123; &quot;count&quot; : &#123; $gt : 4 &#125; &#125; , &#123; $set : &#123; &quot;test5&quot; : &quot;OK&quot;&#125; &#125;,true,false );</span><br></pre></td></tr></table></figure></p><p>全部添加加进去:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.update( &#123; &quot;count&quot; : &#123; $gt : 5 &#125; &#125; , &#123; $set : &#123; &quot;test5&quot; : &quot;OK&quot;&#125; &#125;,true,true );</span><br></pre></td></tr></table></figure></p><p>全部更新：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.update( &#123; &quot;count&quot; : &#123; $gt : 15 &#125; &#125; , &#123; $inc : &#123; &quot;count&quot; : 1&#125; &#125;,false,true );</span><br></pre></td></tr></table></figure></p><p>只更新第一条记录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.update( &#123; &quot;count&quot; : &#123; $gt : 10 &#125; &#125; , &#123; $inc : &#123; &quot;count&quot; : 1&#125; &#125;,false,false );</span><br></pre></td></tr></table></figure></p><p><strong>笔记</strong></p><p>在3.2版本开始，MongoDB提供以下更新集合文档的方法：</p><ul><li><strong>db.collection.updateOne()</strong> 向指定集合更新单个文档</li><li><strong>db.collection.updateMany()</strong> 向指定集合更新多个文档</li></ul><p>首先我们在test集合里插入测试数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use test</span><br><span class="line">db.test_collection.insert( [</span><br><span class="line">&#123;&quot;name&quot;:&quot;abc&quot;,&quot;age&quot;:&quot;25&quot;,&quot;status&quot;:&quot;zxc&quot;&#125;,</span><br><span class="line">&#123;&quot;name&quot;:&quot;dec&quot;,&quot;age&quot;:&quot;19&quot;,&quot;status&quot;:&quot;qwe&quot;&#125;,</span><br><span class="line">&#123;&quot;name&quot;:&quot;asd&quot;,&quot;age&quot;:&quot;30&quot;,&quot;status&quot;:&quot;nmn&quot;&#125;,</span><br><span class="line">] )</span><br></pre></td></tr></table></figure></p><p>更新单个文档<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.test_collection.updateOne(&#123;&quot;name&quot;:&quot;abc&quot;&#125;,&#123;$set:&#123;&quot;age&quot;:&quot;28&quot;&#125;&#125;)</span><br><span class="line">&#123; &quot;acknowledged&quot; : true, &quot;matchedCount&quot; : 1, &quot;modifiedCount&quot; : 1 &#125;</span><br><span class="line">&gt; db.test_collection.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59c8ba673b92ae498a5716af&quot;), &quot;name&quot; : &quot;abc&quot;, &quot;age&quot; : &quot;28&quot;, &quot;status&quot; : &quot;zxc&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59c8ba673b92ae498a5716b0&quot;), &quot;name&quot; : &quot;dec&quot;, &quot;age&quot; : &quot;19&quot;, &quot;status&quot; : &quot;qwe&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59c8ba673b92ae498a5716b1&quot;), &quot;name&quot; : &quot;asd&quot;, &quot;age&quot; : &quot;30&quot;, &quot;status&quot; : &quot;nmn&quot; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>更新多个文档<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.test_collection.updateMany(&#123;&quot;age&quot;:&#123;$gt:&quot;10&quot;&#125;&#125;,&#123;$set:&#123;&quot;status&quot;:&quot;xyz&quot;&#125;&#125;)</span><br><span class="line">&#123; &quot;acknowledged&quot; : true, &quot;matchedCount&quot; : 3, &quot;modifiedCount&quot; : 3 &#125;</span><br><span class="line">&gt; db.test_collection.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59c8ba673b92ae498a5716af&quot;), &quot;name&quot; : &quot;abc&quot;, &quot;age&quot; : &quot;28&quot;, &quot;status&quot; : &quot;xyz&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59c8ba673b92ae498a5716b0&quot;), &quot;name&quot; : &quot;dec&quot;, &quot;age&quot; : &quot;19&quot;, &quot;status&quot; : &quot;xyz&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59c8ba673b92ae498a5716b1&quot;), &quot;name&quot; : &quot;asd&quot;, &quot;age&quot; : &quot;30&quot;, &quot;status&quot; : &quot;xyz&quot; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><ul><li><strong>WriteConcern.NONE:</strong> 没有异常抛出</li><li><strong>WriteConcern.NORMAL:</strong> 仅抛出网络错误异常，没有服务器错误异常</li><li><strong>WriteConcern.SAFE:</strong> 抛出网络错误异常、服务器错误异常；并等待服务器完成写操作。</li><li><strong>WriteConcern.MAJORITY:</strong>  抛出网络错误异常、服务器错误异常；并等待一个主服务器完成写操作。</li><li><strong>WriteConcern.FSYNC_SAFE:</strong>  抛出网络错误异常、服务器错误异常；写操作等待服务器将数据刷新到磁盘。</li><li><strong>WriteConcern.JOURNAL_SAFE:</strong> 抛出网络错误异常、服务器错误异常；写操作等待服务器提交到磁盘的日志文件。</li><li><strong>WriteConcern.REPLICAS_SAFE:</strong> 抛出网络错误异常、服务器错误异常；等待至少2台服务器完成写操作。</li></ul><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><blockquote><p> <code>MongoDB remove()</code>函数是用来移除集合中的数据。</p></blockquote><blockquote><p><code>MongoDB</code>数据更新可以使用<code>update()</code>函数。在执行<code>remove()</code>函数前先执行<code>find()</code>命令来判断执行的条件是否正确，这是一个比较好的习惯。</p></blockquote><p>语法：</p><p><code>remove()</code> 方法的基本语法格式如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.collection.remove(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &lt;justOne&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>MongoDB 是 2.6 版本以后的，语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.collection.remove(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     justOne: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>参数说明：</p><ul><li><strong>query :</strong> （可选）删除的文档的条件。</li><li><strong>justOne :</strong>  （可选）如果设为 <code>true</code> 或 <code>1</code>，则只删除一个文档。</li><li><strong>writeConcern :</strong> （可选）抛出异常的级别。</li></ul><p>实例</p><p>以下文档我们执行两次插入操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.insert(&#123;title: &apos;MongoDB 教程&apos;,</span><br><span class="line">    description: &apos;MongoDB 是一个 Nosql 数据库&apos;,</span><br><span class="line">    by: &apos;学习网站&apos;,</span><br><span class="line">    url: &apos;http://www.runoob.com&apos;,</span><br><span class="line">    tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">    likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>使用 <code>find()</code> 函数查询数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.col.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066169ade2f21f36b03137&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;学习网站&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot; ], &quot;likes&quot; : 100 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5606616dade2f21f36b03138&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;学习网站&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot; ], &quot;likes&quot; : 100 &#125;</span><br></pre></td></tr></table></figure></p><p>接下来我们移除 <code>title</code> 为 <code>&#39;MongoDB 教程&#39;</code> 的文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.remove(&#123;&apos;title&apos;:&apos;MongoDB 教程&apos;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nRemoved&quot; : 2 &#125;)           # 删除了两条数据</span><br><span class="line">&gt;db.col.find()</span><br><span class="line">……                                        # 没有数据</span><br></pre></td></tr></table></figure></p><p>如果你只想删除第一条找到的记录可以设置 <code>justOne</code> 为 <code>1</code>，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</span><br></pre></td></tr></table></figure></p><p>如果你想删除所有数据，可以使用以下方式（类似常规 <code>SQL</code> 的 <code>truncate</code> 命令）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.remove(&#123;&#125;)</span><br><span class="line">&gt;db.col.find()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p><strong>笔记</strong></p><p><code>remove()</code> 方法已经过时了，现在官方推荐使用 <code>deleteOne()</code> 和 <code>deleteMany()</code> 方法。</p><p>如删除集合下全部文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.inventory.deleteMany(&#123;&#125;)</span><br></pre></td></tr></table></figure></p><p>删除 <code>status</code> 等于 <code>A</code> 的全部文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.inventory.deleteMany(&#123; status : &quot;A&quot; &#125;)</span><br></pre></td></tr></table></figure></p><p>删除 <code>status</code> 等于 <code>D</code> 的一个文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.inventory.deleteOne( &#123; status: &quot;D&quot; &#125; )</span><br></pre></td></tr></table></figure></p><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><blockquote><p>MongoDB 查询文档使用 <code>find()</code> 方法。<br><code>find()</code> 方法以非结构化的方式来显示所有文档。</p></blockquote><p>语法：</p><p>MongoDB 查询数据的语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find(query, projection)</span><br></pre></td></tr></table></figure></p><ul><li><strong>query ：</strong> 可选，使用查询操作符指定查询条件</li><li><strong>projection ：</strong> 可选，使用投影操作符指定返回的键。查询时返回文档中所有键值，只需省略该参数即可（默认省略）。</li></ul><p>如果你需要以易读的方式来读取数据，可以使用 <code>pretty()</code> 方法，语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.find().pretty()</span><br></pre></td></tr></table></figure></p><p><code>pretty()</code> 方法以格式化的方式来显示所有文档。</p><p>实例:</p><p>以下实例我们查询了集合 <code>col</code> 中的数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.col.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),</span><br><span class="line">        &quot;title&quot; : &quot;MongoDB 教程&quot;,</span><br><span class="line">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</span><br><span class="line">        &quot;by&quot; : &quot;学习网站&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</span><br><span class="line">        &quot;tags&quot; : [</span><br><span class="line">                &quot;mongodb&quot;,</span><br><span class="line">                &quot;database&quot;,</span><br><span class="line">                &quot;NoSQL&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;likes&quot; : 100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除了 <code>find()</code> 方法之外，还有一个 <code>findOne()</code> 方法，它只返回一个文档。</p><p><strong>MongoDB 与 RDBMS Where 语句比较</strong></p><p>如果你熟悉常规的 <code>SQL</code> 数据，通过下表可以更好的理解 <code>MongoDB</code> 的条件语句查询：</p><table><thead><tr><th>操作</th><th>格式</th><th>范例</th><th>RDBMS中的类似语句</th></tr></thead><tbody><tr><td>等于</td><td>{<key>:<value>}</value></key></td><td>db.col.find({“by”:”学习网站”}).pretty()</td><td>where by = ‘学习网站’</td></tr><tr><td>小于</td><td>{<key>:{$lt:<value>}}</value></key></td><td>db.col.find({“likes”:{$lt:50}}).pretty()</td><td>where likes &lt; 50</td></tr><tr><td>小于或等于</td><td>{<key>:{$lte:<value>}}</value></key></td><td>db.col.find({“likes”:{$lte:50}}).pretty()</td><td>where likes &lt;= 50</td></tr><tr><td>大于</td><td>{<key>:{$gt:<value>}}</value></key></td><td>db.col.find({“likes”:{$gt:50}}).pretty()</td><td>where likes &gt; 50</td></tr><tr><td>大于或等于</td><td>{<key>:{$gte:<value>}}</value></key></td><td>db.col.find({“likes”:{$gte:50}}).pretty()</td><td>where likes &gt;= 50</td></tr><tr><td>不等于</td><td>{<key>:{$ne:<value>}}</value></key></td><td>db.col.find({“likes”:{$ne:50}}).pretty()</td><td>where likes != 50</td></tr></tbody></table><h4 id="MongoDB-AND-条件"><a href="#MongoDB-AND-条件" class="headerlink" title="MongoDB AND 条件"></a>MongoDB AND 条件</h4><p>MongoDB 的 <code>find()</code> 方法可以传入多个键<code>(key)</code>，每个键<code>(key)</code>以逗号隔开，即常规 <code>SQL</code> 的 <code>AND</code> 条件。</p><p>语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.find(&#123;key1:value1, key2:value2&#125;).pretty()</span><br></pre></td></tr></table></figure></p><p>实例</p><p>以下实例通过 <code>by</code> 和 <code>title</code> 键来查询 学习网站 中 <code>MongoDB</code> 教程 的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.col.find(&#123;&quot;by&quot;:&quot;学习网站&quot;, &quot;title&quot;:&quot;MongoDB 教程&quot;&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),</span><br><span class="line">        &quot;title&quot; : &quot;MongoDB 教程&quot;,</span><br><span class="line">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</span><br><span class="line">        &quot;by&quot; : &quot;学习网站&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</span><br><span class="line">        &quot;tags&quot; : [</span><br><span class="line">                &quot;mongodb&quot;,</span><br><span class="line">                &quot;database&quot;,</span><br><span class="line">                &quot;NoSQL&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;likes&quot; : 100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上实例中类似于 <code>WHERE</code> 语句：<code>WHERE by=&#39;学习网站&#39;</code> AND <code>title=&#39;MongoDB 教程&#39;</code></p><p><strong>MongoDB OR 条件</strong></p><p>MongoDB OR 条件语句使用了关键字 <code>$or</code>,语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">         &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure></p><p>实例</p><p>以下实例中，我们演示了查询键 <code>by</code> 值为 学习网站 或键 <code>title</code> 值为 <code>MongoDB</code> 教程 的文档。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.find(&#123;$or:[&#123;&quot;by&quot;:&quot;学习网站&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB 教程&quot;&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),</span><br><span class="line">        &quot;title&quot; : &quot;MongoDB 教程&quot;,</span><br><span class="line">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</span><br><span class="line">        &quot;by&quot; : &quot;学习网站&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</span><br><span class="line">        &quot;tags&quot; : [</span><br><span class="line">                &quot;mongodb&quot;,</span><br><span class="line">                &quot;database&quot;,</span><br><span class="line">                &quot;NoSQL&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;likes&quot; : 100</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p><code>AND</code> 和 <code>OR</code> 联合使用</p><p>以下实例演示了 <code>AND</code> 和 <code>OR</code> 联合使用，类似常规 <code>SQL</code> 语句为： <code>&#39;where likes&gt;50 AND (by = &#39;学习网站&#39; OR title = &#39;MongoDB 教程&#39;)&#39;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.find(&#123;&quot;likes&quot;: &#123;$gt:50&#125;, $or: [&#123;&quot;by&quot;: &quot;学习网站&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB 教程&quot;&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),</span><br><span class="line">        &quot;title&quot; : &quot;MongoDB 教程&quot;,</span><br><span class="line">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</span><br><span class="line">        &quot;by&quot; : &quot;学习网站&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</span><br><span class="line">        &quot;tags&quot; : [</span><br><span class="line">                &quot;mongodb&quot;,</span><br><span class="line">                &quot;database&quot;,</span><br><span class="line">                &quot;NoSQL&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;likes&quot; : 100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>笔记</strong></p><p>补充一下 projection 参数的使用方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find(query, projection)</span><br></pre></td></tr></table></figure></p><p>若不指定 <code>projection，</code>则默认返回所有键，指定 <code>projection</code> 格式如下，有两种模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find(query, &#123;title: 1, by: 1&#125;) // inclusion模式 指定返回的键，不返回其他键</span><br><span class="line">db.collection.find(query, &#123;title: 0, by: 0&#125;) // exclusion模式 指定不返回的键,返回其他键</span><br></pre></td></tr></table></figure></p><p><code>_id</code> 键默认返回，需要主动指定 <code>_id:0</code> 才会隐藏</p><p>两种模式不可混用（因为这样的话无法推断其他键是否应返回）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find(query, &#123;title: 1, by: 0&#125;) // 错误</span><br></pre></td></tr></table></figure></p><p>只能全<code>1</code>或全<code>0</code>，除了在<code>inclusion</code>模式时可以指定_id为0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find(query, &#123;_id:0, title: 1, by: 1&#125;) // 正确</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 索引</title>
      <link href="/blog/2018/03/21/DB/mongodb/indexing/"/>
      <url>/blog/2018/03/21/DB/mongodb/indexing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。</p></blockquote><blockquote><p>这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。</p></blockquote><blockquote><p>索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构</p></blockquote><h4 id="ensureIndex-方法"><a href="#ensureIndex-方法" class="headerlink" title="ensureIndex() 方法"></a>ensureIndex() 方法</h4><p>MongoDB使用 <code>ensureIndex()</code> 方法来创建索引。<br>语法</p><p><code>ensureIndex()</code>方法基本语法格式如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.ensureIndex(&#123;KEY:1&#125;)</span><br></pre></td></tr></table></figure></p><p>语法中 <code>Key</code> 值为你要创建的索引字段，<code>1</code>为指定按升序创建索引，如果你想按降序来创建索引指定为<code>-1</code>即可。<br>实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.ensureIndex(&#123;&quot;title&quot;:1&#125;)</span><br></pre></td></tr></table></figure></p><p><code>ensureIndex()</code> 方法中你也可以设置使用多个字段创建索引（关系型数据库中称作复合索引）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.ensureIndex(&#123;&quot;title&quot;:1,&quot;description&quot;:-1&#125;)</span><br></pre></td></tr></table></figure></p><p><code>ensureIndex()</code> 接收可选参数，可选参数列表如下：</p><table><thead><tr><th>Parameter(参数)</th><th>Type(类型)</th><th>Description(描述)</th></tr></thead><tbody><tr><td>background</td><td>Boolean</td><td>建索引过程会阻塞其它数据库操作，<code>background</code>可指定以后台方式创建索引，即增加 <code>&quot;background&quot;</code> 可选参数。 <code>&quot;background&quot;</code> 默认值为<code>false</code>。</td></tr><tr><td>unique</td><td>Boolean</td><td>建立的索引是否唯一。指定为true创建唯一索引。默认值为false.</td></tr><tr><td>name</td><td>string</td><td>索引的名称。如果未指定，<code>MongoDB</code>的通过连接索引的字段名和排序顺序生成一个索引名称。</td></tr><tr><td>dropDups</td><td>Boolean</td><td>在建立唯一索引时是否删除重复记录,指定 <code>true</code> 创建唯一索引。默认值为 <code>false</code>.</td></tr><tr><td>sparse</td><td>Boolean</td><td>对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 <code>false</code>.</td></tr><tr><td>expireAfterSeconds</td><td>integer</td><td>指定一个以秒为单位的数值，完成 <code>TTL</code>设定，设定集合的生存时间。</td></tr><tr><td>v</td><td>index version</td><td>索引的版本号。默认的索引版本取决于<code>mongod</code>创建索引时运行的版本。</td></tr><tr><td>weights</td><td>document</td><td>索引权重值，数值在 <code>1</code> 到 <code>99,999</code> 之间，表示该索引相对于其他索引字段的得分权重。</td></tr><tr><td>default_language</td><td>string</td><td>对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语</td></tr><tr><td>language_override</td><td>string</td><td>对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的<code>language</code>，默认值为 <code>language</code>.</td></tr></tbody></table><p>实例</p><p>在后台创建索引：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.values.ensureIndex(&#123;open: 1, close: 1&#125;, &#123;background: true&#125;)</span><br></pre></td></tr></table></figure></p><p>通过在创建索引时加<code>background:true</code> 的选项，让创建工作在后台执行</p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 概念解析</title>
      <link href="/blog/2018/03/21/DB/mongodb/databases-documents-collections/"/>
      <url>/blog/2018/03/21/DB/mongodb/databases-documents-collections/</url>
      
        <content type="html"><![CDATA[<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><table><thead><tr><th>SQL术语/概念</th><th>MongoDB术语/概念</th><th>解释/说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>conllection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行/文档</td></tr><tr><td>column</td><td>field</td><td>数据字段/域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td></td><td>表连接，MongoDB不支持</td></tr><tr><td>primary key</td><td>primary key</td><td>主键，MongoDB自动将<code>_id</code>字段设置为主键</td></tr></tbody></table><p>通过下面图例，可更直观的了解<code>mongodb</code>的一些概念</p><p><img src="/blog/.io//Figure-1-Mapping-Table-to-Collection-1.png" alt="MongoDB基本概念"></p><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>一个<code>mongodb</code>中可以建立多个数据库。<br><code>MongoDB</code>的默认数据库为<code>&quot;db&quot;</code>，该数据库存储在<code>data</code>目录中。<br><code>MongoDB</code>的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。<br><code>&quot;show dbs&quot;</code> 命令可以显示所有数据的列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./mongo</span><br><span class="line">MongoDB shell version: 3.0.6</span><br><span class="line">connecting to: test</span><br><span class="line">&gt; show dbs</span><br><span class="line">local  0.078GB</span><br><span class="line">test   0.078GB</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>执行<code>&quot;db&quot;</code>命令可以显示当前数据库对象或集合。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./mongo</span><br><span class="line">MongoDB shell version: 3.0.6</span><br><span class="line">connecting to: test</span><br><span class="line">&gt; db</span><br><span class="line">test</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>运行<code>&quot;use&quot;</code>命令，可以连接一个指定的数据库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; use local</span><br><span class="line">switched to db local</span><br><span class="line">&gt; db</span><br><span class="line">local</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>以上实例命令中，<code>&quot;local&quot;</code> 是你要链接的数据库。</p></blockquote><blockquote><p>数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。</p></blockquote><ul><li>不能是空字符串<code>（&quot;&quot;)</code>。</li><li>不得含有<code>&#39; &#39;（空格)、.、$、/、\和\0 (空字符)</code>。</li><li>应全部小写。</li><li>最多<code>64</code>字节。</li></ul><blockquote><p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</p></blockquote><ul><li><strong>admin：</strong> 从权限的角度来看，这是<code>&quot;root&quot;</code>数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</li><li><strong>local:</strong>  这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li><li><strong>config:</strong>  当<code>Mongo</code>用于分片设置时，<code>config</code>数据库在内部使用，用于保存分片的相关信息。</li></ul><h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><blockquote><p>文档是一组键值<code>(key-value)</code>对(即<code>BSON</code>)。<code>MongoDB</code> 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 <code>MongoDB</code> 非常突出的特点。</p></blockquote><p>一个简单的文档例子如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"site"</span>:<span class="string">"www.runoob.com"</span>, <span class="attr">"name"</span>:<span class="string">"菜鸟教程"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>下表列出了 <code>RDBMS</code> 与 <code>MongoDB</code> 对应的术语：</p><table><thead><tr><th>RDBMS</th><th>MongoDB</th></tr></thead><tbody><tr><td>数据库</td><td>数据库</td></tr><tr><td>表格</td><td>集合</td></tr><tr><td>行</td><td>文档</td></tr><tr><td>列</td><td>字段</td></tr><tr><td>表联合</td><td>嵌入文档</td></tr><tr><td>主键</td><td>主键 <code>(MongoDB 提供了 key 为 _id )</code></td></tr></tbody></table><table><thead><tr><th>数据库服务和客户端</th></tr></thead><tbody><tr><td>Mysqld/Oracle</td><td>mongod</td></tr><tr><td>mysql/sqlplus</td><td>mongo</td></tr></tbody></table><p>需要注意的是：</p><ol><li>文档中的键/值对是有序的。</li><li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</li><li><code>MongoDB</code>区分类型和大小写。</li><li><code>MongoDB</code>的文档不能有重复的键。</li><li>文档的键是字符串。除了少数例外情况，键可以使用任意<code>UTF-8</code>字符。</li></ol><p>文档键命名规范：</p><ul><li>键不能含有<code>\0 (空字符)</code>。这个字符用来表示键的结尾。</li><li><code>.</code>和<code>$</code>有特别的意义，只有在特定环境下才能使用。</li><li>以下划线<code>&quot;_&quot;</code>开头的键是保留的(不是严格要求的)。</li></ul><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表格。</p><p>集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p><p>比如，我们可以将以下不同数据结构的文档插入到集合中：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"site"</span>:<span class="string">"www.baidu.com"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"site"</span>:<span class="string">"www.google.com"</span>,<span class="attr">"name"</span>:<span class="string">"Google"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"site"</span>:<span class="string">"www.runoob.com"</span>,<span class="attr">"name"</span>:<span class="string">"菜鸟教程"</span>,<span class="attr">"num"</span>:<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><p>当第一个文档插入时，集合就会被创建。</p><p><strong>合法的集合名</strong></p><ul><li>集合名不能是空字符串<code>&quot;&quot;</code>。</li><li>集合名不能含有<code>\0字符（空字符)</code>，这个字符表示集合名的结尾。</li><li>集合名不能以<code>&quot;system.&quot;</code>开头，这是为系统集合保留的前缀。</li><li>用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现<code>$</code>。　</li></ul><p>如下实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.findOne()</span><br></pre></td></tr></table></figure></p><p><strong>capped collections</strong></p><p><code>Capped collections</code> 就是固定大小的<code>collection</code>。</p><p>它有很高的性能以及队列过期的特性(过期按照插入的顺序). 有点和 <code>&quot;RRD&quot;</code>概念类似。</p><p><code>Capped collections</code>是高性能自动的维护对象的插入顺序。它非常适合类似记录日志的功能 和标准的<code>collection</code>不同，你必须要显式的创建一个<code>capped collection</code>， 指定一个<code>collection</code>的大小，单位是字节。<code>collection</code>的数据存储空间值提前分配的。</p><p>要注意的是指定的存储大小包含了数据库的头信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(&quot;mycoll&quot;, &#123;capped:true, size:100000&#125;)</span><br></pre></td></tr></table></figure></p><ul><li>在<code>capped collection</code>中，你能添加新的对象。</li><li>能进行更新，然而，对象不会增加存储空间。如果增加，更新就会失败 。</li><li>数据库不允许进行删除。使用<code>drop()</code>方法删除<code>collection</code>所有的行。</li><li>注意: 删除之后，你必须显式的重新创建这个<code>collection</code>。</li><li>在<code>32bit</code>机器中，<code>capped collection</code>最大存储为<code>1e9( 1X109)</code>个字节。</li></ul><h4 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h4><p>数据库的信息是存储在集合中。它们使用了系统的命名空间：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbname.system.*</span><br></pre></td></tr></table></figure></p><p>在<code>MongoDB</code>数据库中名字空间 <code>&lt;dbname&gt;.system.*</code> 是包含多种系统信息的特殊集合<code>(Collection)</code>，如下:</p><table><thead><tr><th>集合命名空间</th><th>描述</th></tr></thead><tbody><tr><td>dbname.system.namespaces</td><td>列出所有名字空间。</td></tr><tr><td>dbname.system.indexes</td><td>列出所有索引。</td></tr><tr><td>dbname.system.profile</td><td>包含数据库概要<code>(profile)</code>信息。</td></tr><tr><td>dbname.system.users</td><td>列出所有可访问数据库的用户。</td></tr><tr><td>dbname.local.sources</td><td>包含复制对端<code>（slave）</code>的服务器信息和状态。</td></tr></tbody></table><p>对于修改系统集合中的对象有如下限制。</p><p>在<code></code>插入数据，可以创建索引。但除此之外该表信息是不可变的(特殊的<code>drop index</code>命令将自动更新相关信息)。</p><p><code></code>是可修改的。 <code></code>是可删除的。</p><h4 id="MongoDB-数据类型"><a href="#MongoDB-数据类型" class="headerlink" title="MongoDB 数据类型"></a>MongoDB 数据类型</h4><p>下表为MongoDB中常用的几种数据类型</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>字符串。存储数据常用的数据类型。在 <code>MongoDB</code> 中，<code>UTF-8</code> 编码的字符串才是合法的。</td></tr><tr><td>Integer</td><td>整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td></tr><tr><td>Boolean</td><td>布尔值。用于存储布尔值（真/假）。</td></tr><tr><td>Double</td><td>双精度浮点值。用于存储浮点值。</td></tr><tr><td>Min/Max keys</td><td>将一个值与 <code>BSON（二进制的 JSON）</code>元素的最低值和最高值相对比。</td></tr><tr><td>Array</td><td>用于将数组或列表或多个值存储为一个键。</td></tr><tr><td>Timestamp</td><td>时间戳。记录文档修改或添加的具体时间。</td></tr><tr><td>Object</td><td>用于内嵌文档。</td></tr><tr><td>Null</td><td>用于创建空值。</td></tr><tr><td>Symbol</td><td>符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td></tr><tr><td>Date</td><td>日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建<code>Date</code> 对象，传入年月日信息。</td></tr><tr><td>Object ID</td><td>对象 ID。用于创建文档的 ID。</td></tr><tr><td>Binary Data</td><td>二进制数据。用于存储二进制数据。</td></tr><tr><td>Code</td><td>代码类型。用于在文档中存储 JavaScript 代码。</td></tr><tr><td>Regular expression</td><td>正则表达式类型。用于存储正则表达式。</td></tr></tbody></table><p>下面说明下几种重要的数据类型。</p><h4 id="ObjectId"><a href="#ObjectId" class="headerlink" title="ObjectId"></a>ObjectId</h4><p><code>ObjectId</code> 类似唯一主键，可以很快的去生成和排序，包含 <code>12 bytes，</code>含义是：</p><ul><li>前 <code>4</code> 个字节表示创建 <code>unix</code>时间戳,格林尼治时间 <code>UTC</code> 时间，比北京时间晚了 <code>8</code> 个小时</li><li>接下来的 <code>3</code> 个字节是机器标识码</li><li>紧接的两个字节由进程 <code>id</code> 组成 <code>PID</code></li><li>最后三个字节是随机数</li></ul><p><img src="/blog/.io//articlex.jpeg" alt="ObjectId解释"></p><p><code>MongoDB</code> 中存储的文档必须有一个 <code>_id</code> 键。这个键的值可以是任何类型的，默认是个 <code>ObjectId</code> 对象</p><p>由于 <code>ObjectId</code> 中保存了创建的时间戳，所以你不需要为你的文档保存时间戳字段，你可以通过 <code>getTimestamp</code> 函数来获取文档的创建时间:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; var newObject = ObjectId()</span><br><span class="line">&gt; newObject.getTimestamp()</span><br><span class="line">ISODate(&quot;2017-11-25T07:21:10Z&quot;)</span><br></pre></td></tr></table></figure><p>ObjectId 转为字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; newObject.str</span><br><span class="line">5a1919e63df83ce79df8b38f</span><br></pre></td></tr></table></figure><p><strong>字符串</strong><br><strong><em>BSON 字符串都是 UTF-8 编码。</em></strong></p><p><strong>时间戳</strong></p><p><code>BSON</code> 有一个特殊的时间戳类型用于 <code>MongoDB</code> 内部使用，与普通的 日期 类型不相关。 时间戳值是一个 <code>64</code> 位的值。其中：</p><ul><li>前32位是一个 <code>time_t</code> 值（与<code>Unix</code>新纪元相差的秒数）</li><li>后32位是在某秒中操作的一个递增的序数</li></ul><p>在单个 mongod 实例中，时间戳值通常是唯一的。</p><p>在复制集中， <code>oplog</code> 有一个 <code>ts</code> 字段。这个字段中的值使用<code>BSON</code>时间戳表示了操作时间。</p><p><em>BSON 时间戳类型主要用于 MongoDB 内部使用。在大多数情况下的应用开发中，你可以使用 BSON 日期类型。</em></p><p><strong>日期</strong></p><p>表示当前距离 Unix新纪元（1970年1月1日）的毫秒数。日期类型是有符号的, 负数表示 1970 年之前的日期.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; var mydate1 = new Date()     //格林尼治时间</span><br><span class="line">&gt; mydate1</span><br><span class="line">ISODate(&quot;2018-03-04T14:58:51.233Z&quot;)</span><br><span class="line">&gt; typeof mydate1</span><br><span class="line">object</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; var mydate2 = ISODate() //格林尼治时间</span><br><span class="line">&gt; mydate2</span><br><span class="line">ISODate(&quot;2018-03-04T15:00:45.479Z&quot;)</span><br><span class="line">&gt; typeof mydate2</span><br><span class="line">object</span><br></pre></td></tr></table></figure><p>这样创建的时间是日期类型，可以使用 JS 中的 Date 类型的方法。</p><p>返回一个时间类型的字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; var mydate1str = mydate1.toString()</span><br><span class="line">&gt; mydate1str</span><br><span class="line">Sun Mar 04 2018 14:58:51 GMT+0000 (UTC)</span><br><span class="line">&gt; typeof mydate1str</span><br><span class="line">string</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Date()</span><br><span class="line">Sun Mar 04 2018 15:02:59 GMT+0000 (UTC)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 创建 删除 数据库</title>
      <link href="/blog/2018/03/21/DB/mongodb/create-dropdatabase-database/"/>
      <url>/blog/2018/03/21/DB/mongodb/create-dropdatabase-database/</url>
      
        <content type="html"><![CDATA[<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use DATABASE_NAME</span><br></pre></td></tr></table></figure><p>如果数据库不存在，则创建数据库，否则切换到指定的数据库</p><p>实例：</p><p>创建<code>test_tbl</code>,查看当前数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; use test_tbl</span><br><span class="line">switched to db test_tbl</span><br><span class="line">&gt; db</span><br><span class="line">test_tbl</span><br></pre></td></tr></table></figure></p><p>查看所有数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br></pre></td></tr></table></figure></p><p>可以看到，我们刚创建的数据库 test_tbl 并不在数据库的列表中， 要显示它，我们需要向 test_tbl 数据库插入一些数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; use test_tbl</span><br><span class="line">switched to db test_tbl</span><br><span class="line">&gt;  db.test_tbl.insert(&#123;&quot;name&quot;:&quot;资源共享&quot;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt; show dbs</span><br><span class="line">admin     0.000GB</span><br><span class="line">config    0.000GB</span><br><span class="line">local     0.000GB</span><br><span class="line">test_tbl  0.000GB</span><br></pre></td></tr></table></figure></p><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><p>删除当前数据库，默认为<code>test</code>,可以使用 <code>db</code>命令查询当前数据库名</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs # 首先，查看所有数据库</span><br><span class="line">admin     0.000GB</span><br><span class="line">config    0.000GB</span><br><span class="line">local     0.000GB</span><br><span class="line">test_tbl  0.000GB</span><br><span class="line">&gt; use test_tbl# 切换到 test_tbl 数据库</span><br><span class="line">switched to db test_tbl</span><br><span class="line">&gt; db.dropDatabase() # 删除当前数据库</span><br><span class="line">&#123; &quot;dropped&quot; : &quot;test_tbl&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt; show dbs# 查看是否删除</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p><strong>删除集合</strong></p><p>删除集合语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.drop()</span><br></pre></td></tr></table></figure></p><p>下面实例 删除 <code>test_tbl</code>数据库中的集合 <code>site</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; use test_tbl</span><br><span class="line">switched to db test_tbl</span><br><span class="line">&gt; show tables</span><br><span class="line">site</span><br><span class="line">&gt; db.site.drop()</span><br><span class="line">true</span><br><span class="line">&gt; show tables</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 创建 删除 集合</title>
      <link href="/blog/2018/03/21/DB/mongodb/create-delete-collection/"/>
      <url>/blog/2018/03/21/DB/mongodb/create-delete-collection/</url>
      
        <content type="html"><![CDATA[<h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(name, options)</span><br></pre></td></tr></table></figure></p><p>参数说明：</p><ul><li>name: 要创建的集合名称</li><li>options: 可选参数，指定有关内存大小及索引的选项</li></ul><p>options 参数如下：</p><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>布尔</td><td>（可选）如果为 <code>true</code>，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。 <strong>当该值为 true 时，必须指定 <code>size</code> 参数。</strong></td></tr><tr><td>autoIndexId</td><td>布尔</td><td>（可选）如为 <code>true</code>，自动在 <code>_id</code> 字段创建索引。默认为 <code>false</code>。</td></tr><tr><td>size</td><td>数值</td><td>（可选）为固定集合指定一个最大值（以字节计）。如果 <code>capped</code> 为 <code>true</code>，也需要指定该字段。</td></tr><tr><td>max</td><td>数值</td><td>（可选）指定固定集合中包含文档的最大数量。</td></tr></tbody></table><p><em>在插入文档时，<code>MongoDB</code> 首先检查固定集合的 <code>size</code> 字段，然后检查 <code>max</code> 字段。</em></p><p>实例:</p><p>在 test_tbl 数据库中创建 user 集合：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; use test_tbl</span><br><span class="line">switched to db test</span><br><span class="line">&gt; db.createCollection(&quot;user&quot;)</span><br><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>查看已有集合<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; show collections</span><br><span class="line">user</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>createCollection() 关键参数的用法：<br>创建固定集合 mycol，整个集合空间大小 6142800 KB, 文档最大个数为 10000 个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.createCollection(&quot;mycol&quot;,&#123;capped:true,autoIndexId:true,size:6142800,max:10000&#125;)</span><br><span class="line">&#123;</span><br><span class="line">        &quot;note&quot; : &quot;the autoIndexId option is deprecated and will be removed in a future release&quot;,</span><br><span class="line">        &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在 MongoDB 中，你不需要创建集合。当你插入一些文档时，MongoDB 会自动创建集合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycol2.insert(&#123;name:&quot;资源共享&quot;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt; show collections</span><br><span class="line">mycol</span><br><span class="line">mycol2</span><br><span class="line">user</span><br></pre></td></tr></table></figure><h3 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.drop()</span><br></pre></td></tr></table></figure><p>返回值</p><blockquote><p>如果成功删除选定集合，则 <code>drop()</code> 方法返回 <code>true</code>，否则返回 <code>false</code>。</p></blockquote><p>实例：</p><p>在数据库 <code>test_tbl</code> 中， 可以先通过 <code>show collections</code> 命令查看已存在的集合。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; use test_tbl</span><br><span class="line">switched to db test_tbl</span><br><span class="line">&gt; show collections</span><br><span class="line">mycol</span><br><span class="line">mycol2</span><br><span class="line">user</span><br></pre></td></tr></table></figure></p><p>删除集合<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycol2.drop()</span><br><span class="line">true</span><br></pre></td></tr></table></figure></p><p>通过 <code>show collections</code> 再次查看数据库<code>test_tbl</code>集合<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; show collections</span><br><span class="line">mycol</span><br><span class="line">user</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>从返回结果中可以看出 mycol2 集合已被删除。</p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 连接</title>
      <link href="/blog/2018/03/21/DB/mongodb/connections/"/>
      <url>/blog/2018/03/21/DB/mongodb/connections/</url>
      
        <content type="html"><![CDATA[<h3 id="启动-MongoDB-服务"><a href="#启动-MongoDB-服务" class="headerlink" title="启动 MongoDB 服务"></a>启动 MongoDB 服务</h3><blockquote><p>如何启动 <code>MongoDB</code> 服务，在 <code>MongoDB</code> 安装目录的 <code>bin</code>目录下执行 <code>mongod</code> 即可。</p></blockquote><blockquote><p>执行启动操作后，<code>mongodb</code> 在输出一些必要信息后不会输出任何信息，之后就等待连接的建立，当连接被建立后，就会开始打印日志信息。</p></blockquote><p>标准 URI 连接语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]</span><br></pre></td></tr></table></figure><ul><li><p><strong><em>mongodb</em></strong>:// 这是固定的格式，必须要指定。</p></li><li><p><strong><em>username:password@</em></strong> 可选项，如果设置，在连接数据库服务器之后，驱动都会尝试登陆这个数据库</p></li><li><p><strong><em>host1</em></strong> 必须的指定至少一个<code>host</code>, <code>host1</code> 是这个<code>URI</code>唯一要填写的。它指定了要连接服务器的地址。如果要连接复制集，请指定多个主机地址。</p></li><li><p><strong><em>portX</em></strong> 可选的指定端口，如果不填，默认为<code>27017</code></p></li><li><p><strong><em>/database</em></strong> 如果指定<code>username:password@</code>，连接并验证登陆指定数据库。若不指定，默认打开 test 数据库。</p></li><li><p><strong><em>?options</em></strong> 是连接选项。如果不使用<code>/database</code>，则前面需要加上<code>/</code>。所有连接选项都是键值对<code>name=value</code>，键值对之间通过<code>&amp;</code>或<code>;（分号）</code>隔开</p></li></ul><p>标准的连接格式包含了多个选项(options)，如下所示：</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>replicaSet=name</td><td>验证<code>replica set</code>的名称。 <code>Impliesconnect=replicaSet.</code></td></tr><tr><td>slaveOk=true/false</td><td><code>true:</code>在<code>connect=direct</code>模式下，驱动会连接第一台机器，即使这台服务器不是主。在<code>connect=replicaSet</code>模式下，驱动会发送所有的写请求到主并且把读取操作分布在其他从服务器。 <br><br> <code>false:</code> 在 <code>connect=direct</code>模式下，驱动会自动找寻主服务器. 在<code>connect=replicaSet</code> 模式下，驱动仅仅连接主服务器，并且所有的读写命令都连接到主服务器。</td></tr><tr><td>safe=true/false</td><td>true: 在执行更新操作之后，驱动都会发送<code>getLastErro</code>r命令来确保更新成功。(还要参考 <code>wtimeoutMS</code>). <br> <code>false:</code> 在每次更新之后，驱动不会发送<code>getLastErro</code>r来确保更新成功。</td></tr><tr><td>w=n</td><td>驱动添加 <code>{ w : n }</code> 到<code>getLastError</code>命令. 应用于<code>safe=true</code>。</td></tr><tr><td>wtimeoutMS=ms</td><td>驱动添加 <code>{ wtimeout : ms }</code> 到 <code>getlasterror</code> 命令. 应用于 <code>safe=true</code>.</td></tr><tr><td>fsync=true/false</td><td><code>true:</code> 驱动添加 <code>{ fsync : true }</code> 到 <code>getlasterror</code> 命令.应用于 <code>safe=true</code>. <br> <code>false:</code> 驱动不会添加到<code>getLastError</code>命令中。</td></tr><tr><td>journal=true/false</td><td>如果设置为 <code>true</code>, 同步到 <code>journal</code> (在提交到数据库前写入到实体中). 应用于 <code>safe=true</code></td></tr><tr><td>connectTimeoutMS=ms</td><td>可以打开连接的时间。</td></tr><tr><td>socketTimeoutMS=ms</td><td>发送和接受<code>sockets</code>的时间。</td></tr></tbody></table><p>实例</p><p>使用默认端口来连接 MongoDB 的服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://localhost</span><br></pre></td></tr></table></figure></p><p>通过 shell 连接 MongoDB 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./mongo</span><br><span class="line">MongoDB shell version: 3.0.6</span><br><span class="line">connecting to: test</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>这时候你返回查看运行 <code>./mongod</code>命令的窗口，可以看到是从哪里连接到<code>MongoDB</code>的服务器，您可以看到如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">……省略信息……</span><br><span class="line">2015-09-25T17:22:27.336+0800 I CONTROL  [initandlisten] allocator: tcmalloc</span><br><span class="line">2015-09-25T17:22:27.336+0800 I CONTROL  [initandlisten] options: &#123; storage: &#123; dbPath: &quot;/data/db&quot; &#125; &#125;</span><br><span class="line">2015-09-25T17:22:27.350+0800 I NETWORK  [initandlisten] waiting for connections on port 27017</span><br><span class="line">2015-09-25T17:22:36.012+0800 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:37310 #1 (1 connection now open)  # 该行表明一个来自本机的连接</span><br><span class="line">……省略信息……</span><br></pre></td></tr></table></figure></p><h4 id="MongoDB-连接命令格式"><a href="#MongoDB-连接命令格式" class="headerlink" title="MongoDB 连接命令格式"></a>MongoDB 连接命令格式</h4><p>使用用户名和密码连接到 <code>MongoDB</code> 服务器，你必须使用 <code>&#39;username:password@hostname/dbname&#39;</code> 格式，<code>&#39;username&#39;</code>为用户名，<code>&#39;password&#39;</code> 为密码。</p><p>使用用户名和密码连接登陆到默认数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./mongo</span><br><span class="line">MongoDB shell version: 3.0.6</span><br><span class="line">connecting to: test</span><br></pre></td></tr></table></figure></p><p>使用用户 <code>admin</code> 使用密码 <code>123456</code> 连接到本地的 <code>MongoDB</code> 服务上。输出结果如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; mongodb://admin:123456@localhost/</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>使用用户名和密码连接登陆到指定数据库，格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://admin:123456@localhost/test</span><br></pre></td></tr></table></figure></p><p>更多连接实例</p><p>连接本地数据库服务器，端口是默认的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://localhost</span><br></pre></td></tr></table></figure></p><p>使用用户名<code>fred，</code>密码<code>foobar</code>登录<code>localhost</code>的<code>admin</code>数据库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://fred:foobar@localhost</span><br></pre></td></tr></table></figure></p><p>使用用户名<code>fred，</code>密码<code>foobar</code>登录<code>localhost</code>的<code>baz</code>数据库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://fred:foobar@localhost/baz</span><br></pre></td></tr></table></figure></p><p>连接 <code>replica pair</code>, 服务器<code>1</code>为<code>example1.com</code>服务器<code>2</code>为<code>example2</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://example1.com:27017,example2.com:27017</span><br></pre></td></tr></table></figure></p><p>连接 <code>replica set</code> 三台服务器 (端口 <code>27017, 27018, 和27019</code>):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://localhost,localhost:27018,localhost:27019</span><br></pre></td></tr></table></figure></p><p>连接 <code>replica set</code> 三台服务器, 写入操作应用在主服务器 并且分布查询到从服务器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://host1,host2,host3/?slaveOk=true</span><br></pre></td></tr></table></figure></p><p>直接连接第一个服务器，无论是<code>replica set</code>一部分或者主服务器或者从服务器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://host1,host2,host3/?connect=direct;slaveOk=true</span><br></pre></td></tr></table></figure></p><p>当你的连接服务器有优先级，还需要列出所有服务器，你可以使用上述连接方式。<br>安全模式连接到localhost:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://localhost/?safe=true</span><br></pre></td></tr></table></figure></p><p>以安全模式连接到<code>replica set</code>，并且等待至少两个复制服务器成功写入，超时时间设置为<code>2秒</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://host1,host2,host3/?safe=true;w=2;wtimeoutMS=2000</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 聚合</title>
      <link href="/blog/2018/03/21/DB/mongodb/aggregate/"/>
      <url>/blog/2018/03/21/DB/mongodb/aggregate/</url>
      
        <content type="html"><![CDATA[<blockquote><p>MongoDB中聚合<code>(aggregate)</code>主要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果。有点类似sql语句中的 <code>count(*)</code>。</p></blockquote><h4 id="aggregate-方法"><a href="#aggregate-方法" class="headerlink" title="aggregate() 方法"></a>aggregate() 方法</h4><p>语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</span><br></pre></td></tr></table></figure></p><p>实例</p><p>集合中的数据如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902c)</span><br><span class="line">   title: &apos;MongoDB Overview&apos;,</span><br><span class="line">   description: &apos;MongoDB is no sql database&apos;,</span><br><span class="line">   by_user: &apos;runoob.com&apos;,</span><br><span class="line">   url: &apos;http://www.runoob.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 100</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902d)</span><br><span class="line">   title: &apos;NoSQL Overview&apos;,</span><br><span class="line">   description: &apos;No sql database is very fast&apos;,</span><br><span class="line">   by_user: &apos;runoob.com&apos;,</span><br><span class="line">   url: &apos;http://www.runoob.com&apos;,</span><br><span class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 10</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   _id: ObjectId(7df78ad8902e)</span><br><span class="line">   title: &apos;Neo4j Overview&apos;,</span><br><span class="line">   description: &apos;Neo4j is no sql database&apos;,</span><br><span class="line">   by_user: &apos;Neo4j&apos;,</span><br><span class="line">   url: &apos;http://www.neo4j.com&apos;,</span><br><span class="line">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</span><br><span class="line">   likes: 750</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>通过以上集合计算每个作者所写的文章数，使用aggregate()计算结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br><span class="line">&#123;</span><br><span class="line">   &quot;result&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;runoob.com&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;_id&quot; : &quot;Neo4j&quot;,</span><br><span class="line">         &quot;num_tutorial&quot; : 1</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上实例类似sql语句： <code>select by_user, count(*) from mycol group by by_user</code></p><p>在上面的例子中，我们通过字段<code>by_user</code>字段对数据进行分组，并计算<code>by_user</code>字段相同值的总和。</p><p>下表展示了一些聚合的表达式:</p><table><thead><tr><th>表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td><code>$sum</code></td><td>计算总和。</td><td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$sum : &quot;$likes&quot;}}}])</code></td></tr><tr><td><code>$avg</code></td><td>计算平均值</td><td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$avg : &quot;$likes&quot;}}}])</code></td></tr><tr><td><code>$min</code></td><td>获取集合中所有文档对应值得最小值。</td><td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$min : &quot;$likes&quot;}}}])</code></td></tr><tr><td><code>$max</code></td><td>获取集合中所有文档对应值得最大值。</td><td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$max : &quot;$likes&quot;}}}])</code></td></tr><tr><td><code>$push</code></td><td>在结果文档中插入值到一个数组中。</td><td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, url : {$push: &quot;$url&quot;}}}])</code></td></tr><tr><td><code>$addToSet</code></td><td>在结果文档中插入值到一个数组中，但不创建副本。</td><td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, url : {$addToSet : &quot;$url&quot;}}}])</code></td></tr><tr><td><code>$first</code></td><td>根据资源文档的排序获取第一个文档数据。</td><td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, first_url : {$first : &quot;$url&quot;}}}])</code></td></tr><tr><td><code>$last</code></td><td>根据资源文档的排序获取最后一个文档数据</td><td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, last_url : {$last : &quot;$url&quot;}}}])</code></td></tr></tbody></table><h4 id="管道的概念"><a href="#管道的概念" class="headerlink" title="管道的概念"></a>管道的概念</h4><blockquote><p>管道在<code>Unix</code>和<code>Linux</code>中一般用于将当前命令的输出结果作为下一个命令的参数。</p></blockquote><blockquote><p><code>MongoDB</code>的聚合管道将<code>MongoDB</code>文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。</p></blockquote><blockquote><p>表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。</p></blockquote><p>这里我们介绍一下聚合框架中常用的几个操作：</p><ul><li><strong>$project：</strong> 修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</li><li><strong>$match：</strong> 用于过滤数据，只输出符合条件的文档。<code>$match</code>使用<code>MongoDB</code>的标准查询操作。</li><li><strong>$limit：</strong> 用来限制<code>MongoDB</code>聚合管道返回的文档数。</li><li><strong>$skip：</strong> 在聚合管道中跳过指定数量的文档，并返回余下的文档。</li><li><strong>$unwind：</strong> 将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</li><li><strong>$group：</strong> 将集合中的文档分组，可用于统计结果。</li><li><strong>$sort：</strong> 将输入文档排序后输出。</li><li><strong>$geoNear：</strong> 输出接近某一地理位置的有序文档。</li></ul><p><strong>管道操作符实例</strong></p><p>1、<code>$project</code>实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.article.aggregate(</span><br><span class="line">    &#123; $project : &#123;</span><br><span class="line">        title : 1 ,</span><br><span class="line">        author : 1 ,</span><br><span class="line">    &#125;&#125;</span><br><span class="line"> );</span><br></pre></td></tr></table></figure></p><p>这样的话结果中就只还有<code>_id</code>,<code>tilte</code>和<code>author</code>三个字段了，默认情况下<code>_id</code>字段是被包含的，如果要想不包含<code>_id</code>话可以这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.article.aggregate(</span><br><span class="line">    &#123; $project : &#123;</span><br><span class="line">        _id : 0 ,</span><br><span class="line">        title : 1 ,</span><br><span class="line">        author : 1</span><br><span class="line">    &#125;&#125;);</span><br></pre></td></tr></table></figure></p><p>2、<code>$match</code>实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.articles.aggregate( [</span><br><span class="line">                        &#123; $match : &#123; score : &#123; $gt : 70, $lte : 90 &#125; &#125; &#125;,</span><br><span class="line">                        &#123; $group: &#123; _id: null, count: &#123; $sum: 1 &#125; &#125; &#125;</span><br><span class="line">                       ] );</span><br></pre></td></tr></table></figure></p><p><code>$match</code>用于获取分数大于70小于或等于90记录，然后将符合条件的记录送到下一阶段<code>$group</code>管道操作符进行处理。</p><p>3、<code>$skip</code>实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.article.aggregate(&#123; $skip : 5 &#125;);</span><br></pre></td></tr></table></figure></p><p>经过<code>$skip</code>管道操作符处理后，前五个文档被”过滤”掉。</p><p><strong>笔记：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</span><br></pre></td></tr></table></figure></p><p>以上实例类似sql语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select by_user as _id, count(*) as num_tutorial from mycol group by by_user</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.articles.aggregate(&#123;</span><br><span class="line">    $project : &#123;</span><br><span class="line">        title: 2,</span><br><span class="line">        by_user: 1,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样子也是可行的。也就是说非0也可以进行表示显示该字段,负数也可以表示显示该字段。</p><p>按日、按月、按年、按周、按小时、按分钟聚合操作如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&apos;m_msg_tb&apos;).aggregate(</span><br><span class="line">[</span><br><span class="line">    &#123;$match:&#123;m_id:10001,mark_time:&#123;$gt:new Date(2017,8,0)&#125;&#125;&#125;,</span><br><span class="line">    &#123;$group: &#123;</span><br><span class="line">       _id: &#123;$dayOfMonth:&apos;$mark_time&apos;&#125;,</span><br><span class="line">        pv: &#123;$sum: 1&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;$sort: &#123;&quot;_id&quot;: 1&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p><p>时间关键字如下：</p><ul><li><strong>$dayOfYear:</strong> 返回该日期是这一年的第几天（全年 366 天）。</li><li><strong>$dayOfMonth:</strong> 返回该日期是这一个月的第几天（1到31）。</li><li><strong>$dayOfWeek:</strong> 返回的是这个周的星期几（1：星期日，7：星期六）。</li><li><strong>$year:</strong> 返回该日期的年份部分。</li><li><strong>$month:</strong>  返回该日期的月份部分（ 1 到 12）。</li><li><strong>$week:</strong>  返回该日期是所在年的第几个星期（ 0 到 53）。</li><li><strong>$hour:</strong>  返回该日期的小时部分。</li><li><strong>$minute:</strong> 返回该日期的分钟部分。</li><li><strong>$second:</strong> 返回该日期的秒部分（以0到59之间的数字形式返回日期的第二部分，但可以是60来计算闰秒）。</li><li><strong>$millisecond:</strong> 返回该日期的毫秒部分（ 0 到 999）。</li><li><strong>$dateToString:</strong>  { $dateToString: { format: , date: } }。</li></ul>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 排序</title>
      <link href="/blog/2018/03/20/DB/mongodb/sort/"/>
      <url>/blog/2018/03/20/DB/mongodb/sort/</url>
      
        <content type="html"><![CDATA[<p><code>sort()</code>方法</p><p>在MongoDB中使用使用<code>sort()</code>方法对数据进行排序，<code>sort()</code>方法可以通过参数指定排序的字段，并使用 <code>1</code> 和 <code>-1</code> 来指定排序的方式，其中 <code>1</code> 为升序排列，而<code>-1</code>是用于降序排列。<br>语法</p><p><code>sort()</code>方法基本语法如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.find().sort(&#123;KEY:1&#125;)</span><br></pre></td></tr></table></figure></p><p>实例</p><p><code>col</code> 集合中的数据如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 &#125;</span><br></pre></td></tr></table></figure></p><p>以下实例演示了 <code>col</code> 集合中的数据按字段 <code>likes</code> 的降序排列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).sort(&#123;&quot;likes&quot;:-1&#125;)</span><br><span class="line">&#123; &quot;title&quot; : &quot;PHP 教程&quot; &#125;</span><br><span class="line">&#123; &quot;title&quot; : &quot;Java 教程&quot; &#125;</span><br><span class="line">&#123; &quot;title&quot; : &quot;MongoDB 教程&quot; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 分片</title>
      <link href="/blog/2018/03/20/DB/mongodb/sharding/"/>
      <url>/blog/2018/03/20/DB/mongodb/sharding/</url>
      
        <content type="html"><![CDATA[<p><strong>分片</strong></p><p>在<code>Mongodb</code>里面存在另一种集群，就是分片技术,可以满足<code>MongoDB</code>数据量大量增长的需求。</p><p>当<code>MongoDB</code>存储海量的数据时，一台机器可能不足以存储数据，也可能不足以提供可接受的读写吞吐量。这时，我们就可以通过在多台机器上分割数据，使得数据库系统能存储和处理更多的数据。</p><p><strong>为什么使用分片?</strong></p><ul><li>复制所有的写入操作到主节点</li><li>延迟的敏感数据会在主节点查询</li><li>单个副本集限制在12个节点</li><li>当请求量巨大时会出现内存不足。</li><li>本地磁盘不足</li><li>垂直扩展价格昂贵</li></ul><h4 id="MongoDB分片"><a href="#MongoDB分片" class="headerlink" title="MongoDB分片"></a>MongoDB分片</h4><p>下图展示了在MongoDB中使用分片集群结构分布：</p><p><img src="/blog/.io//sharding.png" alt="MongoDB分片图"></p><p>上图中主要有如下所述三个主要组件：</p><ul><li><strong>Shard:</strong> 用于存储实际的数据块，实际生产环境中一个<code>shard server</code>角色可由几台机器组个一个<code>replica set</code>承担，防止主机单点故障</li><li><strong>Config Server:</strong> <code>mongod</code>实例，存储了整个 <code>ClusterMetadata</code>，其中包括 <code>chunk</code>信息。</li><li><strong>Query Routers:</strong>    前端路由，客户端由此接入，且让整个集群看上去像单一数据库，前端应用可以透明使用。</li></ul><p><strong>分片实例</strong></p><p>分片结构端口分布如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Shard Server 1：27020</span><br><span class="line">Shard Server 2：27021</span><br><span class="line">Shard Server 3：27022</span><br><span class="line">Shard Server 4：27023</span><br><span class="line">Config Server ：27100</span><br><span class="line">Route Process：40000</span><br></pre></td></tr></table></figure></p><p>步骤一：启动<code>Shard Server</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@100 /] mkdir -p /www/mongoDB/shard/s0</span><br><span class="line">[root@100 /] mkdir -p /www/mongoDB/shard/s1</span><br><span class="line">[root@100 /] mkdir -p /www/mongoDB/shard/s2</span><br><span class="line">[root@100 /] mkdir -p /www/mongoDB/shard/s3</span><br><span class="line">[root@100 /] mkdir -p /www/mongoDB/shard/<span class="built_in">log</span></span><br><span class="line">[root@100 /] /usr/<span class="built_in">local</span>/mongoDB/bin/mongod --port 27020 --dbpath=/www/mongoDB/shard/s0 --logpath=/www/mongoDB/shard/<span class="built_in">log</span>/s0.log --logappend --fork</span><br><span class="line">....</span><br><span class="line">[root@100 /] /usr/<span class="built_in">local</span>/mongoDB/bin/mongod --port 27023 --dbpath=/www/mongoDB/shard/s3 --logpath=/www/mongoDB/shard/<span class="built_in">log</span>/s3.log --logappend --fork</span><br></pre></td></tr></table></figure></p><p>步骤二： 启动<code>Config Server</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@100 /] mkdir -p /www/mongoDB/shard/config</span><br><span class="line">[root@100 /] /usr/<span class="built_in">local</span>/mongoDB/bin/mongod --port 27100 --dbpath=/www/mongoDB/shard/config --logpath=/www/mongoDB/shard/<span class="built_in">log</span>/config.log --logappend --fork</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong> 这里我们完全可以像启动普通<code>mongodb</code>服务一样启动，不需要添加<code>—shardsvr</code>和<code>configsvr</code>参数。因为这两个参数的作用就是改变启动端口的，所以我们自行指定了端口就可以。</p><p>步骤三： 启动<code>Route Process</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongoDB/bin/mongos --port 40000 --configdb localhost:27100 --fork --logpath=/www/mongoDB/shard/<span class="built_in">log</span>/route.log --chunkSize 500</span><br></pre></td></tr></table></figure></p><p><code>mongos</code>启动参数中，<code>chunkSize</code>这一项是用来指定<code>chunk</code>的大小的，单位是<code>MB</code>，默认大小为<code>200MB</code>.</p><p>步骤四： 配置<code>Sharding</code></p><p>接下来，我们使用<code>MongoDB Shell</code>登录到<code>mongos</code>，添加<code>Shard</code>节点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@100 shard] /usr/<span class="built_in">local</span>/mongoDB/bin/mongo admin --port 40000</span><br><span class="line">MongoDB shell version: 2.0.7</span><br><span class="line">connecting to: 127.0.0.1:40000/admin</span><br><span class="line">mongos&gt; db.runCommand(&#123; addshard:<span class="string">"localhost:27020"</span> &#125;)</span><br><span class="line">&#123; <span class="string">"shardAdded"</span> : <span class="string">"shard0000"</span>, <span class="string">"ok"</span> : 1 &#125;</span><br><span class="line">......</span><br><span class="line">mongos&gt; db.runCommand(&#123; addshard:<span class="string">"localhost:27029"</span> &#125;)</span><br><span class="line">&#123; <span class="string">"shardAdded"</span> : <span class="string">"shard0009"</span>, <span class="string">"ok"</span> : 1 &#125;</span><br><span class="line">mongos&gt; db.runCommand(&#123; enablesharding:<span class="string">"test"</span> &#125;) <span class="comment"># 设置分片存储的数据库</span></span><br><span class="line">&#123; <span class="string">"ok"</span> : 1 &#125;</span><br><span class="line">mongos&gt; db.runCommand(&#123; shardcollection: <span class="string">"test.log"</span>, key: &#123; id:1,time:1&#125;&#125;)</span><br><span class="line">&#123; <span class="string">"collectionsharded"</span> : <span class="string">"test.log"</span>, <span class="string">"ok"</span> : 1 &#125;</span><br></pre></td></tr></table></figure></p><p>步骤五： 程序代码内无需太大更改，直接按照连接普通的<code>mongo</code>数据库那样，将数据库连接接入接口<code>40000</code></p><p><strong>笔记</strong></p><ol><li>创建<code>Sharding</code>复制集 <code>rs0</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/<span class="built_in">log</span></span><br><span class="line">mkdir /data/db1</span><br><span class="line">nohup mongod --port 27020 --dbpath=/data/db1 --logpath=/data/<span class="built_in">log</span>/rs0-1.log --logappend --fork --shardsvr --replSet=rs0 &amp;</span><br><span class="line"></span><br><span class="line">mkdir /data/db2</span><br><span class="line">nohup mongod --port 27021 --dbpath=/data/db2 --logpath=/data/<span class="built_in">log</span>/rs0-2.log --logappend --fork --shardsvr --replSet=rs0 &amp;</span><br></pre></td></tr></table></figure></li></ol><p>1.1 复制集rs0配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mongo localhost:27020</span><br><span class="line">&gt; rs.initiate(&#123;_id: &apos;rs0&apos;, members: [&#123;_id: 0, host: &apos;localhost:27020&apos;&#125;, &#123;_id: 1, host: &apos;localhost:27021&apos;&#125;]&#125;)</span><br><span class="line">&gt; rs.isMaster() # 查看主从关系</span><br></pre></td></tr></table></figure><ol start="2"><li>创建Sharding复制集 rs1<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/db3</span><br><span class="line">nohup mongod --port 27030 --dbpath=/data/db3 --logpath=/data/<span class="built_in">log</span>/rs1-1.log --logappend --fork --shardsvr --replSet=rs1 &amp;</span><br><span class="line">mkdir /data/db4</span><br><span class="line">nohup mongod --port 27031 --dbpath=/data/db4 --logpath=/data/<span class="built_in">log</span>/rs1-2.log --logappend --fork --shardsvr --replSet=rs1 &amp;</span><br></pre></td></tr></table></figure></li></ol><p>2.1 复制集rs1配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mongo localhost:27030</span><br><span class="line">&gt; rs.initiate(&#123;_id: &apos;rs1&apos;, members: [&#123;_id: 0, host: &apos;localhost:27030&apos;&#125;, &#123;_id: 1, host: &apos;localhost:27031&apos;&#125;]&#125;)</span><br><span class="line">&gt; rs.isMaster() # 查看主从关系</span><br></pre></td></tr></table></figure></p><ol start="3"><li>创建Config复制集 conf<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/conf1</span><br><span class="line">nohup mongod --port 27100 --dbpath=/data/conf1 --logpath=/data/log/conf-1.log --logappend --fork --configsvr --replSet=conf &amp;</span><br><span class="line">mkdir /data/conf2</span><br><span class="line">nohup mongod --port 27101 --dbpath=/data/conf2 --logpath=/data/log/conf-2.log --logappend --fork --configsvr --replSet=conf &amp;</span><br></pre></td></tr></table></figure></li></ol><p>3.1 复制集conf配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mongo localhost:27100</span><br><span class="line">&gt; rs.initiate(&#123;_id: &apos;conf&apos;, members: [&#123;_id: 0, host: &apos;localhost:27100&apos;&#125;, &#123;_id: 1, host: &apos;localhost:27101&apos;&#125;]&#125;)</span><br><span class="line">&gt; rs.isMaster() # 查看主从关系</span><br></pre></td></tr></table></figure></p><ol start="4"><li>创建Route<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup mongos --port 40000 --configdb conf/localhost:27100,localhost:27101 --fork --logpath=/data/<span class="built_in">log</span>/route.log --logappend &amp;</span><br></pre></td></tr></table></figure></li></ol><p>4.1 设置分片<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># mongo localhost:40000</span><br><span class="line">&gt; use admin</span><br><span class="line">&gt; db.runCommand(&#123; addshard: &apos;rs0/localhost:27020,localhost:27021&apos;&#125;)</span><br><span class="line">&gt; db.runCommand(&#123; addshard: &apos;rs1/localhost:27030,localhost:27031&apos;&#125;)</span><br><span class="line">&gt; db.runCommand(&#123; enablesharding: &apos;test&apos;&#125;)</span><br><span class="line">&gt; db.runCommand(&#123; shardcollection: &apos;test.user&apos;, key: &#123;name: 1&#125;&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 复制（副本集）</title>
      <link href="/blog/2018/03/20/DB/mongodb/replication/"/>
      <url>/blog/2018/03/20/DB/mongodb/replication/</url>
      
        <content type="html"><![CDATA[<blockquote><p>MongoDB复制是将数据同步在多个服务器的过程。</p></blockquote><blockquote><p>复制提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性，并可以保证数据的安全性。</p></blockquote><blockquote><p>复制还允许您从硬件故障和服务中断中恢复数据。</p></blockquote><p><strong>什么是复制?</strong></p><ul><li>保障数据的安全性</li><li>数据高可用性 <code>(24*7)</code></li><li>灾难恢复</li><li>无需停机维护（如备份，重建索引，压缩）</li><li>分布式读取数据</li></ul><h4 id="MongoDB复制原理"><a href="#MongoDB复制原理" class="headerlink" title="MongoDB复制原理"></a>MongoDB复制原理</h4><blockquote><p>mongodb的复制至少需要两个节点。其中一个是主节点，负责处理客户端请求，其余的都是从节点，负责复制主节点上的数据。</p></blockquote><blockquote><p>mongodb各个节点常见的搭配方式为：一主一从、一主多从。</p></blockquote><blockquote><p>主节点记录在其上的所有操作oplog，从节点定期轮询主节点获取这些操作，然后对自己的数据副本执行这些操作，从而保证从节点的数据与主节点一致。</p></blockquote><p>MongoDB复制结构图如下所示：</p><p><img src="/blog/.io//replication.png" alt="MongoDB复制原理图"></p><p>以上结构图中，客户端从主节点读取数据，在客户端写入数据到主节点时， 主节点与从节点进行数据交互保障数据的一致性。</p><p>副本集特征：</p><ul><li>N 个节点的集群</li><li>任何节点可作为主节点</li><li>所有写入操作都在主节点上</li><li>自动故障转移</li><li>自动恢复</li></ul><h4 id="MongoDB副本集设置"><a href="#MongoDB副本集设置" class="headerlink" title="MongoDB副本集设置"></a>MongoDB副本集设置</h4><p>1、关闭正在运行的MongoDB服务器。</p><p>现在我们通过指定 <code>--replSet</code> 选项来启动mongoDB。<code>--replSet</code> 基本语法格式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --port <span class="string">"PORT"</span> --dbpath <span class="string">"YOUR_DB_DATA_PATH"</span> --replSet <span class="string">"REPLICA_SET_INSTANCE_NAME"</span></span><br></pre></td></tr></table></figure></p><p>实例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --port 27017 --dbpath <span class="string">"D:\set up\mongodb\data"</span> --replSet rs0</span><br></pre></td></tr></table></figure></p><p>以上实例会启动一个名为<code>rs0</code>的<code>MongoDB</code>实例，其端口号为<code>27017</code>。</p><p>启动后打开命令提示框并连接上<code>mongoDB</code>服务。</p><p>在<code>Mongo</code>客户端使用命令<code>rs.initiate()</code>来启动一个新的副本集。</p><p>我们可以使用<code>rs.conf()</code>来查看副本集的配置</p><p>查看副本集状态使用 <code>rs.status()</code> 命令</p><h4 id="副本集添加成员"><a href="#副本集添加成员" class="headerlink" title="副本集添加成员"></a>副本集添加成员</h4><p>添加副本集的成员，我们需要使用多台服务器来启动<code>mongo</code>服务。进入<code>Mongo</code>客户端，并使用<code>rs.add()</code>方法来添加副本集的成员。</p><p>语法<br><code>rs.add()</code> 命令基本语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;rs.add(HOST_NAME:PORT)</span><br></pre></td></tr></table></figure></p><p>实例</p><p>假设你已经启动了一个名为<code>mongod1.net</code>，端口号为<code>27017</code>的<code>Mongo</code>服务。 在客户端命令窗口使用<code>rs.add()</code> 命令将其添加到副本集中，命令如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;rs.add(&quot;mongod1.net:27017&quot;)</span><br></pre></td></tr></table></figure></p><p><code>MongoDB</code>中你只能通过主节点将<code>Mongo</code>服务添加到副本集中， 判断当前运行的<code>Mongo</code>服务是否为主节点可以使用命令<code>db.isMaster()</code> 。</p><p><code>MongoDB</code>的副本集与我们常见的主从有所不同，主从在主机宕机后所有服务将停止，而副本集在主机宕机后，副本会接管主节点成为主节点，不会出现宕机的情况。</p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs简单操作mongodb</title>
      <link href="/blog/2018/03/20/DB/mongodb/nodejs-mongodb/"/>
      <url>/blog/2018/03/20/DB/mongodb/nodejs-mongodb/</url>
      
        <content type="html"><![CDATA[<p>node连接mongodb</p><p>通过node连接mongodb数据库，进行增删改查操作</p><p>1.引入模块</p><pre><code>npm install mongodb</code></pre><p>2.链接</p><pre><code>var mongodb=require(&apos;mongodb&apos;);    // 导入nodejs的mongodb模块var server=new mongodb.Server(&apos;localhost&apos;,27017,{auto_reconnect:true});  // 链接本地数据库，mongo默认端口为27017var db=new mongodb.Db(&apos;db_test&apos;,server,{safe:true});db.open(function(err,db){  if(!err){    console.log(&apos;connect&apos;);  }else{    console.log(err);  }});</code></pre><p>3.查询数据(find)</p><pre><code>db.collection(&apos;col&apos;,function(err,col){  col.find().toArray(function(err,docs){    console.log(docs);  })})</code></pre><p>4.新增数据(insert插入)</p><pre><code>db.collection(&apos;col&apos;,function(err,col){  col.insert({name:&apos;bestvist&apos;,age:20},function(err,docs){     console.log(docs);  })})</code></pre><p>5.修改数据(update更新)</p><pre><code>db.collection(&apos;col&apos;,function(err,col){  col.update({name:&apos;bestvist&apos;},{$set:{age:24}},function(err,docs){    console.log(docs);  });})</code></pre><p>6.删除数据(remove)</p><pre><code>db.collection(&apos;col&apos;,fnction(err,col){  col.remove({name:&apos;bestvist&apos;},function(err,docs){    console.log(docs);  });})</code></pre><p>7.断开连接</p><pre><code>db.close();</code></pre><h3 id="mongo-命令"><a href="#mongo-命令" class="headerlink" title="mongo 命令"></a>mongo 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">show dbs                    // 显示所有数据库</span><br><span class="line">use movie                   // 进入名为movie的数据库</span><br><span class="line">db.movie.find(&#123;&#125;)           // 查找movie下的所有数据</span><br><span class="line">db.movie.find(&#123;&#125;).count()   // 查看数据库内的数据条数</span><br><span class="line">db.movie.remove()           // 删除 movie下的所有数据</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 条件操作符</title>
      <link href="/blog/2018/03/20/DB/mongodb/operators/"/>
      <url>/blog/2018/03/20/DB/mongodb/operators/</url>
      
        <content type="html"><![CDATA[<p>描述</p><blockquote><p>条件操作符用于比较两个表达式并从mongoDB集合中获取数据。</p></blockquote><p>MongoDB中条件操作符有：</p><ul><li>(&gt;) 大于 - $gt</li><li>(&lt;) 小于 - $lt</li><li>(&gt;=) 大于等于 - $gte</li><li>(&lt;= ) 小于等于 - $lte</li></ul><p>我们使用的数据库名称为”runoob” 我们的集合名称为”col”，以下为我们插入的数据。</p><p>为了方便测试，我们可以先使用以下命令清空集合 “col” 的数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.remove(&#123;&#125;)</span><br></pre></td></tr></table></figure></p><p>插入以下数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.insert(&#123;</span><br><span class="line">    title: &apos;PHP 教程&apos;,</span><br><span class="line">    description: &apos;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&apos;,</span><br><span class="line">    by: &apos;菜鸟教程&apos;,</span><br><span class="line">    url: &apos;http://www.runoob.com&apos;,</span><br><span class="line">    tags: [&apos;php&apos;],</span><br><span class="line">    likes: 200</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.insert(&#123;title: &apos;Java 教程&apos;,</span><br><span class="line">    description: &apos;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&apos;,</span><br><span class="line">    by: &apos;菜鸟教程&apos;,</span><br><span class="line">    url: &apos;http://www.runoob.com&apos;,</span><br><span class="line">    tags: [&apos;java&apos;],</span><br><span class="line">    likes: 150</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.insert(&#123;title: &apos;MongoDB 教程&apos;,</span><br><span class="line">    description: &apos;MongoDB 是一个 Nosql 数据库&apos;,</span><br><span class="line">    by: &apos;菜鸟教程&apos;,</span><br><span class="line">    url: &apos;http://www.runoob.com&apos;,</span><br><span class="line">    tags: [&apos;mongodb&apos;],</span><br><span class="line">    likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用find()命令查看数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.col.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 &#125;</span><br></pre></td></tr></table></figure></p><h4 id="MongoDB-gt-大于操作符-gt"><a href="#MongoDB-gt-大于操作符-gt" class="headerlink" title="MongoDB (&gt;) 大于操作符 - $gt"></a>MongoDB (&gt;) 大于操作符 - $gt</h4><p>如果你想获取 <code>&quot;col&quot;</code> 集合中 <code>&quot;likes&quot;</code> 大于 <code>100</code> 的数据，你可以使用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.find(&#123;&quot;likes&quot; : &#123;$gt : 100&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>类似于SQL语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from col where likes &gt; 100;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.col.find(&#123;&quot;likes&quot; : &#123;$gt : 100&#125;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><h4 id="MongoDB（-gt-）大于等于操作符-gte"><a href="#MongoDB（-gt-）大于等于操作符-gte" class="headerlink" title="MongoDB（&gt;=）大于等于操作符 - $gte"></a>MongoDB（&gt;=）大于等于操作符 - $gte</h4><p>如果你想获取<code>&quot;col&quot;</code>集合中 <code>&quot;likes&quot;</code> 大于等于 <code>100</code> 的数据，你可以使用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.find(&#123;likes : &#123;$gte : 100&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>类似于SQL语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from col where likes &gt;=100;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.col.find(&#123;likes : &#123;$gte : 100&#125;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><h4 id="MongoDB-lt-小于操作符-lt"><a href="#MongoDB-lt-小于操作符-lt" class="headerlink" title="MongoDB (&lt;) 小于操作符 - $lt"></a>MongoDB (&lt;) 小于操作符 - $lt</h4><p>如果你想获取<code>&quot;col&quot;</code>集合中 <code>&quot;likes&quot;</code> 小于 <code>150</code> 的数据，你可以使用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.find(&#123;likes : &#123;$lt : 150&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>类似于SQL语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from col where likes &lt; 150;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.col.find(&#123;likes : &#123;$lt : 150&#125;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 &#125;</span><br></pre></td></tr></table></figure></p><h4 id="MongoDB-lt-小于操作符-lte"><a href="#MongoDB-lt-小于操作符-lte" class="headerlink" title="MongoDB (&lt;=) 小于操作符 - $lte"></a>MongoDB (&lt;=) 小于操作符 - $lte</h4><p>如果你想获取”col”集合中 “likes” 小于等于 150 的数据，你可以使用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.find(&#123;likes : &#123;$lte : 150&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>类似于SQL语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from col where likes &lt;= 150;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.col.find(&#123;likes : &#123;$lte : 150&#125;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 &#125;</span><br></pre></td></tr></table></figure></p><h4 id="MongoDB-使用-lt-和-gt-查询-lt-和-gt"><a href="#MongoDB-使用-lt-和-gt-查询-lt-和-gt" class="headerlink" title="MongoDB 使用 (&lt;) 和 (&gt;) 查询 - $lt 和 $gt"></a>MongoDB 使用 (&lt;) 和 (&gt;) 查询 - $lt 和 $gt</h4><p>如果你想获取<code>&quot;col&quot;</code>集合中 <code>&quot;likes&quot;</code> 大于<code>100</code>，小于 <code>200</code> 的数据，你可以使用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.find(&#123;likes : &#123;$lt :200, $gt : 100&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>类似于SQL语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select * from col where likes&gt;100 AND  likes&lt;200;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.col.find(&#123;likes : &#123;$lt :200, $gt : 100&#125;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>笔记：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$gt -------- greater than  &gt;</span><br><span class="line"></span><br><span class="line">$gte --------- gt equal  &gt;=</span><br><span class="line"></span><br><span class="line">$lt -------- less than  &lt;</span><br><span class="line"></span><br><span class="line">$lte --------- lt equal  &lt;=</span><br><span class="line"></span><br><span class="line">$ne ----------- not equal  !=</span><br><span class="line"></span><br><span class="line">$eq  --------  equal  =</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB  $type 操作符</title>
      <link href="/blog/2018/03/20/DB/mongodb/operators-type/"/>
      <url>/blog/2018/03/20/DB/mongodb/operators-type/</url>
      
        <content type="html"><![CDATA[<p>描述</p><blockquote><p>$type操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。</p></blockquote><p>MongoDB 中可以使用的类型如下表所示：</p><table><thead><tr><th>类型</th><th>数字</th><th>备注</th></tr></thead><tbody><tr><td>Double</td><td>1</td></tr><tr><td>String</td><td>2</td></tr><tr><td>Object</td><td>3</td></tr><tr><td>Array</td><td>4</td></tr><tr><td>Binary data</td><td>5</td></tr><tr><td>Undefined</td><td>6</td><td>已废弃。</td></tr><tr><td>Object id</td><td>7</td></tr><tr><td>Boolean</td><td>8</td></tr><tr><td>Date</td><td>9</td></tr><tr><td>Null</td><td>10</td></tr><tr><td>Regular Expression</td><td>11</td></tr><tr><td>JavaScript</td><td>13</td></tr><tr><td>Symbol</td><td>14</td></tr><tr><td>JavaScript (with scope)</td><td>15</td></tr><tr><td>32-bit integer</td><td>16</td></tr><tr><td>Timestamp</td><td>17</td></tr><tr><td>64-bit integer</td><td>18</td></tr><tr><td>Min key</td><td>255</td><td>Query with -1.</td></tr><tr><td>Max key</td><td>127</td></tr></tbody></table><p>我们使用的数据库名称为”runoob” 我们的集合名称为”col”，以下为我们插入的数据。</p><p>简单的集合”col”：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.insert(&#123;</span><br><span class="line">    title: &apos;PHP 教程&apos;,</span><br><span class="line">    description: &apos;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&apos;,</span><br><span class="line">    by: &apos;菜鸟教程&apos;,</span><br><span class="line">    url: &apos;http://www.runoob.com&apos;,</span><br><span class="line">    tags: [&apos;php&apos;],</span><br><span class="line">    likes: 200</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.insert(&#123;title: &apos;Java 教程&apos;,</span><br><span class="line">    description: &apos;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&apos;,</span><br><span class="line">    by: &apos;菜鸟教程&apos;,</span><br><span class="line">    url: &apos;http://www.runoob.com&apos;,</span><br><span class="line">    tags: [&apos;java&apos;],</span><br><span class="line">    likes: 150</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.insert(&#123;title: &apos;MongoDB 教程&apos;,</span><br><span class="line">    description: &apos;MongoDB 是一个 Nosql 数据库&apos;,</span><br><span class="line">    by: &apos;菜鸟教程&apos;,</span><br><span class="line">    url: &apos;http://www.runoob.com&apos;,</span><br><span class="line">    tags: [&apos;mongodb&apos;],</span><br><span class="line">    likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用find()命令查看数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.col.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 &#125;</span><br></pre></td></tr></table></figure></p><h4 id="MongoDB-操作符-type-实例"><a href="#MongoDB-操作符-type-实例" class="headerlink" title="MongoDB 操作符 - $type 实例"></a>MongoDB 操作符 - $type 实例</h4><p>如果想获取 <code>&quot;col&quot;</code> 集合中 <code>title</code> 为 <code>String</code> 的数据，你可以使用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.find(&#123;&quot;title&quot; : &#123;$type : 2&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>输出结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 监控</title>
      <link href="/blog/2018/03/20/DB/mongodb/mongostat-mongotop/"/>
      <url>/blog/2018/03/20/DB/mongodb/mongostat-mongotop/</url>
      
        <content type="html"><![CDATA[<blockquote><p>已经安装部署并允许MongoDB服务后，须要了解MongoDB的运行情况，并查看MongoDB的性能。这样在大流量得情况下可以很好的应对并保证MongoDB正常运作。</p></blockquote><blockquote><p>MongoDB中提供了mongostat 和 mongotop 两个命令来监控MongoDB的运行情况。</p></blockquote><p><strong>mongostat 命令</strong></p><p><code>mongostat</code>是<code>mongodb</code>自带的状态检测工具，在命令行下使用。它会间隔固定时间获取<code>mongodb</code>的当前运行状态，并输出。如果你发现数据库突然变慢或者有其他问题的话，你第一手的操作就考虑采用<code>mongostat</code>来查看<code>mongo</code>的状态。</p><p>启动你的<code>Mongod</code>服务，进入到你安装的<code>MongoDB</code>目录下的<code>bin</code>目录， 然后输入<code>mongostat</code>命令，如下所示：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">set</span> <span class="title">up</span>\<span class="title">mongodb</span>\<span class="title">bin</span>&gt;<span class="title">mongostat</span></span></span><br></pre></td></tr></table></figure></p><p>以上命令输出结果如下：</p><p><img src="/blog/.io//mongostat.png" alt="mongostat输出结果图"></p><p><strong>mongotop 命令</strong></p><p><code>mongotop</code>也是<code>mongodb</code>下的一个内置工具，<code>mongotop</code>提供了一个方法，用来跟踪一个<code>MongoDB</code>的实例，查看哪些大量的时间花费在读取和写入数据。 <code>mongotop</code>提供每个集合的水平的统计数据。默认情况下，<code>mongotop</code>返回值的每一秒。</p><p>启动你的<code>Mongod</code>服务，进入到你安装的<code>MongoDB</code>目录下的<code>bin</code>目录， 然后输入<code>mongotop</code>命令，如下所示：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">set</span> <span class="title">up</span>\<span class="title">mongodb</span>\<span class="title">bin</span>&gt;<span class="title">mongotop</span></span></span><br></pre></td></tr></table></figure></p><p>以上命令执行输出结果如下：</p><p><img src="/blog/.io//mongotop.png" alt="mongotop输出结果图"></p><p>带参数实例<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">E:\<span class="title">mongodb</span>-<span class="title">win32</span>-<span class="title">x86_64</span>-2.2.1\<span class="title">bin</span>&gt;<span class="title">mongotop</span> 10</span></span><br></pre></td></tr></table></figure></p><p><img src="/blog/.io//mongotop-10.gif" alt="mongotop 10 输出结果图"></p><p>后面的<code>10</code>是<code>&lt;sleeptime&gt;</code>参数 ，可以不使用，等待的时间长度，以秒为单位，<code>mongotop</code>等待调用之间。通过的默认<code>mongotop</code>返回数据的每一秒。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">E:\<span class="title">mongodb</span>-<span class="title">win32</span>-<span class="title">x86_64</span>-2.2.1\<span class="title">bin</span>&gt;<span class="title">mongotop</span> --<span class="title">locks</span></span></span><br></pre></td></tr></table></figure></p><p>报告每个数据库的锁的使用中，使用<code>mongotop - 锁</code>，这将产生以下输出：</p><p><img src="/blog/.io//mongotop--locks.gif" alt="mongotop 锁 输出结果图"></p><p>输出结果字段说明：</p><ul><li><strong>ns：</strong> 包含数据库命名空间，后者结合了数据库名称和集合。</li><li><strong>db：</strong> 包含数据库的名称。名为 . 的数据库针对全局锁定，而非特定数据库。</li><li><strong>total：</strong> mongod花费的时间工作在这个命名空间提供总额。</li><li><strong>read：</strong> 提供了大量的时间，这mongod花费在执行读操作，在此命名空间。</li><li><strong>write：</strong> 提供这个命名空间进行写操作，这mongod花了大量的时间。</li></ul>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 备份(mongodump)与恢复(mongorestore)</title>
      <link href="/blog/2018/03/20/DB/mongodb/mongodump-mongorestore/"/>
      <url>/blog/2018/03/20/DB/mongodb/mongodump-mongorestore/</url>
      
        <content type="html"><![CDATA[<h4 id="MongoDB数据备份"><a href="#MongoDB数据备份" class="headerlink" title="MongoDB数据备份"></a>MongoDB数据备份</h4><blockquote><p>在<code>Mongodb</code>中我们使用<code>mongodump</code>命令来备份<code>MongoDB</code>数据。该命令可以导出所有数据到指定目录中。</p></blockquote><blockquote><p><code>mongodump</code>命令可以通过参数指定导出的数据量级转存的服务器。</p></blockquote><p>语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;mongodump -h dbhost -d dbname -o dbdirectory</span><br></pre></td></tr></table></figure></p><ul><li><strong>-h：</strong> <code>MongDB</code>所在服务器地址，例如：<code>127.0.0.1</code>，当然也可以指定端口号：<code>127.0.0.1:27017</code></li><li><strong>-d：</strong> 需要备份的数据库实例，例如：<code>test</code></li><li><strong>-o：</strong> 备份的数据存放位置，例如：<code>c:\data\dump</code>，当然该目录需要提前建立，在备份完成后，系统自动在<code>dump</code>目录下建立一个<code>test</code>目录，这个目录里面存放该数据库实例的备份数据。</li></ul><p>实例</p><p>在本地使用 <code>27017</code> 启动你的<code>mongod</code>服务。打开命令提示符窗口，进入<code>MongoDB</code>安装目录的<code>bin</code>目录输入命令<code>mongodump</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;mongodump</span><br></pre></td></tr></table></figure></p><p>执行以上命令后，客户端会连接到ip为 <code>127.0.0.1</code> 端口号为 <code>27017</code> 的<code>MongoDB</code>服务上，并备份所有数据到 <code>bin/dump/</code> 目录中。命令输出结果如下：</p><p><img src="/blog/.io//mongodump.png" alt="mongodump输出结果图"></p><p>mongodump 命令可选参数列表如下所示：</p><table><thead><tr><th>语法</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td><code>mongodump --host HOST_NAME --port PORT_NUMBER</code></td><td>该命令将备份所有<code>MongoDB</code>数据</td><td><code>mongodump --host runoob.com --port 27017</code></td></tr><tr><td><code>mongodump --dbpath DB_PATH --out BACKUP_DIRECTORY</code></td><td></td><td><code>mongodump --dbpath /data/db/ --out /data/backup/</code></td></tr><tr><td><code>mongodump --collection COLLECTION --db DB_NAME</code></td><td>该命令将备份指定数据库的集合。</td><td><code>mongodump --collection mycol --db test</code></td></tr></tbody></table><h4 id="MongoDB数据恢复"><a href="#MongoDB数据恢复" class="headerlink" title="MongoDB数据恢复"></a>MongoDB数据恢复</h4><p>mongodb使用 mongorestore 命令来恢复备份的数据。</p><p>语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;mongorestore -h &lt;hostname&gt;&lt;:port&gt; -d dbname &lt;path&gt;</span><br></pre></td></tr></table></figure></p><ul><li><strong>–host &lt;:port&gt;, -h &lt;:port&gt;：</strong> MongoDB所在服务器地址，默认为： localhost:27017</li><li><strong>–db , -d ：</strong>    需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2</li><li><strong>–drop：</strong> 恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！</li><li><strong><path></path>：</strong> <code>mongorestore</code> 最后的一个参数，设置备份数据所在位置，例如：<code>c:\data\dump\test</code>。你不能同时指定 <code>&lt;path&gt;</code> 和 <code>--dir</code> 选项，<code>--dir</code>也可以设置备份目录。</li><li><strong>–dir：</strong> 指定备份的目录,你不能同时指定 <code>&lt;path&gt;</code> 和 <code>--dir</code> 选项。</li></ul><p>接下来我们执行以下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;mongorestore</span><br></pre></td></tr></table></figure></p><p>执行以上命令输出结果如下：</p><p><img src="/blog/.io//mongorestore.png" alt="mongorestore输出结果图"></p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB Limit与Skip方法</title>
      <link href="/blog/2018/03/20/DB/mongodb/limit-skip/"/>
      <url>/blog/2018/03/20/DB/mongodb/limit-skip/</url>
      
        <content type="html"><![CDATA[<h4 id="MongoDB-Limit-方法"><a href="#MongoDB-Limit-方法" class="headerlink" title="MongoDB Limit() 方法"></a>MongoDB Limit() 方法</h4><p>如果你需要在<code>MongoDB</code>中读取指定数量的数据记录，可以使用<code>MongoDB</code>的<code>Limit</code>方法，<code>limit()</code>方法接受一个数字参数，该参数指定从<code>MongoDB</code>中读取的记录条数。</p><p>语法</p><p><code>limit()</code>方法基本语法如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.find().limit(NUMBER)</span><br></pre></td></tr></table></figure></p><p>实例</p><p>集合 <code>col</code> 中的数据如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 &#125;</span><br></pre></td></tr></table></figure></p><p>以上实例为显示查询文档中的两条记录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.col.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(2)</span><br><span class="line">&#123; &quot;title&quot; : &quot;PHP 教程&quot; &#125;</span><br><span class="line">&#123; &quot;title&quot; : &quot;Java 教程&quot; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p><em>注：如果你们没有指定<code>limit()</code>方法中的参数则显示集合中的所有数据。</em></p><h4 id="MongoDB-Skip-方法"><a href="#MongoDB-Skip-方法" class="headerlink" title="MongoDB Skip() 方法"></a>MongoDB Skip() 方法</h4><p>除了可以使用<code>limit()</code>方法来读取指定数量的数据外，还可以使用<code>skip()</code>方法来跳过指定数量的数据，<code>skip</code>方法同样接受一个数字参数作为跳过的记录条数。<br>语法</p><p><code>skip()</code> 方法脚本语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</span><br></pre></td></tr></table></figure></p><p>实例</p><p>以下实例只会显示第二条文档数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(1).skip(1)</span><br><span class="line">&#123; &quot;title&quot; : &quot;Java 教程&quot; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>注: <code>skip()</code>方法默认参数为 0 。</p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 目录</title>
      <link href="/blog/2018/03/19/DB/mongodb/README/"/>
      <url>/blog/2018/03/19/DB/mongodb/README/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="install.md">MongoDB 安装</a></li><li><a href="nodejs-mongodb.md">MongoDB nodejs简单操作</a></li><li><a href=".md">MongoDB 概念解析</a></li><li><a href="connections.md">MongoDB 连接</a></li><li><a href="create-dropdatabase-database.md">MongoDB 创建 删除 数据库</a></li><li><a href="create-delete-collection.md">MongoDB 创建 删除 集合</a></li><li><a href="insert-update-remove-query.md">MongoDB 插入 更新 删除 查询 文档</a></li><li><a href="operators.md">MongoDB 条件操作符</a></li><li><a href="operators-type.md">MongoDB $type 操作符</a></li><li><a href="limit-skip.md">MongoDB Limit与Skip方法</a></li><li><a href="sort.md">MongoDB sort()方法</a></li><li><a href="indexing.md">MongoDB 索引</a></li><li><a href="aggregate.md">MongoDB 聚合</a></li><li><a href="replication.md">MongoDB 复制（副本集）</a></li><li><a href="sharding.md">MongoDB 分片</a></li><li><a href="mongodump-mongorestore.md">MongoDB 备份(mongodump)与恢复(mongorestore)</a></li><li><a href="mongostat-mongotop.md">MongoDB 监控</a></li><li><a href="nodejs-mongodb.md">MongoDB Node.js 连接 MongoDB</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装MongoDB</title>
      <link href="/blog/2018/03/18/DB/mongodb/install/"/>
      <url>/blog/2018/03/18/DB/mongodb/install/</url>
      
        <content type="html"><![CDATA[<p>下载地址：<a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center?jmp=nav#community</a></p><p>下载完安装包，并解压 <code>tgz</code>（以下演示的是 64 位 Linux上的安装） 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz    <span class="comment"># 下载</span></span><br><span class="line">tar -zxvf mongodb-linux-x86_64-3.0.6.tgz                                   <span class="comment"># 解压</span></span><br><span class="line"></span><br><span class="line">mv  mongodb-linux-x86_64-3.0.6/ /usr/<span class="built_in">local</span>/mongodb                         <span class="comment"># 将解压包拷贝到指定目录</span></span><br></pre></td></tr></table></figure></p><p>MongoDB 的可执行文件位于 bin 目录下，所以可以将其添加到 PATH 路径中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=&lt;mongodb-install-directory&gt;/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p><p><strong><mongodb-install-directory></mongodb-install-directory></strong>  为你 MongoDB 的安装路径。如本文的 /usr/local/mongodb 。</p><h4 id="创建数据库目录"><a href="#创建数据库目录" class="headerlink" title="创建数据库目录"></a>创建数据库目录</h4><ul><li><code>MongoDB</code>的数据存储在<code>data</code>目录的<code>db</code>目录下，但是这个目录在安装过程不会自动创建，所以你需要手动创建<code>data</code>目录，并在<code>data</code>目录中创建<code>db</code>目录。</li><li>以下实例中我们将data目录创建于根目录下(/)。</li></ul><p><em>注意：<code>/data/db</code> 是 <code>MongoDB</code> 默认的启动的数据库路径<code>(--dbpath)</code>。</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/db</span><br></pre></td></tr></table></figure><h4 id="命令行中运行-MongoDB-服务"><a href="#命令行中运行-MongoDB-服务" class="headerlink" title="命令行中运行 MongoDB 服务"></a>命令行中运行 MongoDB 服务</h4><p>可以再命令行中执行<code>mongo</code>安装目录中的<code>bin</code>目录执行<code>mongod</code>命令来启动<code>mongdb</code>服务。</p><p><em>注意：如果你的数据库目录不是/data/db，可以通过 –dbpath 来指定。</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./mongod</span><br><span class="line">2015-09-25T16:39:50.549+0800 I JOURNAL  [initandlisten] journal dir=/data/db/journal</span><br><span class="line">2015-09-25T16:39:50.550+0800 I JOURNAL  [initandlisten] recover : no journal files present, no recovery needed</span><br><span class="line">2015-09-25T16:39:50.869+0800 I JOURNAL  [initandlisten] preallocateIsFaster=true 3.16</span><br><span class="line">2015-09-25T16:39:51.206+0800 I JOURNAL  [initandlisten] preallocateIsFaster=true 3.52</span><br><span class="line">2015-09-25T16:39:52.775+0800 I JOURNAL  [initandlisten] preallocateIsFaster=true 7.7</span><br></pre></td></tr></table></figure><h4 id="MongoDB后台管理-Shell"><a href="#MongoDB后台管理-Shell" class="headerlink" title="MongoDB后台管理 Shell"></a>MongoDB后台管理 Shell</h4><p>如果你需要进入MongoDB后台管理，你需要先打开mongodb装目录的下的bin目录，然后执行mongo命令文件。</p><p>MongoDB Shell是MongoDB自带的交互式Javascript shell,用来对MongoDB进行操作和管理的交互式环境。</p><p>当你进入mongoDB后台后，它默认会链接到 test 文档（数据库）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mongodb/bin</span><br><span class="line">$ ./mongo</span><br><span class="line">MongoDB shell version: 3.0.6</span><br><span class="line">connecting to: <span class="built_in">test</span></span><br><span class="line">Welcome to the MongoDB shell.</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>由于它是一个<code>JavaScript shell</code>，您可以运行一些简单的算术运算:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2+2</span><br><span class="line">4</span><br><span class="line">&gt; 3+6</span><br><span class="line">9</span><br></pre></td></tr></table></figure></p><p>现在让我们插入一些简单的数据，并对插入的数据进行检索：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.test.insert(&#123;x:10&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt; db.test.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5604ff74a274a611b0c990aa&quot;), &quot;x&quot; : 10 &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>第一个命令将数字 10 插入到 test 集合的 x 字段中。</p><h4 id="MongoDb-web-用户界面"><a href="#MongoDb-web-用户界面" class="headerlink" title="MongoDb web 用户界面"></a>MongoDb web 用户界面</h4><p>MongoDB 提供了简单的 HTTP 用户界面。 如果你想启用该功能，需要在启动的时候指定参数 <code>--rest</code> 。</p><p><em>注意：该功能只适用于 MongoDB 3.2 及之前的早期版本。</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./mongod --dbpath=/data/db --rest</span><br></pre></td></tr></table></figure><p><code>MongoDB</code> 的 <code>Web</code> 界面访问端口比服务的端口多<code>1000</code>。</p><p>如果你的<code>MongoDB</code>运行端口使用默认的<code>27017</code>，你可以在端口号为<code>28017</code>访问<code>web</code>用户界面，即地址为：<a href="http://localhost:28017" target="_blank" rel="noopener">http://localhost:28017</a>。</p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows自动运行命令解析</title>
      <link href="/blog/2017/06/06/Automatic_task/README/"/>
      <url>/blog/2017/06/06/Automatic_task/README/</url>
      
        <content type="html"><![CDATA[<h1 id="windows自动运行命令解析"><a href="#windows自动运行命令解析" class="headerlink" title="windows自动运行命令解析"></a>windows自动运行命令解析</h1><blockquote><p>计划命令每24小时运行一次（目录 <code>D:\git_rpo\web_project\gitpush.sh</code> 是git上传的脚本）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /create /sc hourly /st 00:24:00 /tn &quot;Automatic git push&quot; /tr D:\git_rpo\web_project\gitpush.sh</span><br></pre></td></tr></table></figure><p>如果出现<code>错误：无法加载列资源</code>，需修改<code>chcp</code></p><p><img src="/blog/.io//schtask_ERR.png" alt="schtasks错误注释图"></p><h3 id="C-Users-Administrator-gt-schtasks"><a href="#C-Users-Administrator-gt-schtasks" class="headerlink" title="C:\Users\Administrator&gt;schtasks /?"></a>C:\Users\Administrator&gt;schtasks /?</h3><blockquote><p>SCHTASKS /parameter [arguments]</p></blockquote><ul><li>描述:</li></ul><blockquote><p>允许管理员创建、删除、查询、更改、运行和中止本地或远程系统上的计划任务。</p></blockquote><ul><li>参数列表:</li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>/Create</code></td><td>创建新计划任务。</td></tr><tr><td><code>/Delete</code></td><td>删除计划任务。(<code>schtasks /delete /tn 任务名</code>)</td></tr><tr><td><code>/Query</code></td><td>显示所有计划任务。(chcp:查看编码，936为中文GBK 437为美国 ，chcp 437 切换为美国编码才能查询)</td></tr><tr><td><code>/Change</code></td><td>更改计划任务属性。</td></tr><tr><td><code>/Run</code></td><td>按需运行计划任务。</td></tr><tr><td><code>/End</code></td><td>中止当前正在运行的计划任务。</td></tr><tr><td><code>/ShowSid</code></td><td>显示与计划的任务名称相应的安全标识符。</td></tr><tr><td><code>/?</code></td><td>显示此帮助消息。</td></tr></tbody></table><ul><li>Examples:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SCHTASKS</span><br><span class="line">SCHTASKS /?</span><br><span class="line">SCHTASKS /Run /?</span><br><span class="line">SCHTASKS /End /?</span><br><span class="line">SCHTASKS /Create /?</span><br><span class="line">SCHTASKS /Delete /?</span><br><span class="line">SCHTASKS /Query  /?</span><br><span class="line">SCHTASKS /Change /?</span><br><span class="line">SCHTASKS /ShowSid /?</span><br></pre></td></tr></table></figure><h2 id="Schtasks"><a href="#Schtasks" class="headerlink" title="Schtasks"></a>Schtasks</h2><ol><li>安排命令和程序定期运行或在指定时间内运行。从计划表中添加和删除任务，按需要启动和停止任务，显示和更改计划任务。</li></ol><p>若要查看该命令语法，请单击以下命令：</p><h2 id="schtasks-create"><a href="#schtasks-create" class="headerlink" title="schtasks create"></a>schtasks create</h2><blockquote><p>创建新的计划任务。</p></blockquote><ul><li>语法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /create /tn TaskName /tr TaskRun /sc schedule [/mo modifier] [/d day] [/m month[,month...] [/i IdleTime] [/st StartTime] [/sd StartDate] [/ed EndDate] [/s computer [/u [domain\]user /p password]] [/ru &#123;[Domain\]User | <span class="string">"System"</span>&#125; [/rp Password]] /?</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><h3 id="tn-TaskName"><a href="#tn-TaskName" class="headerlink" title="/tn TaskName"></a>/tn TaskName</h3><blockquote><p>指定任务的名称。</p></blockquote><h3 id="tr-TaskRun"><a href="#tr-TaskRun" class="headerlink" title="/tr TaskRun"></a>/tr TaskRun</h3><blockquote><p>指定任务运行的程序或命令。键入可执行文件、脚本文件或批处理文件的完全合格的路径和文件名。如果忽略该路径，SchTasks.exe 将假定文件在 Systemroot\System32 目录下。</p></blockquote><h3 id="sc-schedule"><a href="#sc-schedule" class="headerlink" title="/sc schedule"></a>/sc schedule</h3><p>指定计划类型。有效值为 ‘’’MINUTE、HOURLY、DAILY、WEEKLY、MONTHLY、ONCE、ONSTART、ONLOGON、ONIDLE。’’’值 说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MINUTE、HOURLY、DAILY、WEEKLY、MONTHLY     指定计划的时间单位。</span><br><span class="line">ONCE                任务在指定的日期和时间运行一次。</span><br><span class="line">ONSTART             任务在每次系统启动的时候运行。可以指定启动的日期，或下一次系统启动的时候运行任务。</span><br><span class="line">ONLOGON             每当用户（任意用户）登录的时候，任务就运行。可以指定日期，或在下次用户登录的时候运行任务。</span><br><span class="line">    ONIDLE              只要系统空闲了指定的时间，任务就运行。可以指定日期，或在下次系统空闲的时候运行任务。</span><br></pre></td></tr></table></figure><h3 id="mo-modifier"><a href="#mo-modifier" class="headerlink" title="/mo modifier"></a>/mo modifier</h3><p>指定任务在其计划类型内的运行频率。这个参数对于 MONTHLY 计划是必需的。对于 MINUTE、HOURLY、DAILY 或 WEEKLY 计划，这个参数有效，但也可选。默认值为 1。计划类型 修饰符 说明</p><pre><code>MINUTE      1 ～ 1439     任务每 n 分钟运行一次。HOURLY      1 ～ 23       任务每 n 小时运行一次。DAILY       1 ～ 365      任务每 n 天运行一次。WEEKLY      1 ～ 52       任务每 n 周运行一次。MONTHLY     1 ～ 12       任务每 n 月运行一次。LASTDAY                   任务在月份的最后一天运行。FIRST、SECOND、THIRD、FOURTH、LAST     与 /d day 参数共同使用,并在特定的周和天运行任务。例如，在月份的第三个周三。</code></pre><h3 id="d-dirlist"><a href="#d-dirlist" class="headerlink" title="/d dirlist"></a>/d dirlist</h3><pre><code>指定周或月的一天。只与 WEEKLY 或 MONTHLY 计划共同使用时有效。计划类型 日期值WEEKLY     可选项。有效值是 MON ~ SUN 和 * （每一天）。MON 是默认值。MONTHLY     在使用 FIRST、SECOND、THIRD、FOURTH 或 LAST 修饰符 (/mo) 时，需要 MON ～ SUN 中的某个值。1 ～ 31 是可选的，只在没有修饰符或修饰符为 1 ～ 12 类型时有效。默认值是 1 （月份的第一天）。</code></pre><h3 id="m-month-month…"><a href="#m-month-month…" class="headerlink" title="/m month[,month…]"></a>/m month[,month…]</h3><pre><code>指定一年中的一个月。有效值是 JAN ～ DEC 和 * （每个月）。/m 参数只对于 MONTHLY 计划有效。在使用 LASTDAY 修饰符时，这个参数是必需的。否则，它是可选的，默认值是 * （每个月）。</code></pre><h3 id="i-InitialPageFileSize"><a href="#i-InitialPageFileSize" class="headerlink" title="/i InitialPageFileSize"></a>/i InitialPageFileSize</h3><pre><code>指定任务启动之前计算机空闲多少分钟。键入一个 1 ～ 999 之间的整数。这个参数只对于 ONIDLE 计划有效，而且是必需的。</code></pre><h3 id="st-StartTime"><a href="#st-StartTime" class="headerlink" title="/st StartTime"></a>/st StartTime</h3><pre><code>以 HH:MM:SS 24 小时格式指定时间。默认值是命令完成时的当前本地时间。/st 参数只对于 MINUTE、HOURLY、DAILY、WEEKLY、MONTHLY 和 ONCE 计划有效。它只对于 ONCE 计划是必需的。</code></pre><h3 id="sd-StartDate"><a href="#sd-StartDate" class="headerlink" title="/sd StartDate"></a>/sd StartDate</h3><pre><code>以 MM/DD/YYYY 格式指定任务启动的日期。默认值是当前日期。/sd 参数对于所有的计划有效，但只对于 ONCE 计划是必需的。</code></pre><h3 id="ed-EndDate"><a href="#ed-EndDate" class="headerlink" title="/ed EndDate"></a>/ed EndDate</h3><pre><code>指定任务计划运行的最后日期。此参数是可选的。它对于 ONCE、ONSTART、ONLOGON 或 ONIDLE 计划无效。默认情况下，计划没有结束日期。</code></pre><h3 id="s-Computer"><a href="#s-Computer" class="headerlink" title="/s Computer"></a>/s Computer</h3><pre><code>指定远程计算机的名称或 IP 地址（带有或者没有反斜杠）。默认值是本地计算机。</code></pre><h3 id="u-domain-user"><a href="#u-domain-user" class="headerlink" title="/u [domain]user"></a>/u [domain]user</h3><pre><code>使用特定用户帐户的权限运行命令。默认情况下，使用已登录到运行 SchTasks 的计算机上的用户的权限运行命令。</code></pre><h3 id="p-password"><a href="#p-password" class="headerlink" title="/p password"></a>/p password</h3><pre><code>指定在 /u 参数中指定的用户帐户的密码。如果使用 /u 参数，则需要该参数。</code></pre><h3 id="ru-Domain-User-“System”"><a href="#ru-Domain-User-“System”" class="headerlink" title="/ru {[Domain]User | “System”}"></a>/ru {[Domain]User | “System”}</h3><pre><code>使用指定用户帐户的权限运行任务。默认情况下，使用用户登录到运行 SchTasks 的计算机上的权限运行任务。值 说明[domain\}User?     指定用户帐户。&quot;System&quot; 或 &quot;&quot;     指定操作系统使用的 NT Authority\System 帐户。</code></pre><h3 id="p-Password"><a href="#p-Password" class="headerlink" title="/p Password"></a>/p Password</h3><pre><code>指定用户帐户的密码，该用户帐户在 /u 参数中指定。如果在指定用户帐户的时候忽略了这个参数，SchTasks.exe 会提示您输入密码而且不显示键入的文本。使用 NT Authority\System 帐户权限运行的任务不需要密码，SchTasks.exe 也不会提示索要密码。</code></pre><h3 id><a href="#" class="headerlink" title="/?"></a>/?</h3><pre><code>在命令提示符显示帮助。</code></pre><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><pre><code>* XOX SchTasks.exe 不验证程序文件的位置或用户帐户密码。如果没有为用户帐户输入正确的文件位置或正确的密码，任务仍然可以创建，但不会运行。另外，如果帐户的密码更改或过 期，而且没有更改存储在任务中的密码，那么任务也不会运行。* NT Authority\System 帐户没有交互式登录权限。用户看不到以系统权限运行的程序，不能与之交互。* 每个任务只运行一个程序。但是，可以创建一个批处理文件来启动多个任务，然后计划一个任务来运行该批处理文件。* 只要创建了任务就可对其测试。使用 run 操作来测试任务，然后从 SchedLgU.txt 文件 ( Systemroot\SchedLgU.txt ) 中查阅错误。</code></pre><p>每个计划类型的语法和范例。</p><blockquote><p>若要查看该命令语法，请单击以下命令：</p></blockquote><h3 id="schtasks-create-minute"><a href="#schtasks-create-minute" class="headerlink" title="schtasks create minute"></a>schtasks create minute</h3><ul><li><p>语法</p><p>  schtasks /create /tn TaskName /tr TaskRun /sc minute [/mo {1 - 1439}] [/st StartTime] [/sd StartDate] [/ed EndDate] [/s computer [/u [domain]user /p password]] [/ru {[Domain]User | “System”} [/rp Password]]</p></li><li><p>范例</p></li></ul><blockquote><p>计划任务每 20 分钟运行一次。</p></blockquote><p>下面的命令计划安全脚本 Sec.vbs 每 20 分钟运行一次。由于命令没有包含起始日期或时间，任务在命令完成 20 分钟后启动，此后每当系统运行它就每 20 分钟运行一次。请注意，安全脚本源文件位于远程计算机上，但任务在本地计算机上计划并执行。</p><pre><code>schtasks /create /sc minute /mo 20 /tn &quot;Security Script&quot; /tr \\central\data\scripts\sec.vbs</code></pre><p>作为响应，SchTasks.exe 显示一条消息来说明任务会以当前用户的权限运行并需要当前用户的密码。输入密码时，SchTasks.exe 不显示键入的文本。</p><pre><code>The task will be created under current logged-in user name. Please enter the password ************</code></pre><ul><li>然后 SchTasks.exe 显示一条消息表明已计划该任务：<br>成功：计划任务 “Security Script” 已成功创建。</li></ul><h4 id="查询显示命令计划的任务：SCHTASKS-query-tn-taskname"><a href="#查询显示命令计划的任务：SCHTASKS-query-tn-taskname" class="headerlink" title="查询显示命令计划的任务：SCHTASKS /query /tn taskname"></a>查询显示命令计划的任务：SCHTASKS /query /tn taskname</h4><pre><code>TaskName                  Next Run Time            Status ========================= ======================== ============== Security Script           10:50:00 AM , 4/4/2001</code></pre><h3 id="schtasks-create-hourly"><a href="#schtasks-create-hourly" class="headerlink" title="schtasks create hourly"></a>schtasks create hourly</h3><ul><li><p>语法</p><p>  schtasks /create /tn TaskName /tr TaskRun /sc hourly [/mo {1 - 365}] [/st StartTime] [/sd StartDate] [/ed EndDate] [/s computer [/u [domain]user /p password]] [/ru {[Domain]User | “System”} [/rp Password]]</p></li><li><p>范例</p></li></ul><blockquote><p>计划命令在每小时过五分的时候运行。</p></blockquote><p>下面的命令将计划 MyApp 程序从午夜过后五分钟起每小时运行一次。因为忽略了 /mo 参数，命令使用了小时计划的默认值，即每 (1) 小时。如果该命令在 12:05 A.M 之后生成，程序将在第二天才会运行。</p><pre><code>schtasks /create /sc hourly /st 00:05:00 /tn &quot;My App&quot; /tr c:\apps\myapp.exe</code></pre><blockquote><p>计划命令每五小时运行一次</p></blockquote><p>下面的命令计划 MyApp 程序从 2001 年 3 月的第一天起每五小时运行一次。它使用 /mo 参数来指定间隔时间，使用 /sd 参数来指定起始日期。由于命令没有指定起始时间，当前时间被用作起始时间。</p><pre><code>schtasks /create /sc hourly /mo 5 /sd 03/01/2001 /tn &quot;My App&quot; /tr c:\apps\myapp.exe</code></pre><h3 id="schtasks-create-daily"><a href="#schtasks-create-daily" class="headerlink" title="schtasks create daily"></a>schtasks create daily</h3><ul><li>语法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /create /tn TaskName /tr TaskRun /sc daily [/mo &#123;1 - 365&#125;] [/st StartTime] [/sd StartDate] [/ed EndDate] [/s computer [/u [domain\]user /p password]] [/ru &#123;[Domain\]User | <span class="string">"System"</span>&#125; [/rp Password]]</span><br></pre></td></tr></table></figure><ul><li>范例</li></ul><blockquote><p>计划任务每天运行一次</p></blockquote><p>下面的范例计划 MyApp 程序在每天的 8:00 A.M. 运行一次，直到 2001 年 12 月 31 日结束。由于它忽略了 /mo 参数，所以使用默认间隔 1 来每天运行命令。</p><pre><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc daily /st 08:00:00 /ed 12/31/2001</code></pre><blockquote><p>计划任务每隔一天运行一次</p></blockquote><p>下面的范例计划 MyApp 程序从 2001 年 12 月 31 日起每隔一天在 1:00 P.M. (13:00) 运行。命令使用 /mo 参数来指定两 (2) 天的间隔。</p><pre><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc daily /mo 2 /st 13:00:00 /sd 12/31/2001</code></pre><h3 id="schtasks-create-weekly"><a href="#schtasks-create-weekly" class="headerlink" title="schtasks create weekly"></a>schtasks create weekly</h3><ul><li>语法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /create /tn TaskName /tr TaskRun /sc weekly [/d &#123;MON - SUN | *&#125;] [/mo &#123;1 - 52&#125;] [/st StartTime] [/sd StartDate] [/ed EndDate] [/s computer [/u [domain\]user /p password]] [/ru &#123;[Domain\]User | <span class="string">"System"</span>&#125; [/rp Password]]</span><br></pre></td></tr></table></figure><ul><li>范例</li></ul><blockquote><p>计划任务每六周运行一次</p></blockquote><p>下面的命令计划 MyApp 程序在远程计算机上每六周运行一次。该命令使用 /mo 参数来指定间隔。它也使用 /s 参数来指定远程计算机，使用 /ru 参数来计划任务以用户的 Administrator 帐户权限运行。因为忽略了 /rp 参数，SchTasks.exe 会提示用户输入 Administrator 帐户密码。</p><p>另外，因为命令是远程运行的，所以命令中所有的路径，包括到 MyApp.exe 的路径，都是指向远程计算机上的路径。</p><pre><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc weekly /mo 6 /s Server16 /ru Admin01</code></pre><blockquote><p>计划任务每隔一周在周五运行</p></blockquote><p>下面的命令计划任务每隔一周在周五运行。它使用 /mo 参数来指定两周的间隔，使用 /d 参数来指定是一周内的哪一天。如计划任务在每个周五运行，要忽略 /mo 参数或将其设置为 1。</p><pre><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc weekly /mo 2 /d FRI</code></pre><h3 id="schtasks-create-monthly"><a href="#schtasks-create-monthly" class="headerlink" title="schtasks create monthly"></a>schtasks create monthly</h3><ul><li>语法</li></ul><blockquote><p>常规月计划语法</p></blockquote><pre><code>schtasks /create /tn TaskName /tr TaskRun /sc monthly [/mo {FIRST | SECOND | THIRD | FOURTH | LAST | LASTDAY] [/d {MON - SUN | 1 - 31}] [/m {JAN - DEC[,JAN - DEC...] | *}] [/st StartTime] [/sd StartDate] [/ed EndDate] [/s computer [/u [domain\]user /p password]] [/ru {[Domain\]User | &quot;System&quot;} [/rp Password]]</code></pre><blockquote><p>指定周的语法</p></blockquote><pre><code>schtasks /create /tn TaskName /tr TaskRun /sc monthly /mo {FIRST | SECOND | THIRD | FOURTH | LAST} /d {MON - SUN} [/m {JAN - DEC[,JAN - DEC...] | *}] [/st StartTime] [/sd StartDate] [/ed EndDate] [/s computer [/u [domain\]user /p password]] [/ru {[Domain\]User | &quot;System&quot;} [/rp Password]]</code></pre><blockquote><p>Lastday 语法</p></blockquote><pre><code>schtasks /create /tn TaskName /tr TaskRun /sc monthly /mo LASTDAY /m {JAN - DEC[,JAN - DEC...] | *} [/st StartTime] [/sd StartDate] [/ed EndDate] [/s computer [/u [domain\]user /p password]] [/ru {[Domain\]User | &quot;System&quot;} [/rp Password]]</code></pre><blockquote><p>指定日期的语法</p></blockquote><pre><code>schtasks /create /tn TaskName /tr TaskRun /sc monthly /d {1 - 31} [/m {JAN - DEC[,JAN - DEC...] | *}] [/st StartTime] [/sd StartDate] [/ed EndDate] [/s computer [/u [domain\]user /p password]] [/ru {[Domain\]User | &quot;System&quot;} [/rp Password]]</code></pre><ul><li>范例<blockquote><p>计划任务在每月的第一天运行</p></blockquote></li></ul><p>下面的命令计划 MyApp 程序在每月的第一天运行。因为默认修饰符是 none（即：没有修饰符），默认天是第一天，默认的月份是每个月，所以该命令不需要任何其它的参数。</p><pre><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc monthly</code></pre><blockquote><p>计划任务在每月的最后一天运行</p></blockquote><p>下面的命令计划 MyApp 程序在每月的最后一天运行。它使用 <code>/mo</code> 参数指定在每月的最后一天运行程序，使用通配符 (<code>*</code>) 与 <code>/m</code> 参数表明在每月的最后一天运行程序。</p><pre><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc monthly /mo lastday /m *</code></pre><blockquote><p>计划任务每三个月运行一次</p></blockquote><p>下面的命令计划 MyApp 程序每三个月运行一次。.它使用 <code>/mo</code> 参数来指定间隔。</p><pre><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc monthly /mo 3</code></pre><blockquote><p>计划任务在每月的第二个周日运行</p></blockquote><p>下面的命令计划 MyApp 程序在每月的第二个周日运行。它使用 /mo 参数指定是每月的第二周，使用 /d 参数指定天。</p><pre><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc monthly /mo SECOND /d SUN</code></pre><blockquote><p>计划任务在五月和六月的第 15 天运行。</p></blockquote><p>下面的命令计划 MyApp 程序在五月 15 日和六月 15 日的 3:00 PM (15:00) 运行。它使用 /d 参数来指定日期，使用 /m 参数指定月份。它也使用 /st 参数来指定开始时间。</p><pre><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc monthly /d 15 /m MAY,JUN /st 15:00:00</code></pre><h3 id="schtasks-create-once"><a href="#schtasks-create-once" class="headerlink" title="schtasks create once"></a>schtasks create once</h3><ul><li>语法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /create /tn TaskName /tr TaskRun /sc once /st StartTime /sd StartDate [/s computer [/u [domain\]user /p password]] [/ru &#123;[Domain\]User | <span class="string">"System"</span>&#125; [/rp Password]]</span><br></pre></td></tr></table></figure><ul><li>范例</li></ul><blockquote><p>计划任务运行一次</p></blockquote><p>下面的命令计划 MyApp 程序在 2002 年 1 月 1 日午夜运行一次。它使用 /ru 参数指定以用户的 Administrator 帐户权限运行任务，使用 /rp 参数为 Administrator 帐户提供密码。</p><pre><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc once /st 00:00:00 /sd 01/01/2002 /ru Admin23 /rp p@ssworD1</code></pre><h3 id="schtasks-create-onstart"><a href="#schtasks-create-onstart" class="headerlink" title="schtasks create onstart"></a>schtasks create onstart</h3><ul><li>语法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /create /tn TaskName /tr TaskRun /sc onstart [/sd StartDate] [/s computer [/u [domain\]user /p password]] [/ru &#123;[Domain\]User | <span class="string">"System"</span>&#125; [/rp Password]]</span><br></pre></td></tr></table></figure><ul><li>范例</li></ul><blockquote><p>计划任务在每次系统启动的时候运行</p></blockquote><p>下面的命令计划 MyApp 程序在每次系统启动的时候运行，起始日期是 2001 年 3 月 15 日。</p><pre><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc onstart /sd 03/15/2001</code></pre><h3 id="schtasks-create-onlogon"><a href="#schtasks-create-onlogon" class="headerlink" title="schtasks create onlogon"></a>schtasks create onlogon</h3><ul><li>语法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /create /tn TaskName /tr TaskRun /sc onlogon [/sd StartDate] [/s computer [/u [domain\]user /p password]] [/ru &#123;[Domain\]User | <span class="string">"System"</span>&#125; [/rp Password]]</span><br></pre></td></tr></table></figure><ul><li>范例</li></ul><blockquote><p>计划任务在用户登录到远程计算机的时候运行</p></blockquote><p>下面的命令计划批处理文件在用户（任何用户）每次登录到远程计算机上的时候运行。它使用 /s 参数指定远程计算机。因为命令是远程的，所以命令中所有的路径，包括批处理文件的路径，都指定为远程计算机上的路径。</p><pre><code>schtasks /create /tn &quot;Start Web Site&quot; /tr c:\myiis\webstart.bat /sc onlogon /s Server23</code></pre><h3 id="schtasks-create-onidle"><a href="#schtasks-create-onidle" class="headerlink" title="schtasks create onidle"></a>schtasks create onidle</h3><ul><li>语法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /create /tn TaskName /tr TaskRun /sc onidle /iIdleTime [/sd StartDate] [/s computer [/u [domain\]user /p password]] [/ru &#123;[Domain\]User | <span class="string">"System"</span>&#125; [/rp Password]]</span><br></pre></td></tr></table></figure><ul><li>范例</li></ul><blockquote><p>计划某项任务在计算机空闲的时候运行</p></blockquote><p>下面的命令计划 MyApp 程序在计算机空闲的时候运行。它使用必需的 /i 参数指定在启动任务之前计算机必需持续空闲十分钟。</p><pre><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc onidle /i 10</code></pre><h3 id="更多范例"><a href="#更多范例" class="headerlink" title="更多范例"></a>更多范例</h3><ul><li>若要查看范例，请单击范例名称：</li></ul><p>创建以 <code>System</code> 权限运行的任务</p><p>下面的命令计划 MyApp 程序以 NT Authority\System 帐户权限运行。在这个范例中，任务计划在每月的第一天运行，但对于以系统权限运行的任务可以使用所有的计划类型。</p><p>该命令使用 /ru “System” 参数指定系统安全上下文。因为系统任务不需要密码，所以忽略了 /rp 参数。</p><pre><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc monthly /d 1 /ru &quot;System&quot;</code></pre><p>作为响应，SchTasks.exe 显示一个信息性消息和一个成功消息。它不提示输入密码。</p><p><strong>信息</strong>：此任务将被创建于用户名下 (“NT AUTHORITY\SYSTEM”)。 成功：计划任务 “My App” 已成功创建。</p><h2 id="创建运行多个程序的任务"><a href="#创建运行多个程序的任务" class="headerlink" title="创建运行多个程序的任务"></a>创建运行多个程序的任务</h2><p>每个任务只能运行一个程序。但是可以创建一个运行多个程序的批处理文件，然后计划一个任务来运行该批处理文件。下面的过程说明了这个方法：</p><ol><li>创建一个启动要运行程序的批处理文件。</li></ol><p>在这个范例中创建了一个启动“事件查看器”(Eventvwr.exe) 和“系统监视器”(Perfmon.exe) 的批处理文件。</p><ul><li>启动文本编辑器，例如“记事本”。</li><li><p>键入每个程序的名称和指向可执行文件的完全合格的路径。在这种情况下，文件包含有下列语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\Eventvwr.exe</span><br><span class="line">C:\Windows\System32\Perfmon.exe</span><br></pre></td></tr></table></figure></li><li><p>将文件存储为 MyApps.bat。</p></li></ul><ol start="2"><li>使用 SchTasks.exe 创建一个运行 MyApps.bat 的任务。</li></ol><p>下面的命令创建了 Monitor 任务，每当有人登录它就运行。它使用 /tn 参数命名任务，使用 /tr 参数运行 MyApps.bat。它使用 /sc 参数来指明 OnLogon 计划类型，使用 /ru 参数指定 Administrator 帐户。__</p><pre><code>schtasks /create /tn Monitor /tr C:\MyApps.bat /sc onlogon /ru Reskit\Administrator</code></pre><p>该命令的结果是，每当用户登录到计算机，任务就启动“事件查看器”和“系统监视器”。</p><ul><li>更改计划任务</li></ul><blockquote><p>更改一个或多个下列任务属性。</p></blockquote><pre><code>* 任务运行的程序 (/tr)。* 任务运行的用户帐户 (/ru)。* 用户帐户的密码 (/rp)。</code></pre><ul><li>语法</li></ul><p>schtasks /change /tn TaskName [/s computer [/u [domain]user /p password]] [/tr TaskRun] [/ru [Domain]User | “System”] [/rp Password]<br>参数</p><h3 id="tn-TaskName-1"><a href="#tn-TaskName-1" class="headerlink" title="/tn TaskName"></a>/tn TaskName</h3><pre><code>标识要更改的任务。输入任务名。</code></pre><h3 id="s-Computer-1"><a href="#s-Computer-1" class="headerlink" title="/s Computer"></a>/s Computer</h3><pre><code>指定远程计算机的名称或 IP 地址（带有或者没有反斜杠）。默认值是本地计算机。</code></pre><h3 id="u-domain-user-1"><a href="#u-domain-user-1" class="headerlink" title="/u [domain]user"></a>/u [domain]user</h3><pre><code>使用特定用户帐户的权限运行命令。默认情况下，使用已登录到运行 SchTasks 的计算机上的用户的权限运行命令。</code></pre><h3 id="p-password-1"><a href="#p-password-1" class="headerlink" title="/p password"></a>/p password</h3><pre><code>指定在 /u 参数中指定的用户帐户的密码。如果使用 /u 参数，则需要该参数。</code></pre><h3 id="tr-TaskRun-1"><a href="#tr-TaskRun-1" class="headerlink" title="/tr TaskRun"></a>/tr TaskRun</h3><pre><code>更改任务运行的程序。输入可执行文件、脚本文件或批处理文件的完全合格的路径和文件名。如果忽略了路径，SchTasks.exe 假定文件在 Systemroot\System32 目录下指定的程序替换任务最初运行的程序。</code></pre><h3 id="ru-Domain-User-“System”-1"><a href="#ru-Domain-User-“System”-1" class="headerlink" title="/ru [Domain]User | “System”"></a>/ru [Domain]User | “System”</h3><pre><code>更改用于任务的用户帐户。值 说明[domain\]User     指定用户帐户&quot;System&quot; or &quot;&quot;     指定为操作系统所使用的 NT Authority\System 帐户。在更改用户帐户的时候，必须也要更改用户密码。如果命令带有 /ru 参数，但没有 /rp 参数，SchTasks.exe 提示要求输入新的密码而且不显示键入的文本。任务以不需要密码的 NT Authority\System 帐户权限运行，SchTasks.exe 不会提示输入密码。</code></pre><h3 id="p-Password-1"><a href="#p-Password-1" class="headerlink" title="/p Password"></a>/p Password</h3><pre><code>更改用于任务的帐户密码。输入新的密码。</code></pre><h3 id="-1"><a href="#-1" class="headerlink" title="/?"></a>/?</h3><pre><code>在命令提示符显示帮助。</code></pre><ul><li>注释</li></ul><ul><li>XOX /tn 和 /s 参数标识该任务。/tr、/ru 和 /rp 参数指定可以更改的任务属性。</li><li>使用 change 操作的命令必须至少更改一个任务属性。</li><li>NT Authority\System 帐户没有交互式登录权限。用户看不到以系统权限运行的程序，不能与其交互。</li></ul><ul><li>范例</li></ul><p>更改任务运行的程序</p><p>下面的命令将 Virus Check 任务运行的程序由 VirusCheck.exe 更改为 VirusCheck2.exe。此命令使用 /tn 参数标识任务，使用 /tr 参数指定任务的新程序。（不能更改任务名称。）</p><pre><code>schtasks /change /tn &quot;Virus Check&quot; /tr C:\VirusCheck2.exe</code></pre><p>作为响应，SchTasks.exe 显示以下成功消息：</p><p>成功：计划任务 “Virus Check” 的参数已更改。</p><p>此命令的结果是，Virus Check 任务现运行 VirusCheck2.exe。</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
